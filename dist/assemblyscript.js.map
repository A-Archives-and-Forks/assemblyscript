{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","seen","has","seenInSource","seenCodesAtPos","includes","set","withRange","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","kind","LITERAL","NULL","TRUE","FALSE","Node","node","TypeName","TYPENAME","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","NAMEDTYPE","parameters","returnType","explicitThisType","FunctionTypeNode","FUNCTIONTYPE","createNamedType","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","TYPEPARAMETER","type","initializer","ParameterNode","PARAMETER","parameterKind","args","DecoratorNode","DECORATOR","arguments","decoratorKind","fromNode","CommentNode","COMMENT","commentKind","isQuoted","IdentifierExpression","IDENTIFIER","elements","ArrayLiteralExpression","literalKind","ARRAY","elementExpressions","assertionKind","expression","toType","AssertionExpression","ASSERTION","operator","left","right","BinaryExpression","BINARY","typeArgs","CallExpression","CALL","declaration","ClassExpression","CLASS","expressions","CommaExpression","COMMA","ConstructorExpression","CONSTRUCTOR","element","ElementAccessExpression","ELEMENTACCESS","elementExpression","FalseExpression","FloatLiteralExpression","FLOAT","FunctionExpression","FUNCTION","isType","InstanceOfExpression","INSTANCEOF","IntegerLiteralExpression","INTEGER","typeName","NewExpression","NEW","NullExpression","names","values","ObjectLiteralExpression","OBJECT","ParenthesizedExpression","PARENTHESIZED","PropertyAccessExpression","PROPERTYACCESS","pattern","flags","RegexpLiteralExpression","REGEXP","patternFlags","condition","ifThen","ifElse","TernaryExpression","TERNARY","StringLiteralExpression","STRING","SuperExpression","SUPER","ThisExpression","THIS","TrueExpression","operand","UnaryPostfixExpression","UNARYPOSTFIX","UnaryPrefixExpression","UNARYPREFIX","statements","BlockStatement","BLOCK","label","BreakStatement","BREAK","typeParameters","implementsTypes","members","decorators","ClassDeclaration","CLASSDECLARATION","ContinueStatement","CONTINUE","statement","DoStatement","DO","EmptyStatement","EnumDeclaration","ENUMDECLARATION","EnumValueDeclaration","ENUMVALUEDECLARATION","path","isDeclare","ExportStatement","EXPORT","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","EXPORTDEFAULT","externalName","ExportImportStatement","EXPORTIMPORT","ExportMember","EXPORTMEMBER","localName","exportedName","ExpressionStatement","EXPRESSION","ifTrue","ifFalse","IfStatement","IF","decls","ImportStatement","IMPORT","declarations","namespaceName","foreignName","ImportDeclaration","IMPORTDECLARATION","InterfaceDeclaration","INTERFACEDECLARATION","FieldDeclaration","FIELDDECLARATION","incrementor","ForStatement","FOR","variable","iterable","ForOfStatement","FOROF","signature","body","arrowKind","FunctionDeclaration","FUNCTIONDECLARATION","keyType","valueType","IndexSignatureDeclaration","INDEXSIGNATUREDECLARATION","MethodDeclaration","METHODDECLARATION","NamespaceDeclaration","NAMESPACEDECLARATION","ReturnStatement","RETURN","cases","SwitchStatement","SWITCH","SwitchCase","SWITCHCASE","ThrowStatement","THROW","catchVariable","catchStatements","finallyStatements","TryStatement","TRY","alias","TypeDeclaration","TYPEDECLARATION","VariableStatement","VARIABLE","VariableDeclaration","VARIABLEDECLARATION","VoidStatement","VOID","WhileStatement","WHILE","TypeNode","typeParameterNodes","typeArgumentNodes","k","hasGenericComponent","parameterNodes","ParameterKind","implicitFieldDeclaration","NONE","flag","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","CommentKind","Expression","LiteralExpression","AssertionKind","numTypeArguments","Range","numArguments","UnaryExpression","Statement","super","debugInfoIndex","exportPaths","SOURCE","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","parameterIndex","ArrowKind","createFunctionDeclaration","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","Token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","initialized","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","unchecked","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","arrayPrototype","staticArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocBufferInstance","allocArrayInstance","_values","Map_values","USER_ENTRY","markModuleExports","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","staticMembers","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","declaredElements","DeclaredElement","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","inSelf","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extendees","extends","basePtototype","Class","INTERFACE","base","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","isBuiltinArray","lengthField","thisInstanceMembers","baseInstanceMembers","VIRTUAL","nextPrototype","inheritedTypeArguments","baseName","baseType","target","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","fieldType","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","NativeType","FeatureFlags","ExpressionId","SideEffects","UnaryOp","BinaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","Auto","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","None","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","Unreachable","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","allocI32Array","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","getSideEffects","features","All","_BinaryenExpressionGetSideEffects","u8s","numValues","i32s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","ch","fromCharCodes","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","auto","isize64","isize32","usize64","usize32","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","BuiltinNames","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","pendingClasses","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","finishResolveClass","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pendingIndex","indexOf","splice","derivedPendingClasses","pending","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","Exnref","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","Binaryen","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","importMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","feature","Constraints","RuntimeFeatures","argumentsLength","setArgumentsLength","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","runtimeFeatures","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","virtualCalls","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","initializeProgram","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","nativeParams","nativeResults","flatten","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Set_values","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileFunction","compileClassInstanceOf","setupVirtualLookupTables","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","Function_0_is_possibly_called_virtually_which_is_not_yet_supported","elementName","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureTrampoline","ensureBuiltinArgumentsLength","COMPILED","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","compileExpression","nativeType","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","origInitExpr","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","makeZero","findDecorator","decoratorNodes","isManaged","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","An_implementation_cannot_be_declared_in_ambient_contexts","local_set","local_get","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","unreachable","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","temp","nativeSizeType","unary","makeAllocation","makeFieldInitializationInConstructor","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","compileField","compileProperty","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","load","local_tee","drop","makeRelease","store","compilePropertyGetter","compilePropertySetter","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","byteLength","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","makeIsTrueish","condKind","evaluateConditionKind","hasSideEffects","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","thenTerminates","elseStmts","elseFlow","elseTerminates","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","unset","newArgs","makeAbort","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","tempThis","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","ctx","BuiltinContext","compiler","contextIsExact","builtins","fn","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","Optional_parameter_must_have_an_initializer","newExpr","oldExpr","temp1","temp2","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","bufferSize","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseClass","baseCtor","allocExpr","theEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","ref_is_null","thisLocalIndex","fieldPrototype","codeLocation","messageArg","filenameArg","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_min","v128_max","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","builtin_clz","checkTypeOptional","checkArgsRequired","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","builtin_store","inType","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","evaluateConstantType","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","contextualUsize","classMembers","Type_0_has_no_property_1","resultType","host","MemorySize","MemoryGrow","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","off","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","i64_to_string","walk","TSDBuilder","unknown","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","x","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","util","readI32","readI64","valueI64","cloned","v","overrides","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal"],"mappings":";;;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,aACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,YAAaJ,GACK,iBAAZC,QACdA,QAAwB,eAAID,EAAQG,QAAQ,aAE5CJ,EAAqB,eAAIC,EAAQD,EAAe,UARlD,CASmB,oBAATO,KAAuBA,KAAOC,MAAM,SAASC,GACvD,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUV,QAGnC,IAAIC,EAASO,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHZ,QAAS,IAUV,OANAa,EAAQH,GAAUI,KAAKb,EAAOD,QAASC,EAAQA,EAAOD,QAASS,GAG/DR,EAAOW,GAAI,EAGJX,EAAOD,QA0Df,OArDAS,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASjB,EAASkB,EAAMC,GAC3CV,EAAoBW,EAAEpB,EAASkB,IAClCG,OAAOC,eAAetB,EAASkB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAASzB,GACX,oBAAX0B,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAetB,EAAS0B,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAetB,EAAS,aAAc,CAAE4B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAASnC,GAChC,IAAIkB,EAASlB,GAAUA,EAAO8B,WAC7B,WAAwB,OAAO9B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAQ,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,I,gFC5ErD,SAAYC,GAEV,mBAKA,uBAEA,uBAEA,yBAEA,qBAEA,kBAEA,wBAEA,4BAEA,6BAEA,yBAEA,2BAEA,gCAEA,oBAEA,oBAEA,oDAKA,6BAEA,6BAEA,6CAEA,gCAEA,sCAEA,0CAEA,2CAKA,iCAEA,iCAEA,+BAEA,8BAEA,sCAEA,gCAEA,iCAKA,+BAxEF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KA4EV,EAAAC,eAAiB,IAEjB,EAAAC,aAAe,KAEf,EAAAC,cAAgB,OAEhB,EAAAC,cAAgB,OAEhB,EAAAC,mBAAqB,IAErB,EAAAC,iBAAmB,IAEnB,EAAAC,gBAAkB,IAElB,EAAAC,cAAgB,OAEhB,EAAAC,eAAiB,EAAAD,cAAgB,EAAAP,eAEjC,EAAAS,aAAe,EAAAT,eAAiB,QAG7C,SAAiBU,GAEF,EAAAC,MAAQ,GAER,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,KAAO,OACP,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,KAAO,OACP,EAAAC,OAAS,SACT,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,OACR,EAAAC,OAAS,SACT,EAAAC,QAAU,UACV,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,QAAU,UACV,EAAAC,QAAU,UACV,EAAAC,SAAW,WAEX,EAAAC,MAAQ,OACR,EAAAC,MAAQ,OACR,EAAAC,OAAS,QAET,EAAAC,MAAQ,OACR,EAAAC,OAAS,QACT,EAAAC,YAAc,cAEd,EAAAC,WAAa,aACb,EAAAC,mBAAqB,qBACrB,EAAAC,cAAgB,gBAChB,EAAAC,gBAAkB,kBAClB,EAAAC,eAAiB,iBACjB,EAAAC,mBAAqB,qBACrB,EAAAC,iBAAmB,mBACnB,EAAAC,2BAA6B,6BAC7B,EAAAC,4BAA8B,8BAC9B,EAAAC,4BAA8B,8BAC9B,EAAAC,wBAA0B,0BAC1B,EAAAC,iBAAmB,mBACnB,EAAAC,oBAAsB,sBACtB,EAAAC,+BAAiC,iCACjC,EAAAC,uBAAyB,yBACzB,EAAAC,4BAA8B,8BAE9B,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,KAAO,OACP,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,KAAO,OACP,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,MAAQ,QACR,EAAAC,YAAc,cACd,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,gBAAkB,kBAClB,EAAAC,YAAc,cACd,EAAAC,KAAO,OACP,EAAAC,MAAQ,QACR,EAAAC,UAAY,YACZ,EAAAC,WAAa,aACb,EAAAC,WAAa,aACb,EAAAC,WAAa,aACb,EAAAC,WAAa,aACb,EAAAC,kBAAoB,oBACpB,EAAAC,YAAc,cACd,EAAAC,YAAc,cACd,EAAAC,YAAc,cACd,EAAAC,aAAe,eACf,EAAAC,aAAe,eACf,EAAAC,MAAQ,QAER,EAAAC,MAAQ,QACR,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,UACR,EAAAC,QAAU,YACV,EAAAC,KAAO,SACP,EAAAC,OAAS,WACT,EAAAC,QAAU,YACV,EAAAC,QAAU,YACV,EAAAC,SAAW,aACX,EAAAC,YAAc,eACd,EAAAC,MAAQ,UACR,EAAAC,YAAc,gBACd,EAAAC,WAAa,eAjH5B,CAAiB,EAAA1G,cAAA,EAAAA,YAAW,KAqH5B,YAAS,EAAA2G,QAAA,EAAAA,QAAS,EAAAC,gBAAA,EAAAA,gBAClB,YAAS,EAAAC,OAAA,EAAAA,OACT,YAAS,EAAAC,SAAA,EAAAA,SAAU,EAAAC,cAAA,EAAAA,e,4ICzNnB,SACA,SACA,SACA,SACA,U,8ECIA,cAKA,OAIA,IAMYC,EANZ,QAkBA,SAAgBC,EAA2BC,GACzC,OAAQA,GACN,KAAKF,EAAmBG,SAAU,MAAO,WACzC,KAAKH,EAAmBI,KAAM,MAAO,OACrC,KAAKJ,EAAmBK,QAAS,MAAO,UACxC,KAAKL,EAAmBM,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAiBb,SAAgBC,EAA0BN,GACxC,OAAQA,GACN,KAAKF,EAAmBG,SAAU,OAAO,EAAAM,cACzC,KAAKT,EAAmBI,KAAM,OAAO,EAAAM,WACrC,KAAKV,EAAmBK,QAAS,OAAO,EAAAM,aACxC,KAAKX,EAAmBM,MAAO,OAAO,EAAAM,UACtC,QAEE,OADAL,QAAO,GACA,IAlDX,EAAAM,eAAA,EAAAA,eACA,EAAAC,uBAAA,EAAAA,uBAIF,SAAYd,GAEV,2BAEA,mBAEA,yBAEA,qBARF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAY9B,+BAca,EAAAU,WAAqB,QAErB,EAAAC,aAAuB,QAEvB,EAAAC,UAAoB,QAEpB,EAAAH,cAAwB,QAExB,EAAAM,YAAsB,OAGnC,8BAcA,MAAaC,EAcX,YAAoBC,EAAWf,EAA8BgB,GAL7D,KAAAC,MAAsB,KAEtB,KAAAC,aAA6B,KAI3BpL,KAAKiL,KAAOA,EACZjL,KAAKkK,SAAWA,EAChBlK,KAAKkL,QAAUA,EAIjB,cACED,EACAf,EACAmB,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB,IAAIL,EAAU,EAAAJ,uBAAuBG,GAIrC,OAHa,OAATI,IAAeH,EAAUA,EAAQM,QAAQ,MAAOH,IACvC,OAATC,IAAeJ,EAAUA,EAAQM,QAAQ,MAAOF,IACvC,OAATC,IAAeL,EAAUA,EAAQM,QAAQ,MAAOD,IAC7C,IAAIP,EAAkBC,EAAMf,EAAUgB,GAI/C,UAAUC,GAER,OADAnL,KAAKmL,MAAQA,EACNnL,KAIT,iBAAiBmL,GAEf,OADAnL,KAAKoL,aAAeD,EACbnL,KAIT,WACE,IAAImL,EAAQnL,KAAKmL,MACjB,OAAIA,EAEAlB,EAA2BjK,KAAKkK,UAChC,IACAlK,KAAKiL,KAAKQ,WACV,MACAzL,KAAKkL,QACL,QACAC,EAAMO,OAAOC,eACb,IACAR,EAAMS,KAAKH,WACX,IACAN,EAAMU,OAAOJ,WAIfxB,EAA2BjK,KAAKkK,UAChC,IACAlK,KAAKiL,KAAKQ,WACV,KACAzL,KAAKkL,SA4DX,SAAgBY,EAAwBX,EAAcY,GAAkB,GAKtE,IAJA,IAAIC,EAAOb,EAAMO,OAAOM,KACpBC,EAAMD,EAAKE,OACXC,EAAQhB,EAAMgB,MACdC,EAAMjB,EAAMiB,IACTD,EAAQ,IAAM,EAAAE,YAAYL,EAAKM,WAAWH,EAAQ,KAAKA,IAC9D,KAAOC,EAAMH,IAAQ,EAAAI,YAAYL,EAAKM,WAAWF,KAAOA,IAMxD,IALA,IAAIG,EAAe,CACjB,MACAP,EAAKQ,UAAUL,EAAOC,GACtB,OAEKD,EAAQhB,EAAMgB,OACnBI,EAAGE,KAAK,KACRN,IAGF,GADIJ,GAAWQ,EAAGE,KAAK,EAAA7B,WACnBO,EAAMgB,OAAShB,EAAMiB,IACvBG,EAAGE,KAAK,UAER,KAAON,IAAUhB,EAAMiB,KAAK,CAC1B,GAAI,EAAAC,YAAYL,EAAKM,WAAWH,IAAS,CACvCI,EAAGE,KAAKN,GAAShB,EAAMgB,MAAQ,EAAI,IAAM,KACzC,MAEFI,EAAGE,KAAK,KAIZ,OADIV,GAAWQ,EAAGE,KAAK,EAAA1B,aAChBwB,EAAGG,KAAK,IA/JjB,sBA4EA,mCACExB,EACAa,GAAkB,EAClBY,GAAoB,GAIpB,IAAIJ,EAAe,GACfR,GAAWQ,EAAGE,KAAKjC,EAA0BU,EAAQhB,WACzDqC,EAAGE,KAAKxC,EAA2BiB,EAAQhB,WACvC6B,GAAWQ,EAAGE,KAAK,EAAA1B,aACvBwB,EAAGE,KAAKvB,EAAQD,KAAO,IAAO,MAAQ,OACtCsB,EAAGE,KAAKvB,EAAQD,KAAKQ,YACrBc,EAAGE,KAAK,MACRF,EAAGE,KAAKvB,EAAQA,SAGhB,IAAIC,EAAQD,EAAQC,MACpB,GAAIA,EAAO,CAGLwB,IACFJ,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBX,EAAOY,KAEzCQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAKtB,EAAMO,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAKtB,EAAMS,KAAKH,YACnBc,EAAGE,KAAK,KACRF,EAAGE,KAAKtB,EAAMU,OAAOJ,YACrBc,EAAGE,KAAK,KAER,IAAIrB,EAAeF,EAAQE,aACvBA,IACEuB,IACFJ,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBV,EAAcW,KAEhDQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAKrB,EAAaM,OAAOC,gBAC5BY,EAAGE,KAAK,KACRF,EAAGE,KAAKrB,EAAaQ,KAAKH,YAC1Bc,EAAGE,KAAK,KACRF,EAAGE,KAAKrB,EAAaS,OAAOJ,YAC5Bc,EAAGE,KAAK,MAGZ,OAAOF,EAAGG,KAAK,KAIjB,4BAiCA,0BAQE,YAAsBE,EAA0C,MAHxD,KAAAC,KAAmC,IAAIjF,IAI7C5H,KAAK4M,YAAcA,GAAiD,IAAInF,MAI1E,eACEwD,EACAf,EACAiB,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAMtB,GAAIJ,EAAO,CACT,IAAI0B,EAAO7M,KAAK6M,KAChB,GAAIA,EAAKC,IAAI3B,EAAMO,QAAS,CAC1B,IAAIqB,EAAexC,OAAOsC,EAAK3L,IAAIiK,EAAMO,SACzC,GAAIqB,EAAaD,IAAI3B,EAAMgB,OAAQ,CACjC,IAAIa,EAAiBzC,OAAOwC,EAAa7L,IAAIiK,EAAMgB,QACnD,GAAIa,EAAeC,SAAShC,GAAO,OACnC+B,EAAeP,KAAKxB,QAEpB8B,EAAaG,IAAI/B,EAAMgB,MAAO,CAAElB,QAE7B,CACL,IAAI8B,EAAe,IAAInF,IACvBmF,EAAaG,IAAI/B,EAAMgB,MAAO,CAAElB,IAChC4B,EAAKK,IAAI/B,EAAMO,OAAQqB,IAG3B,IAAI7B,EAAUF,EAAkBrJ,OAAOsJ,EAAMf,EAAUmB,EAAMC,EAAMC,GAC/DJ,IAAOD,EAAUA,EAAQiC,UAAUhC,IACnCC,IAAcF,EAAQE,aAAeA,GACzCpL,KAAK4M,YAAYH,KAAKvB,GAMxB,SACED,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBvL,KAAKoN,eAAenC,EAAMjB,EAAmBG,SAAUgB,EAAO,KAAME,EAAMC,EAAMC,GAIlF,gBACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBvL,KAAKoN,eAAenC,EAAMjB,EAAmBG,SAAUgB,EAAOC,EAAcC,EAAMC,EAAMC,GAI1F,KACEN,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBvL,KAAKoN,eAAenC,EAAMjB,EAAmBI,KAAMe,EAAO,KAAME,EAAMC,EAAMC,GAI9E,YACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBvL,KAAKoN,eAAenC,EAAMjB,EAAmBI,KAAMe,EAAOC,EAAcC,EAAMC,EAAMC,GAItF,QACEN,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBvL,KAAKoN,eAAenC,EAAMjB,EAAmBK,QAASc,EAAO,KAAME,EAAMC,EAAMC,GAIjF,eACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBvL,KAAKoN,eAAenC,EAAMjB,EAAmBK,QAASc,EAAOC,EAAcC,EAAMC,EAAMC,GAIzF,MACEN,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBvL,KAAKoN,eAAenC,EAAMjB,EAAmBM,MAAOa,EAAO,KAAME,EAAMC,EAAMC,GAI/E,aACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBvL,KAAKoN,eAAenC,EAAMjB,EAAmBM,MAAOa,EAAOC,EAAcC,EAAMC,EAAMC,M,8EC9WzF,aAOA,OAKA,OAOA,IAAY8B,EA2sCAC,EAgIAC,EAoQAC,GA/kDZ,SAAYH,GAEV,uBAGA,6BACA,mCACA,2BACA,qCACA,6BAGA,+BACA,6BACA,uBACA,mBACA,sBACA,sBACA,sCACA,sBACA,4BACA,gCACA,0BACA,kBACA,oBACA,sCACA,wCACA,0BACA,sBACA,oBACA,oBACA,kCACA,oCACA,kCAGA,sBACA,sBACA,4BACA,gBACA,sBACA,wBACA,sCACA,oCACA,gCACA,kBACA,sBACA,gBACA,wBACA,wBACA,wBACA,sBACA,kBACA,4BACA,oBACA,sBAGA,4CACA,0CACA,oDACA,4CACA,kDACA,8CACA,8DACA,oDACA,8CACA,oDACA,0CACA,kDAGA,8BACA,oCACA,gCACA,0BA3EF,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KA+EpB,+BAAoCI,GAClC,OAAQA,GACN,KAAKJ,EAASK,QACd,KAAKL,EAASM,KACd,KAAKN,EAASO,KACd,KAAKP,EAASQ,MAAO,OAAO,EAE9B,OAAO,GAIT,MAAsBC,EAQpB,sBACElN,EACAuK,GAEA,IAAI4C,EAAO,IAAIC,EAKf,OAJAD,EAAKN,KAAOJ,EAASY,SACrBF,EAAK5C,MAAQA,EACb4C,EAAKG,WAAatN,EAClBmN,EAAKI,KAAO,KACLJ,EAGT,4BACEnN,EACAuK,GAEA,OAAO2C,EAAKM,eAAeN,EAAKO,2BAA2BzN,EAAMuK,GAAQA,GAG3E,uBACEvK,EACA0N,EACAC,EACApD,GAEA,IAAI4C,EAAO,IAAIS,EAMf,OALAT,EAAKN,KAAOJ,EAASoB,UACrBV,EAAK5C,MAAQA,EACb4C,EAAKnN,KAAOA,EACZmN,EAAKO,cAAgBA,EACrBP,EAAKQ,WAAaA,EACXR,EAGT,0BACEW,EACAC,EACAC,EACAL,EACApD,GAEA,IAAI4C,EAAO,IAAIc,EAOf,OANAd,EAAKN,KAAOJ,EAASyB,aACrBf,EAAK5C,MAAQA,EACb4C,EAAKW,WAAaA,EAClBX,EAAKY,WAAaA,EAClBZ,EAAKa,iBAAmBA,EACxBb,EAAKQ,WAAaA,EACXR,EAGT,yBACE5C,GAEA,OAAO2C,EAAKiB,gBACVjB,EAAKkB,qBAAqB,GAAI7D,GAC9B,MACA,EACAA,GAIJ,2BACEvK,EACAqO,EACAC,EACA/D,GAEA,IAAI4C,EAAO,IAAIoB,EAMf,OALApB,EAAKN,KAAOJ,EAAS+B,cACrBrB,EAAK5C,MAAQA,EACb4C,EAAKnN,KAAOA,EACZmN,EAAKkB,YAAcA,EACnBlB,EAAKmB,YAAcA,EACZnB,EAGT,uBACEnN,EACAyO,EACAC,EACA7B,EACAtC,GAEA,IAAI4C,EAAO,IAAIwB,EAOf,OANAxB,EAAKN,KAAOJ,EAASmC,UACrBzB,EAAK5C,MAAQA,EACb4C,EAAKnN,KAAOA,EACZmN,EAAKsB,KAAOA,EACZtB,EAAKuB,YAAcA,EACnBvB,EAAK0B,cAAgBhC,EACdM,EAKT,uBACEnN,EACA8O,EACAvE,GAEA,IAAI4C,EAAO,IAAI4B,EAMf,OALA5B,EAAKN,KAAOJ,EAASuC,UACrB7B,EAAK5C,MAAQA,EACb4C,EAAKnN,KAAOA,EACZmN,EAAK8B,UAAYH,EACjB3B,EAAK+B,cAAgBxC,EAAcyC,SAASnP,GACrCmN,EAGT,qBACE/B,EACAyB,EACAtC,GAEA,IAAI4C,EAAO,IAAIiC,EAKf,OAJAjC,EAAKN,KAAOJ,EAAS4C,QACrBlC,EAAK5C,MAAQA,EACb4C,EAAKmC,YAAczC,EACnBM,EAAK/B,KAAOA,EACL+B,EAKT,kCACEnN,EACAuK,EACAgF,GAAiB,GAEjB,IAAIpC,EAAO,IAAIqC,EAKf,OAJArC,EAAKN,KAAOJ,EAASgD,WACrBtC,EAAK5C,MAAQA,EACb4C,EAAK/B,KAAOpL,EACZmN,EAAKoC,SAAWA,EACTpC,EAGT,uCACE5C,GAEA,IAAI4C,EAAO,IAAIqC,EAIf,OAHArC,EAAKN,KAAOJ,EAASgD,WACrBtC,EAAK5C,MAAQA,EACb4C,EAAK/B,KAAO,GACL+B,EAGT,oCACEuC,EACAnF,GAEA,IAAI4C,EAAO,IAAIwC,EAKf,OAJAxC,EAAKN,KAAOJ,EAASK,QACrBK,EAAK5C,MAAQA,EACb4C,EAAKyC,YAAcjD,EAAYkD,MAC/B1C,EAAK2C,mBAAqBJ,EACnBvC,EAGT,iCACE4C,EACAC,EACAC,EACA1F,GAEA,IAAI4C,EAAO,IAAI+C,EAMf,OALA/C,EAAKN,KAAOJ,EAAS0D,UACrBhD,EAAK5C,MAAQA,EACb4C,EAAK4C,cAAgBA,EACrB5C,EAAK6C,WAAaA,EAClB7C,EAAK8C,OAASA,EACP9C,EAGT,8BACEiD,EACAC,EACAC,EACA/F,GAEA,IAAI4C,EAAO,IAAIoD,EAMf,OALApD,EAAKN,KAAOJ,EAAS+D,OACrBrD,EAAK5C,MAAQA,EACb4C,EAAKiD,SAAWA,EAChBjD,EAAKkD,KAAOA,EACZlD,EAAKmD,MAAQA,EACNnD,EAGT,4BACE6C,EACAS,EACA3B,EACAvE,GAEA,IAAI4C,EAAO,IAAIuD,EAMf,OALAvD,EAAKN,KAAOJ,EAASkE,KACrBxD,EAAK5C,MAAQA,EACb4C,EAAK6C,WAAaA,EAClB7C,EAAKO,cAAgB+C,EACrBtD,EAAK8B,UAAYH,EACV3B,EAGT,6BACEyD,GAEA,IAAIzD,EAAO,IAAI0D,EAIf,OAHA1D,EAAKN,KAAOJ,EAASqE,MACrB3D,EAAK5C,MAAQqG,EAAYrG,MACzB4C,EAAKyD,YAAcA,EACZzD,EAGT,6BACE4D,EACAxG,GAEA,IAAI4C,EAAO,IAAI6D,EAIf,OAHA7D,EAAKN,KAAOJ,EAASwE,MACrB9D,EAAK5C,MAAQA,EACb4C,EAAK4D,YAAcA,EACZ5D,EAGT,mCACE5C,GAEA,IAAI4C,EAAO,IAAI+D,EAIf,OAHA/D,EAAKN,KAAOJ,EAAS0E,YACrBhE,EAAK5C,MAAQA,EACb4C,EAAK/B,KAAO,cACL+B,EAGT,qCACE6C,EACAoB,EACA7G,GAEA,IAAI4C,EAAO,IAAIkE,EAKf,OAJAlE,EAAKN,KAAOJ,EAAS6E,cACrBnE,EAAK5C,MAAQA,EACb4C,EAAK6C,WAAaA,EAClB7C,EAAKoE,kBAAoBH,EAClBjE,EAGT,6BACE5C,GAEA,IAAI4C,EAAO,IAAIqE,EAIf,OAHArE,EAAKN,KAAOJ,EAASQ,MACrBE,EAAK5C,MAAQA,EACb4C,EAAK/B,KAAO,QACL+B,EAGT,oCACEzM,EACA6J,GAEA,IAAI4C,EAAO,IAAIsE,EAKf,OAJAtE,EAAKN,KAAOJ,EAASK,QACrBK,EAAKyC,YAAcjD,EAAY+E,MAC/BvE,EAAK5C,MAAQA,EACb4C,EAAKzM,MAAQA,EACNyM,EAGT,gCACEyD,GAEA,IAAIzD,EAAO,IAAIwE,EAIf,OAHAxE,EAAKN,KAAOJ,EAASmF,SACrBzE,EAAK5C,MAAQqG,EAAYrG,MACzB4C,EAAKyD,YAAcA,EACZzD,EAGT,kCACE6C,EACA6B,EACAtH,GAEA,IAAI4C,EAAO,IAAI2E,EAKf,OAJA3E,EAAKN,KAAOJ,EAASsF,WACrB5E,EAAK5C,MAAQA,EACb4C,EAAK6C,WAAaA,EAClB7C,EAAK0E,OAASA,EACP1E,EAGT,sCACEzM,EACA6J,GAEA,IAAI4C,EAAO,IAAI6E,EAKf,OAJA7E,EAAKN,KAAOJ,EAASK,QACrBK,EAAKyC,YAAcjD,EAAYsF,QAC/B9E,EAAK5C,MAAQA,EACb4C,EAAKzM,MAAQA,EACNyM,EAGT,2BACE+E,EACAzB,EACA3B,EACAvE,GAEA,IAAI4C,EAAO,IAAIgF,EAMf,OALAhF,EAAKN,KAAOJ,EAAS2F,IACrBjF,EAAK5C,MAAQA,EACb4C,EAAK+E,SAAWA,EAChB/E,EAAKO,cAAgB+C,EACrBtD,EAAK8B,UAAYH,EACV3B,EAGT,4BACE5C,GAEA,IAAI4C,EAAO,IAAIkF,EAIf,OAHAlF,EAAKN,KAAOJ,EAASM,KACrBI,EAAK5C,MAAQA,EACb4C,EAAK/B,KAAO,OACL+B,EAGT,qCACEmF,EACAC,EACAhI,GAEA,IAAI4C,EAAO,IAAIqF,EAMf,OALArF,EAAKN,KAAOJ,EAASK,QACrBK,EAAKyC,YAAcjD,EAAY8F,OAC/BtF,EAAK5C,MAAQA,EACb4C,EAAKmF,MAAQA,EACbnF,EAAKoF,OAASA,EACPpF,EAGT,qCACE6C,EACAzF,GAEA,IAAI4C,EAAO,IAAIuF,EAIf,OAHAvF,EAAKN,KAAOJ,EAASkG,cACrBxF,EAAK5C,MAAQA,EACb4C,EAAK6C,WAAaA,EACX7C,EAGT,sCACE6C,EACA5O,EACAmJ,GAEA,IAAI4C,EAAO,IAAIyF,EAKf,OAJAzF,EAAKN,KAAOJ,EAASoG,eACrB1F,EAAK5C,MAAQA,EACb4C,EAAK6C,WAAaA,EAClB7C,EAAK/L,SAAWA,EACT+L,EAGT,qCACE2F,EACAC,EACAxI,GAEA,IAAI4C,EAAO,IAAI6F,EAMf,OALA7F,EAAKN,KAAOJ,EAASK,QACrBK,EAAKyC,YAAcjD,EAAYsG,OAC/B9F,EAAK5C,MAAQA,EACb4C,EAAK2F,QAAUA,EACf3F,EAAK+F,aAAeH,EACb5F,EAGT,+BACEgG,EACAC,EACAC,EACA9I,GAEA,IAAI4C,EAAO,IAAImG,EAMf,OALAnG,EAAKN,KAAOJ,EAAS8G,QACrBpG,EAAK5C,MAAQA,EACb4C,EAAKgG,UAAYA,EACjBhG,EAAKiG,OAASA,EACdjG,EAAKkG,OAASA,EACPlG,EAGT,qCACEzM,EACA6J,GAEA,IAAI4C,EAAO,IAAIqG,EAKf,OAJArG,EAAKN,KAAOJ,EAASK,QACrBK,EAAKyC,YAAcjD,EAAY8G,OAC/BtG,EAAK5C,MAAQA,EACb4C,EAAKzM,MAAQA,EACNyM,EAGT,6BACE5C,GAEA,IAAI4C,EAAO,IAAIuG,EAIf,OAHAvG,EAAKN,KAAOJ,EAASkH,MACrBxG,EAAK5C,MAAQA,EACb4C,EAAK/B,KAAO,QACL+B,EAGT,4BACE5C,GAEA,IAAI4C,EAAO,IAAIyG,EAIf,OAHAzG,EAAKN,KAAOJ,EAASoH,KACrB1G,EAAK5C,MAAQA,EACb4C,EAAK/B,KAAO,OACL+B,EAGT,4BACE5C,GAEA,IAAI4C,EAAO,IAAI2G,EAIf,OAHA3G,EAAKN,KAAOJ,EAASO,KACrBG,EAAK5C,MAAQA,EACb4C,EAAK/B,KAAO,OACL+B,EAGT,oCACEiD,EACA2D,EACAxJ,GAEA,IAAI4C,EAAO,IAAI6G,EAKf,OAJA7G,EAAKN,KAAOJ,EAASwH,aACrB9G,EAAK5C,MAAQA,EACb4C,EAAKiD,SAAWA,EAChBjD,EAAK4G,QAAUA,EACR5G,EAGT,mCACEiD,EACA2D,EACAxJ,GAEA,IAAI4C,EAAO,IAAI+G,EAKf,OAJA/G,EAAKN,KAAOJ,EAAS0H,YACrBhH,EAAK5C,MAAQA,EACb4C,EAAKiD,SAAWA,EAChBjD,EAAK4G,QAAUA,EACR5G,EAKT,4BACEiH,EACA7J,GAEA,IAAI4C,EAAO,IAAIkH,EAIf,OAHAlH,EAAKN,KAAOJ,EAAS6H,MACrBnH,EAAK5C,MAAQA,EACb4C,EAAKiH,WAAaA,EACXjH,EAGT,4BACEoH,EACAhK,GAEA,IAAI4C,EAAO,IAAIqH,GAIf,OAHArH,EAAKN,KAAOJ,EAASgI,MACrBtH,EAAK5C,MAAQA,EACb4C,EAAKoH,MAAQA,EACNpH,EAGT,8BACEG,EACAoH,EACArG,EACAsG,EACAC,EACAC,EACA9B,EACAxI,GAEA,IAAI4C,EAAO,IAAI2H,GAUf,OATA3H,EAAKN,KAAOJ,EAASsI,iBACrB5H,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOsN,EACZH,EAAKuH,eAAiBA,EACtBvH,EAAKkB,YAAcA,EACnBlB,EAAKwH,gBAAkBA,EACvBxH,EAAKyH,QAAUA,EACfzH,EAAK0H,WAAaA,EACX1H,EAGT,+BACEoH,EACAhK,GAEA,IAAI4C,EAAO,IAAI6H,GAIf,OAHA7H,EAAKN,KAAOJ,EAASwI,SACrB9H,EAAK5C,MAAQA,EACb4C,EAAKoH,MAAQA,EACNpH,EAGT,yBACE+H,EACA/B,EACA5I,GAEA,IAAI4C,EAAO,IAAIgI,GAKf,OAJAhI,EAAKN,KAAOJ,EAAS2I,GACrBjI,EAAK5C,MAAQA,EACb4C,EAAK+H,UAAYA,EACjB/H,EAAKgG,UAAYA,EACVhG,EAGT,4BACE5C,GAEA,IAAI4C,EAAO,IAAIkI,GAGf,OAFAlI,EAAKN,KAAOJ,EAASpK,MACrB8K,EAAK5C,MAAQA,EACN4C,EAGT,6BACEnN,EACA4U,EACAC,EACA9B,EACAxI,GAEA,IAAI4C,EAAO,IAAImI,GAOf,OANAnI,EAAKN,KAAOJ,EAAS8I,gBACrBpI,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOA,EACZmN,EAAKoF,OAASqC,EACdzH,EAAK0H,WAAaA,EACX1H,EAGT,kCACEnN,EACAU,EACAqS,EACAxI,GAEA,IAAI4C,EAAO,IAAIqI,GAMf,OALArI,EAAKN,KAAOJ,EAASgJ,qBACrBtI,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOA,EACZmN,EAAKzM,MAAQA,EACNyM,EAGT,6BACEyH,EACAc,EACAC,EACApL,GAEA,IAAI4C,EAAO,IAAIyI,GAKf,GAJAzI,EAAKN,KAAOJ,EAASoJ,OACrB1I,EAAK5C,MAAQA,EACb4C,EAAKyH,QAAUA,EACfzH,EAAKuI,KAAOA,EACRA,EAAM,CACR,IAAI3K,EAAiB,EAAA+K,cAAcJ,EAAKhV,OACpCgV,EAAKhV,MAAMqV,WAAW,KACxBhL,EAAiB,EAAAiL,YAAYjL,EAAgBR,EAAMO,OAAOmL,cAErDlL,EAAegL,WAAW,EAAA7T,kBAAiB6I,EAAiB,EAAA7I,eAAiB6I,GAEpFoC,EAAK8I,aAAeC,GAAmBnL,QAEvCoC,EAAK8I,aAAe,KAGtB,OADA9I,EAAKwI,UAAYA,EACVxI,EAGT,oCACEyD,EACArG,GAEA,IAAI4C,EAAO,IAAIgJ,GAIf,OAHAhJ,EAAKN,KAAOJ,EAAS2J,cACrBjJ,EAAKyD,YAAcA,EACnBzD,EAAK5C,MAAQA,EACN4C,EAGT,mCACEnN,EACAqW,EACA9L,GAEA,IAAI4C,EAAO,IAAImJ,GAKf,OAJAnJ,EAAKN,KAAOJ,EAAS8J,aACrBpJ,EAAK5C,MAAQA,EACb4C,EAAKnN,KAAOA,EACZmN,EAAKkJ,aAAeA,EACblJ,EAGT,0BACEnN,EACAqW,EACA9L,GAEA,IAAI4C,EAAO,IAAIqJ,GAMf,OALArJ,EAAKN,KAAOJ,EAASgK,aACrBtJ,EAAK5C,MAAQA,EACb4C,EAAKuJ,UAAY1W,EACZqW,IAAcA,EAAerW,GAClCmN,EAAKwJ,aAAeN,EACblJ,EAGT,iCACE6C,GAEA,IAAI7C,EAAO,IAAIyJ,GAIf,OAHAzJ,EAAKN,KAAOJ,EAASoK,WACrB1J,EAAK5C,MAAQyF,EAAWzF,MACxB4C,EAAK6C,WAAaA,EACX7C,EAGT,yBACEgG,EACA2D,EACAC,EACAxM,GAEA,IAAI4C,EAAO,IAAI6J,GAMf,OALA7J,EAAKN,KAAOJ,EAASwK,GACrB9J,EAAK5C,MAAQA,EACb4C,EAAKgG,UAAYA,EACjBhG,EAAK2J,OAASA,EACd3J,EAAK4J,QAAUA,EACR5J,EAGT,6BACE+J,EACAxB,EACAnL,GAEA,IAAI4C,EAAO,IAAIgK,GACfhK,EAAKN,KAAOJ,EAAS2K,OACrBjK,EAAK5C,MAAQA,EACb4C,EAAKkK,aAAeH,EACpB/J,EAAKmK,cAAgB,KACrBnK,EAAKuI,KAAOA,EACZ,IAAI3K,EAAiB,EAAA+K,cAAcJ,EAAKhV,OAOxC,OANIgV,EAAKhV,MAAMqV,WAAW,KACxBhL,EAAiB,EAAAiL,YAAYjL,EAAgBR,EAAMO,OAAOmL,cAErDlL,EAAegL,WAAW,EAAA7T,kBAAiB6I,EAAiB,EAAA7I,eAAiB6I,GAEpFoC,EAAK8I,aAAeC,GAAmBnL,GAChCoC,EAGT,yCACEG,EACAoI,EACAnL,GAEA,IAAI4C,EAAO,IAAIgK,GACfhK,EAAKN,KAAOJ,EAAS2K,OACrBjK,EAAK5C,MAAQA,EACb4C,EAAKkK,aAAe,KACpBlK,EAAKmK,cAAgBhK,EACrBH,EAAKuI,KAAOA,EACZ,IAAI3K,EAAiB,EAAA+K,cAAcJ,EAAKhV,OAOxC,OANIgV,EAAKhV,MAAMqV,WAAW,KACxBhL,EAAiB,EAAAiL,YAAYjL,EAAgBR,EAAMO,OAAOmL,cAErDlL,EAAegL,WAAW,EAAA7T,kBAAiB6I,EAAiB,EAAA7I,eAAiB6I,GAEpFoC,EAAK8I,aAAeC,GAAmBnL,GAChCoC,EAGT,+BACEoK,EACAvX,EACAuK,GAEA,IAAI4C,EAAO,IAAIqK,GAMf,OALArK,EAAKN,KAAOJ,EAASgL,kBACrBtK,EAAK5C,MAAQA,EACb4C,EAAKoK,YAAcA,EACdvX,IAAMA,EAAOuX,GAClBpK,EAAKnN,KAAOA,EACLmN,EAGT,kCACEnN,EACA0U,EACArG,EACAuG,EACAC,EACA9B,EACAxI,GAEA,IAAI4C,EAAO,IAAIuK,GASf,OARAvK,EAAKN,KAAOJ,EAASkL,qBACrBxK,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOA,EACZmN,EAAKuH,eAAiBA,EACtBvH,EAAKkB,YAAcA,EACnBlB,EAAKyH,QAAUA,EACfzH,EAAK0H,WAAaA,EACX1H,EAGT,8BACEnN,EACAyO,EACAC,EACAmG,EACA9B,EACAxI,GAEA,IAAI4C,EAAO,IAAIyK,GAQf,OAPAzK,EAAKN,KAAOJ,EAASoL,iBACrB1K,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOA,EACZmN,EAAKsB,KAAOA,EACZtB,EAAKuB,YAAcA,EACnBvB,EAAK0H,WAAaA,EACX1H,EAGT,0BACEuB,EACAyE,EACA2E,EACA5C,EACA3K,GAEA,IAAI4C,EAAO,IAAI4K,GAOf,OANA5K,EAAKN,KAAOJ,EAASuL,IACrB7K,EAAK5C,MAAQA,EACb4C,EAAKuB,YAAcA,EACnBvB,EAAKgG,UAAYA,EACjBhG,EAAK2K,YAAcA,EACnB3K,EAAK+H,UAAYA,EACV/H,EAGT,4BACE8K,EACAC,EACAhD,EACA3K,GAEA,IAAI4C,EAAO,IAAIgL,GAMf,OALAhL,EAAKN,KAAOJ,EAAS2L,MACrBjL,EAAK5C,MAAQA,EACb4C,EAAK8K,SAAWA,EAChB9K,EAAK+K,SAAWA,EAChB/K,EAAK+H,UAAYA,EACV/H,EAGT,iCACEnN,EACA0U,EACA2D,EACAC,EACAzD,EACA9B,EACAwF,EACAhO,GAEA,IAAI4C,EAAO,IAAIqL,GAUf,OATArL,EAAKN,KAAOJ,EAASgM,oBACrBtL,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOA,EACZmN,EAAKuH,eAAiBA,EACtBvH,EAAKkL,UAAYA,EACjBlL,EAAKmL,KAAOA,EACZnL,EAAK0H,WAAaA,EAClB1H,EAAKoL,UAAYA,EACVpL,EAGT,uCACEuL,EACAC,EACA5F,EACAxI,GAEA,IAAI4C,EAAO,IAAIyL,EAMf,OALAzL,EAAKN,KAAOJ,EAASoM,0BACrB1L,EAAK5C,MAAQA,EACb4C,EAAKuL,QAAUA,EACfvL,EAAKwL,UAAYA,EACjBxL,EAAK4F,MAAQA,EACN5F,EAGT,+BACEnN,EACA0U,EACA2D,EACAC,EACAzD,EACA9B,EACAxI,GAEA,IAAI4C,EAAO,IAAI2L,GASf,OARA3L,EAAKN,KAAOJ,EAASsM,kBACrB5L,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOA,EACZmN,EAAKuH,eAAiBA,EACtBvH,EAAKkL,UAAYA,EACjBlL,EAAKmL,KAAOA,EACZnL,EAAK0H,WAAaA,EACX1H,EAGT,kCACEnN,EACA4U,EACAC,EACA9B,EACAxI,GAEA,IAAI4C,EAAO,IAAI6L,GAOf,OANA7L,EAAKN,KAAOJ,EAASwM,qBACrB9L,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOA,EACZmN,EAAKyH,QAAUA,EACfzH,EAAK0H,WAAaA,EACX1H,EAGT,6BACEzM,EACA6J,GAEA,IAAI4C,EAAO,IAAI+L,GAIf,OAHA/L,EAAKN,KAAOJ,EAAS0M,OACrBhM,EAAK5C,MAAQA,EACb4C,EAAKzM,MAAQA,EACNyM,EAGT,6BACEgG,EACAiG,EACA7O,GAEA,IAAI4C,EAAO,IAAIkM,GAKf,OAJAlM,EAAKN,KAAOJ,EAAS6M,OACrBnM,EAAK5C,MAAQA,EACb4C,EAAKgG,UAAYA,EACjBhG,EAAKiM,MAAQA,EACNjM,EAGT,wBACEoH,EACAH,EACA7J,GAEA,IAAI4C,EAAO,IAAIoM,GAKf,OAJApM,EAAKN,KAAOJ,EAAS+M,WACrBrM,EAAK5C,MAAQA,EACb4C,EAAKoH,MAAQA,EACbpH,EAAKiH,WAAaA,EACXjH,EAGT,4BACEzM,EACA6J,GAEA,IAAI4C,EAAO,IAAIsM,GAIf,OAHAtM,EAAKN,KAAOJ,EAASiN,MACrBvM,EAAK5C,MAAQA,EACb4C,EAAKzM,MAAQA,EACNyM,EAGT,0BACEiH,EACAuF,EACAC,EACAC,EACAtP,GAEA,IAAI4C,EAAO,IAAI2M,GAOf,OANA3M,EAAKN,KAAOJ,EAASsN,IACrB5M,EAAK5C,MAAQA,EACb4C,EAAKiH,WAAaA,EAClBjH,EAAKwM,cAAgBA,EACrBxM,EAAKyM,gBAAkBA,EACvBzM,EAAK0M,kBAAoBA,EAClB1M,EAGT,6BACEnN,EACA0U,EACAsF,EACAnF,EACA9B,EACAxI,GAEA,IAAI4C,EAAO,IAAI8M,GAQf,OAPA9M,EAAKN,KAAOJ,EAASyN,gBACrB/M,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOA,EACZmN,EAAKuH,eAAiBA,EACtBvH,EAAKsB,KAAOuL,EACZ7M,EAAK0H,WAAaA,EACX1H,EAGT,+BACEkK,EACAxC,EACAtK,GAEA,IAAI4C,EAAO,IAAIgN,GAKf,OAJAhN,EAAKN,KAAOJ,EAAS2N,SACrBjN,EAAK5C,MAAQA,EACb4C,EAAKkK,aAAeA,EACpBlK,EAAK0H,WAAaA,EACX1H,EAGT,iCACEnN,EACAyO,EACAC,EACAmG,EACA9B,EACAxI,GAEA,IAAI4C,EAAO,IAAIkN,GAQf,OAPAlN,EAAKN,KAAOJ,EAAS6N,oBACrBnN,EAAK5C,MAAQA,EACb4C,EAAK4F,MAAQA,EACb5F,EAAKnN,KAAOA,EACZmN,EAAKsB,KAAOA,EACZtB,EAAKuB,YAAcA,EACnBvB,EAAK0H,WAAaA,EACX1H,EAGT,2BACE6C,EACAzF,GAEA,IAAI4C,EAAO,IAAIoN,GAIf,OAHApN,EAAKN,KAAOJ,EAAS+N,KACrBrN,EAAK5C,MAAQA,EACb4C,EAAK6C,WAAaA,EACX7C,EAGT,4BACEgG,EACA+B,EACA3K,GAEA,IAAI4C,EAAO,IAAIsN,GAKf,OAJAtN,EAAKN,KAAOJ,EAASiO,MACrBvN,EAAK5C,MAAQA,EACb4C,EAAKgG,UAAYA,EACjBhG,EAAK+H,UAAYA,EACV/H,GAx/BX,SA8/BA,MAAsBwN,UAAiBzN,EAOrC,oBAAoB0N,GAElB,GAAIxb,KAAKyN,MAAQJ,EAASoB,WACxB,IAFmBzO,KAEQY,KAAKuN,KAAM,CACpC,IAAIsN,EAHazb,KAG6BsO,cAC9C,GAA0B,OAAtBmN,GAA8BA,EAAkBvP,OAAS,GAC3D,IAAK,IAAI7L,EAAI,EAAGqb,EAAID,EAAkBvP,OAAQ7L,EAAIqb,IAAKrb,EACrD,GAAIob,EAAkBpb,GAAGsb,oBAAoBH,GAAqB,OAAO,MAEtE,CACL,IAAI5a,EATWZ,KASkBY,KAAKsN,WAAWlC,KACjD,IAAK,IAAI3L,EAAI,EAAGqb,EAAIF,EAAmBtP,OAAQ7L,EAAIqb,IAAKrb,EACtD,GAAImb,EAAmBnb,GAAGO,KAAKoL,MAAQpL,EAAM,OAAO,SAIrD,GAAIZ,KAAKyN,MAAQJ,EAASyB,aAAc,CAC7C,IAAI8M,EAhBe5b,KAgB2B0O,WAC9C,IAAK,IAAIrO,EAAI,EAAGqb,EAAIE,EAAe1P,OAAQ7L,EAAIqb,IAAKrb,EAClD,GAAIub,EAAevb,GAAGgP,KAAKsM,oBAAoBH,GAAqB,OAAO,EAE7E,GApBmBxb,KAoBU2O,WAAWgN,oBAAoBH,GAAqB,OAAO,EACxF,IAAI5M,EArBe5O,KAqB6B4O,iBAChD,GAAyB,OAArBA,GAA6BA,EAAiB+M,oBAAoBH,GAAqB,OAAO,OAElGjR,QAAO,GAET,OAAO,GAlCX,aAuCA,MAAayD,UAAiBF,GAA9B,aAQA,MAAaU,UAAsB+M,EAMjC,uBACE,IAAIjN,EAAgBtO,KAAKsO,cACzB,OAAyB,OAAlBA,GAA0BA,EAAcpC,OAAS,GAR5D,kBAaA,MAAa2C,UAAyB0M,GAAtC,qBAUA,MAAapM,UAA0BrB,GAAvC,sBAUA,SAAY+N,GAEV,yBAEA,2BAEA,mBANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAUzB,MAAatM,UAAsBzB,EAAnC,c,oBAUE,KAAAgO,yBAAoD,KAEpD,KAAAnI,MAAqB,EAAAtR,YAAY0Z,KAGjC,GAAGC,GAA2B,OAAQhc,KAAK2T,MAAQqI,IAASA,EAE5D,MAAMA,GAA2B,OAA8B,IAAtBhc,KAAK2T,MAAQqI,GAEtD,IAAIA,GAA2Bhc,KAAK2T,OAASqI,GAnB/C,kBAyBA,SAAY1O,GACV,uBACA,uBACA,2BACA,yCACA,yCACA,2CACA,6BACA,uBACA,uBACA,2BACA,0BACA,oBACA,wBAbF,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAgBzB,SAAiBA,GAGC,EAAAyC,SAAhB,SAAyBkM,GAEvB,GAAIA,EAASxO,MAAQJ,EAASgD,WAAY,CACxC,IAAI6L,EAAiCD,EAAUjQ,KAE/C,OADAzB,OAAO2R,EAAQhQ,QACPgQ,EAAQ5P,WAAW,IACzB,KAAK,GACH,GAAe,WAAX4P,EAAsB,OAAO5O,EAAc6O,QAC/C,MAEF,KAAK,IACH,GAAe,YAAXD,EAAuB,OAAO5O,EAAc8O,SAChD,MAEF,KAAK,IACH,GAAe,UAAXF,EAAqB,OAAO5O,EAAc+O,OAC9C,MAEF,KAAK,IACH,GAAe,UAAXH,EAAqB,OAAO5O,EAAcgP,OAC9C,MAEF,KAAK,IACH,GAAe,QAAXJ,EAAmB,OAAO5O,EAAciP,KAC5C,MAEF,KAAK,IACH,GAAe,YAAXL,EAAuB,OAAO5O,EAAckP,SAChD,MAEF,KAAK,IACH,GAAe,UAAXN,EAAqB,OAAO5O,EAAcmP,OAC9C,MAEF,KAAK,IACH,GAAe,aAAXP,EAAwB,OAAO5O,EAAcoP,UACjD,GAAe,UAAXR,EAAqB,OAAO5O,EAAcqP,aAI7C,GACLV,EAASxO,MAAQJ,EAASoG,gBACCwI,EAAUrL,WAAWnD,MAAQJ,EAASgD,WACjE,CACA,IAAI6L,EAA4DD,EAAUrL,WAAY5E,KACtFzB,OAAO2R,EAAQhQ,QACf,IAAI0Q,EAAqCX,EAAUja,SAASgK,KAG5D,GAFAzB,OAAOqS,EAAQ1Q,QAEA,YAAXgQ,EACF,OAAQU,EAAQtQ,WAAW,IACzB,KAAK,GACH,GAAe,UAAXsQ,EAAqB,OAAOtP,EAAcuP,gBAC9C,MAEF,KAAK,IACH,GAAe,UAAXD,EAAqB,OAAOtP,EAAcwP,gBAC9C,GAAe,WAAXF,EAAsB,OAAOtP,EAAcyP,kBAMvD,OAAOzP,EAAc0P,QAlEzB,CAAiB1P,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAuE9B,MAAaqC,UAAsB7B,GAAnC,kBAUA,SAAYmP,GAEV,mBAEA,uBAEA,qBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAUvB,MAAajN,UAAoBlC,GAAjC,gBAUA,MAAsBoP,UAAmBpP,GAAzC,eAGA,MAAasC,UAA6B8M,GAA1C,yBAQA,SAAY3P,GACV,qBACA,yBACA,uBACA,uBACA,qBACA,uBANF,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KAUvB,4BAAiCQ,GAC/B,GAAIA,EAAKN,MAAQJ,EAASK,QACxB,OAA4BK,EAAMyC,aAChC,KAAKjD,EAAY+E,MACjB,KAAK/E,EAAYsF,QAAS,OAAO,EAGrC,OAAO,GAIT,MAAsBsK,UAA0BD,GAAhD,sBAMA,MAAa3M,UAA+B4M,GAA5C,2BAMA,SAAYC,GACV,uBACA,eACA,yBACA,qBAJF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAQzB,MAAatM,UAA4BoM,GAAzC,wBAUA,MAAa/L,UAAyB+L,GAAtC,qBAUA,MAAa5L,UAAuB4L,EASlC,yBACE,IACIG,EADA/O,EAAgBtO,KAAKsO,cAEzB,OAAIA,IACE+O,EAAmB/O,EAAcpC,QAC5B,EAAAoR,MAAM5Q,KAAK4B,EAAc,GAAGnD,MAAOmD,EAAc+O,EAAmB,GAAGlS,OAG3EnL,KAAK4Q,WAAWzF,MAIzB,qBACE,IAAIuE,EAAO1P,KAAK6P,UACZ0N,EAAe7N,EAAKxD,OACxB,OAAIqR,EACK,EAAAD,MAAM5Q,KAAKgD,EAAK,GAAGvE,MAAOuE,EAAK6N,EAAe,GAAGpS,OAEnDnL,KAAK4Q,WAAWzF,OA3B3B,mBAgCA,MAAasG,UAAwByL,GAArC,oBAMA,MAAatL,UAAwBsL,GAArC,oBAMA,MAAapL,UAA8B1B,GAA3C,0BAIA,MAAa6B,UAAgCiL,GAA7C,4BAQA,MAAa7K,UAA+B8K,GAA5C,2BAMA,MAAa5K,UAA2B2K,GAAxC,uBAMA,MAAaxK,UAA6BwK,GAA1C,yBAQA,MAAatK,UAAiCuK,GAA9C,6BAMA,MAAapK,UAAsBmK,EASjC,yBACE,IACIG,EADA/O,EAAgBtO,KAAKsO,cAEzB,OAAsB,OAAlBA,IAA2B+O,EAAmB/O,EAAcpC,QAAU,EACjE,EAAAoR,MAAM5Q,KAAK4B,EAAc,GAAGnD,MAAOmD,EAAc+O,EAAmB,GAAGlS,OAEzEnL,KAAK8S,SAAS3H,MAIvB,qBACE,IAAIuE,EAAO1P,KAAK6P,UACZ0N,EAAe7N,EAAKxD,OACxB,OAAIqR,EACK,EAAAD,MAAM5Q,KAAKgD,EAAK,GAAGvE,MAAOuE,EAAK6N,EAAe,GAAGpS,OAEnDnL,KAAK8S,SAAS3H,OAzBzB,kBA8BA,MAAa8H,UAAuB7C,GAApC,mBAIA,MAAagD,UAAgC+J,GAA7C,4BAQA,MAAa7J,UAAgC4J,GAA7C,4BAMA,MAAa1J,UAAiC0J,GAA9C,6BAQA,MAAatJ,UAAgCuJ,GAA7C,4BAQA,MAAajJ,UAA0BgJ,GAAvC,sBAUA,MAAa9I,UAAgC+I,GAA7C,4BAMA,MAAa7I,UAAwBlE,GAArC,oBAIA,MAAaoE,UAAuBpE,GAApC,mBAIA,MAAasE,UAAuBtE,GAApC,mBAIA,MAAagC,UAAwBhC,GAArC,oBAIA,MAAsBoN,UAAwBN,GAA9C,oBAQA,MAAatI,UAA+B4I,GAA5C,2BAIA,MAAa1I,UAA8B0I,GAA3C,0BAMA,MAAsBC,UAAkB3P,GAAxC,cAGA,SAAYN,GAEV,mBAEA,+BAEA,yBAEA,qCARF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAYtB,uBAA4BM,EAmB1B,YAAYnC,EAAwBK,EAAcyB,GAChDiQ,QANF,KAAAC,gBAAuB,EAEvB,KAAAC,YAA+B,KAK7B5d,KAAKyN,KAAOJ,EAASwQ,OACrB7d,KAAK8d,WAAarQ,EAClBzN,KAAK2L,eAAiBA,EACtB,IAAIkL,EAAeC,GAAmB9W,KAAK2L,gBAC3C3L,KAAK6W,aAAeA,EACpB,IAAIkH,EAAMlH,EAAamH,YAAY,EAAA1b,gBACnCtC,KAAKie,WAAaF,GAAO,EAAIlH,EAAarK,UAAUuR,EAAM,GAAKlH,EAC/D7W,KAAKgV,WAAa,IAAIvN,MACtBzH,KAAKmL,MAAQ,IAAI,EAAAmS,MAAMtd,KAAM,EAAGgM,EAAKE,QACrClM,KAAKgM,KAAOA,EAId,eACE,OAAOhM,KAAK6W,cAAgB,EAAAhU,cAI9B,gBACE,IAAI4K,EAAOzN,KAAK8d,WAChB,OAAOrQ,GAAQD,EAAW0Q,SAAWzQ,GAAQD,EAAW2Q,gBAK5D,MAAsBC,UAA6BX,EAAnD,c,oBAIE,KAAAhI,WAAqC,KAErC,KAAA9B,MAAqB,EAAAtR,YAAY0Z,KAGjC,GAAGC,GAA2B,OAAQhc,KAAK2T,MAAQqI,IAASA,EAE5D,MAAMA,GAA2B,OAA8B,IAAtBhc,KAAK2T,MAAQqI,GAEtD,IAAIA,GAA2Bhc,KAAK2T,OAASqI,GAb/C,yBAiBA,MAAaxC,UAAkC4E,GAA/C,8BAQA,MAAsBC,UAAyCD,GAA/D,qCAQA,MAAanJ,UAAuBwI,GAApC,mBAMA,MAAarI,WAAuBqI,GAApC,oBAMA,MAAa/H,WAAyB0I,EAUpC,gBACE,IAAI9I,EAAiBtV,KAAKsV,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAepJ,OAAS,GAZ7D,sBAiBA,MAAa0J,WAA0B6H,GAAvC,uBAMA,MAAa1H,WAAoB0H,GAAjC,iBAQA,MAAaxH,WAAuBwH,GAApC,oBAIA,MAAavH,WAAwBkI,GAArC,qBAMA,MAAahI,WAA6BiI,GAA1C,0BAMA,MAAanH,WAA8BuG,GAA3C,2BAQA,MAAarG,WAAqBtJ,GAAlC,kBAQA,MAAa0I,WAAwBiH,GAArC,qBAYA,MAAa1G,WAA+B0G,GAA5C,4BAMA,MAAajG,WAA4BiG,GAAzC,yBAMA,MAAajF,WAAyB6F,EAAtC,c,oBAEE,KAAAC,gBAAuB,GAFzB,sBAMA,MAAa3F,WAAqB8E,GAAlC,kBAYA,MAAa1E,WAAuB0E,GAApC,oBAUA,SAAkBc,GAEhB,mBAEA,iDAEA,mCANF,CAAkB,EAAAA,YAAA,EAAAA,UAAS,KAU3B,MAAanF,WAA4BgF,EAUvC,gBACE,IAAI9I,EAAiBtV,KAAKsV,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAepJ,OAAS,EAI3D,QACE,OAAO4B,EAAK0Q,0BACVxe,KAAKY,KACLZ,KAAKsV,eACLtV,KAAKiZ,UACLjZ,KAAKkZ,KACLlZ,KAAKyV,WACLzV,KAAK2T,MACL3T,KAAKmZ,UACLnZ,KAAKmL,QAzBX,yBA+BA,MAAayM,WAAoB6F,GAAjC,iBAUA,MAAarF,WAA0BgG,GAAvC,uBAMA,MAAarG,WAAwB0F,GAArC,qBAYA,MAAanF,WAA6B5C,IAA1C,0BAIA,MAAagE,WAA0BN,IAAvC,uBAIA,MAAaQ,WAA6BwE,GAA1C,0BAMA,MAAatE,WAAwB2D,GAArC,qBAMA,MAAatD,WAAmBrM,GAAhC,gBAQA,MAAamM,WAAwBwD,GAArC,qBAQA,MAAapD,WAAuBoD,GAApC,oBAMA,MAAa/C,WAAqB+C,GAAlC,kBAYA,MAAa5C,WAAwBuD,GAArC,qBAQA,MAAanD,WAA4BoD,GAAzC,yBAIA,MAAatD,WAA0B0C,GAAvC,uBAQA,MAAatC,WAAsBsC,GAAnC,mBAMA,MAAapC,WAAuBoC,GAmBpC,SAAgB3G,GAAmBR,GAEjC,OADIA,EAAKmI,SAAS,SAAQnI,EAAOA,EAAK9J,UAAU,EAAG8J,EAAKpK,OAAS,IAC1DoK,EArBT,oBAQA,yBAA8B7I,EAAqBgI,GACjD,GAAIA,EACF,IAAK,IAAIpV,EAAI,EAAGqb,EAAIjG,EAAWvJ,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACjD,IAAIqe,EAAYjJ,EAAWpV,GAC3B,GAAIqe,EAAU5O,eAAiBrC,EAAM,OAAOiR,EAGhD,OAAO,MAIT,wBAMA,yBAA8BrP,GAC5B,GAAIA,EAAK5B,MAAQJ,EAASoB,UAAW,CACnC,IAAI7N,EAAuByO,EAAMzO,KACjC,QAAuB,OAAdA,EAAKuN,MAAiBvN,EAAKsN,WAAWlC,KAAKE,OAAS,GAE/D,OAAO,I,8EC7+DT,aAmBA,OAMA,OAOA,OAKA,OA6CA,OASA,OAIA,QAIA,QAKA,MAAMyS,EACJ,YAESC,EAEAC,EAEAC,EAEAC,EAEAC,GARA,KAAAJ,YAEA,KAAAC,kBAEA,KAAAC,oBAEA,KAAAC,cAEA,KAAAC,kBAKX,MAAMC,EACJ,YAESJ,EAEAC,EAEAC,EAEAC,GANA,KAAAH,kBAEA,KAAAC,oBAEA,KAAAC,cAEA,KAAAC,kBAKX,MAAME,EAEJ,YAESH,EAEAC,EAEAG,GAJA,KAAAJ,cAEA,KAAAC,iBAEA,KAAAG,eAKX,IAAYC,EAy3DAC,EA0CAC,GAn6DZ,SAAYF,GACV,yBAGA,iCACA,iCACA,qDACA,qDAGA,iBACA,iBACA,iBACA,iBACA,iBACA,kBACA,kCACA,gCACA,kCACA,kCACA,kCACA,sCACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAGA,oBACA,sBACA,kBACA,kCACA,gCACA,gCAGA,kCACA,kCAvCF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KA+CxB,SAAiBA,GAGC,EAAAG,cAAhB,SAA8BzP,EAA8B0P,GAE1D,OADAjV,OAAOiV,EAAItT,QACH4D,GACN,KAAK,EAAAxC,cAAckP,SACnB,KAAK,EAAAlP,cAAcuP,gBACjB,OAAQ2C,EAAIlT,WAAW,IACrB,KAAK,GACH,GAAW,MAAPkT,EAAa,OAAOJ,EAAaK,YACrC,GAAW,OAAPD,EAAc,OAAOJ,EAAaM,YACtC,MAEF,KAAK,IACH,GAAW,MAAPF,EAAa,OAAOJ,EAAaO,sBACrC,GAAW,OAAPH,EAAc,OAAOJ,EAAaQ,sBACtC,MAEF,KAAK,GACH,GAAW,KAAPJ,EAAY,OAAOJ,EAAaS,IACpC,MAEF,KAAK,GACH,GAAW,KAAPL,EAAY,OAAOJ,EAAaU,IACpC,MAEF,KAAK,GACH,GAAW,KAAPN,EAAY,OAAOJ,EAAaW,IACpC,GAAW,MAAPP,EAAa,OAAOJ,EAAaY,IACrC,MAEF,KAAK,GACH,GAAW,KAAPR,EAAY,OAAOJ,EAAaa,IACpC,MAEF,KAAK,GACH,GAAW,KAAPT,EAAY,OAAOJ,EAAac,IACpC,MAEF,KAAK,GACH,GAAW,KAAPV,EAAY,OAAOJ,EAAae,YACpC,MAEF,KAAK,IACH,GAAW,KAAPX,EAAY,OAAOJ,EAAagB,WACpC,MAEF,KAAK,GACH,GAAW,KAAPZ,EAAY,OAAOJ,EAAaiB,YACpC,MAEF,KAAK,GACH,GAAW,MAAPb,EAAa,OAAOJ,EAAakB,GACrC,MAEF,KAAK,GACH,GAAW,MAAPd,EAAa,OAAOJ,EAAamB,GACrC,MAEF,KAAK,GACH,GAAW,KAAPf,EAAY,OAAOJ,EAAaoB,GACpC,GAAW,MAAPhB,EAAa,OAAOJ,EAAaqB,GACrC,GAAW,MAAPjB,EAAa,OAAOJ,EAAasB,YACrC,GAAW,OAAPlB,EAAc,OAAOJ,EAAauB,cACtC,MAEF,KAAK,GACH,GAAW,KAAPnB,EAAY,OAAOJ,EAAawB,GACpC,GAAW,MAAPpB,EAAa,OAAOJ,EAAayB,GACrC,GAAW,MAAPrB,EAAa,OAAOJ,EAAa0B,YAIzC,MAEF,KAAK,EAAAxT,cAAcwP,gBACjB,OAAQ0C,EAAIlT,WAAW,IACrB,KAAK,GACH,GAAW,KAAPkT,EAAY,OAAOJ,EAAa2B,KACpC,GAAW,MAAPvB,EAAa,OAAOJ,EAAa4B,WACrC,MAEF,KAAK,GACH,GAAW,KAAPxB,EAAY,OAAOJ,EAAa6B,MACpC,GAAW,MAAPzB,EAAa,OAAOJ,EAAa8B,WACrC,MAEF,KAAK,GACH,GAAW,KAAP1B,EAAY,OAAOJ,EAAa+B,IACpC,MAEF,KAAK,IACH,GAAW,KAAP3B,EAAY,OAAOJ,EAAagC,YAIxC,MAEF,KAAK,EAAA9T,cAAcyP,iBACjB,OAAQyC,EAAIlT,WAAW,IACrB,KAAK,GACH,GAAW,MAAPkT,EAAa,OAAOJ,EAAaiC,YACrC,MAEF,KAAK,GACH,GAAW,MAAP7B,EAAa,OAAOJ,EAAakC,aAO7C,OAAOlC,EAAamC,SAIN,EAAAC,gBAAhB,SAAgCC,GAC9B,OAAQA,GACN,KAAK,EAAAC,MAAMX,KACX,KAAK,EAAAW,MAAMC,YAAa,OAAOvC,EAAaS,IAC5C,KAAK,EAAA6B,MAAMT,MACX,KAAK,EAAAS,MAAME,aAAc,OAAOxC,EAAaU,IAC7C,KAAK,EAAA4B,MAAMG,SACX,KAAK,EAAAH,MAAMI,gBAAiB,OAAO1C,EAAaW,IAChD,KAAK,EAAA2B,MAAMK,MACX,KAAK,EAAAL,MAAMM,aAAc,OAAO5C,EAAaa,IAC7C,KAAK,EAAAyB,MAAMO,QACX,KAAK,EAAAP,MAAMQ,eAAgB,OAAO9C,EAAac,IAC/C,KAAK,EAAAwB,MAAMS,kBACX,KAAK,EAAAT,MAAMU,yBAA0B,OAAOhD,EAAaY,IACzD,KAAK,EAAA0B,MAAMW,UACX,KAAK,EAAAX,MAAMY,iBAAkB,OAAOlD,EAAae,YACjD,KAAK,EAAAuB,MAAMa,IACX,KAAK,EAAAb,MAAMc,WAAY,OAAOpD,EAAagB,WAC3C,KAAK,EAAAsB,MAAMe,MACX,KAAK,EAAAf,MAAMgB,aAAc,OAAOtD,EAAaiB,YAC7C,KAAK,EAAAqB,MAAMiB,kBACX,KAAK,EAAAjB,MAAMkB,yBAA0B,OAAOxD,EAAa0B,YACzD,KAAK,EAAAY,MAAMmB,wBACX,KAAK,EAAAnB,MAAMoB,+BAAgC,OAAO1D,EAAasB,YAC/D,KAAK,EAAAgB,MAAMqB,oCACX,KAAK,EAAArB,MAAMsB,2CAA4C,OAAO5D,EAAauB,cAC3E,KAAK,EAAAe,MAAMuB,cAAe,OAAO7D,EAAakB,GAC9C,KAAK,EAAAoB,MAAMwB,mBAAoB,OAAO9D,EAAamB,GACnD,KAAK,EAAAmB,MAAMyB,YAAa,OAAO/D,EAAaoB,GAC5C,KAAK,EAAAkB,MAAM0B,mBAAoB,OAAOhE,EAAaqB,GACnD,KAAK,EAAAiB,MAAM2B,SAAU,OAAOjE,EAAawB,GACzC,KAAK,EAAAc,MAAM4B,gBAAiB,OAAOlE,EAAayB,GAElD,OAAOzB,EAAamC,SAIN,EAAAgC,qBAAhB,SAAqC9B,GACnC,OAAQA,GACN,KAAK,EAAAC,MAAMX,KAAM,OAAO3B,EAAa2B,KACrC,KAAK,EAAAW,MAAMT,MAAO,OAAO7B,EAAa6B,MACtC,KAAK,EAAAS,MAAM8B,YAAa,OAAOpE,EAAa+B,IAC5C,KAAK,EAAAO,MAAM+B,MAAO,OAAOrE,EAAagC,YACtC,KAAK,EAAAM,MAAMgC,UAAW,OAAOtE,EAAa4B,WAC1C,KAAK,EAAAU,MAAMiC,YAAa,OAAOvE,EAAa8B,WAE9C,OAAO9B,EAAamC,SAIN,EAAAqC,sBAAhB,SAAsCnC,GACpC,OAAQA,GACN,KAAK,EAAAC,MAAMgC,UAAW,OAAOtE,EAAaiC,YAC1C,KAAK,EAAAK,MAAMiC,YAAa,OAAOvE,EAAakC,YAE9C,OAAOlC,EAAamC,SA5KxB,CAAiBnC,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAiL7B,MAAayE,UAAgB,EAAAC,kBA2G3B,YAEEC,EAEAnX,EAA0C,MAE1C8Q,MAAM9Q,GA1GR,KAAAoX,QAAoB,GAEpB,KAAAC,kBAAyB,EAWzB,KAAAC,YAAgC,IAAItc,IAEpC,KAAAuc,eAAsC,IAAIvc,IAE1C,KAAAwc,sBAAmE,IAAIxc,IAEvE,KAAAyc,gBAAuC,IAAIzc,IAE3C,KAAA0c,eAAkC,IAAI1c,IAEtC,KAAA2c,eAAiC,IAAI3c,IAErC,KAAA4c,iBAAgC,IAAI/c,MAAiB,GAqErD,KAAAgd,YAAmB,EAEnB,KAAAC,gBAAuB,EAEvB,KAAAC,aAAoB,EAiFZ,KAAAC,qBAAgD,KAxEtD5kB,KAAK+jB,QAAUA,EACf,IAAIc,EAAe,IAAI,EAAAC,OAAO,EAAAjiB,cAAe,gBAAiB,EAAA2K,WAAW2Q,eACzEne,KAAK6kB,aAAeA,EACpB,IAAIE,EAAa,IAAIC,EAAKhlB,KAAM6kB,GAChC7kB,KAAK+kB,WAAaA,EAClB/kB,KAAKkkB,YAAYhX,IAAI6X,EAAWE,aAAcF,GAC9C/kB,KAAKklB,OAAS,IAAI,EAAAC,OAAOnlB,MACzBA,KAAKolB,SAAW,IAAI,EAAAC,SAASrlB,MAI/B,UAAU6W,GACR,IAAImN,EAAUhkB,KAAKgkB,QACnB,IAAK,IAAI3jB,EAAI,EAAGA,EAAI2jB,EAAQ9X,SAAU7L,EAAG,CACvC,IAAIqL,EAASsY,EAAQ3jB,GACrB,GAAIqL,EAAOmL,cAAgBA,EAAc,OAAOnL,EAAOM,KAEzD,OAAO,KAIT,mBAAmBsZ,EAAoBC,EAAaC,EAASC,GAO3Dlb,OAAOkb,EAAe,GAAK,IAC3B,EAAAC,SAASD,EAAaH,EAAQC,GAC9B,EAAAG,SAAS,EAAGJ,EAAQC,EAAS,GAC7B,EAAAG,SAASF,EAAIF,EAAQC,EAAS,GAC9B,EAAAG,SAASD,EAAaH,EAAQC,EAAS,IAIzC,wBACE,OAAO,GAIT,8BAEE3kB,EAEA+S,EAAqB,EAAAtR,YAAY0Z,MAEjC,IAAI5Q,EAAQnL,KAAK6kB,aAAa1Z,MAC9B,OAAO,EAAA2C,KAAK6X,0BACV,EAAA7X,KAAKO,2BAA2BzN,EAAMuK,GACtC,KAAM,KAAM,KAAMwI,EAAOxI,GAK7B,0BAEEvK,EAEA+S,EAAqB,EAAAtR,YAAY0Z,MAEjC,IAAI5Q,EAAQnL,KAAK6kB,aAAa1Z,MAC1B+C,EAAa,EAAAJ,KAAKO,2BAA2BzN,EAAMuK,GACvD,OAAO,EAAA2C,KAAK8X,sBACV1X,EACA,KACA,EAAAJ,KAAK+X,kBAAkB1a,GACvB,KAAMwI,EAAOxI,GAQjB,8BAEEvK,EAEA+S,EAAqB,EAAAtR,YAAY0Z,MAEjC,IAAI5Q,EAAQnL,KAAK6kB,aAAa1Z,MAC1B8N,EAAYjZ,KAAK4kB,qBAUrB,OATK3L,IACHjZ,KAAK4kB,qBAAuB3L,EAAY,EAAAnL,KAAKgY,mBAAmB,GAC9D,EAAAhY,KAAKiB,gBACH,EAAAjB,KAAKkB,qBAAqB,EAAAhM,YAAY2B,MAAOwG,GAC7C,MAAM,EAAOA,GAEf,MAAM,EAAOA,IAGV,EAAA2C,KAAK0Q,0BACV,EAAA1Q,KAAKO,2BAA2BzN,EAAMuK,GACtC,KAAM8N,EAAW,KAAM,KAAMtF,EAAO,EAAgBxI,GAKxD,+BAEEvK,EAEA+S,EAAqB,EAAAtR,YAAY0Z,MAEjC,IAAI5Q,EAAQnL,KAAK6kB,aAAa1Z,MAC9B,OAAO,EAAA2C,KAAKiY,2BACV,EAAAjY,KAAKO,2BAA2BzN,EAAMuK,GACtC,GAAI,KAAMwI,EAAOxI,GAKrB,mBAEEvK,EAEAqY,EAEA+M,EAAkBhmB,KAAK+kB,WAEvBpR,EAAqB,EAAAtR,YAAY0Z,KAEjCkK,EAAiC3G,EAAevD,MAEhD,OAAO,IAAImK,EACTtlB,EACA,IAAIulB,EACFvlB,EACAolB,EACAhmB,KAAKomB,8BAA8BxlB,EAAM+S,GACzCsS,GAEFhN,GAKJ,wBAAwBzH,GACtB,IAAI4S,EAAwBpkB,KAAKokB,sBACjC,OAAOA,EAAsBtX,IAAI0E,GAC7BjH,OAAO6Z,EAAsBljB,IAAIsQ,IACjC,KAIN,WAAWuS,GAET,IAAI/jB,KAAK2kB,YAAT,CAEA3kB,KAAK2kB,aAAc,EACnB3kB,KAAK+jB,QAAUA,EAGf/jB,KAAKqmB,mBAAmB,EAAArjB,YAAYE,GAAI,EAAAojB,KAAKpjB,IAC7ClD,KAAKqmB,mBAAmB,EAAArjB,YAAYG,IAAK,EAAAmjB,KAAKnjB,KAC9CnD,KAAKqmB,mBAAmB,EAAArjB,YAAYI,IAAK,EAAAkjB,KAAKljB,KAC9CpD,KAAKqmB,mBAAmB,EAAArjB,YAAYK,IAAK,EAAAijB,KAAKjjB,KAC9CrD,KAAKqmB,mBAAmB,EAAArjB,YAAYM,MAAOygB,EAAQwC,WACnDvmB,KAAKqmB,mBAAmB,EAAArjB,YAAYO,GAAI,EAAA+iB,KAAK/iB,IAC7CvD,KAAKqmB,mBAAmB,EAAArjB,YAAYQ,IAAK,EAAA8iB,KAAK9iB,KAC9CxD,KAAKqmB,mBAAmB,EAAArjB,YAAYS,IAAK,EAAA6iB,KAAK7iB,KAC9CzD,KAAKqmB,mBAAmB,EAAArjB,YAAYU,IAAK,EAAA4iB,KAAK5iB,KAC9C1D,KAAKqmB,mBAAmB,EAAArjB,YAAYW,MAAOogB,EAAQyC,WACnDxmB,KAAKqmB,mBAAmB,EAAArjB,YAAYY,KAAM,EAAA0iB,KAAK1iB,MAC/C5D,KAAKqmB,mBAAmB,EAAArjB,YAAYa,IAAK,EAAAyiB,KAAKziB,KAC9C7D,KAAKqmB,mBAAmB,EAAArjB,YAAYc,IAAK,EAAAwiB,KAAKxiB,KAC9C9D,KAAKqmB,mBAAmB,EAAArjB,YAAY2B,MAAO,EAAA2hB,KAAKG,MAChDzmB,KAAKqmB,mBAAmB,EAAArjB,YAAY4B,OAAQ,EAAA0hB,KAAKxiB,KACjD9D,KAAKqmB,mBAAmB,EAAArjB,YAAY6B,QAAS,EAAAyhB,KAAK1iB,MAClD5D,KAAK+kB,WAAW2B,IAAI,EAAA1jB,YAAY+B,OAAQ,IAAI4hB,EAC1C,EAAA3jB,YAAY+B,OACZ/E,KAAK+kB,WACL/kB,KAAK4mB,0BAA0B,EAAA5jB,YAAY+B,OAAQ,EAAA1C,YAAYoU,OAAS,EAAApU,YAAYwkB,SACpFvH,EAAenD,UAEjBnc,KAAK+kB,WAAW2B,IAAI,EAAA1jB,YAAYgC,QAAS,IAAI2hB,EAC3C,EAAA3jB,YAAYgC,QACZhF,KAAK+kB,WACL/kB,KAAK4mB,0BAA0B,EAAA5jB,YAAYgC,QAAS,EAAA3C,YAAYoU,OAAS,EAAApU,YAAYwkB,SACrFvH,EAAenD,UAEjBnc,KAAK+kB,WAAW2B,IAAI,EAAA1jB,YAAYiC,QAAS,IAAI0hB,EAC3C,EAAA3jB,YAAYiC,QACZjF,KAAK+kB,WACL/kB,KAAK4mB,0BAA0B,EAAA5jB,YAAYiC,QAAS,EAAA5C,YAAYoU,OAAS,EAAApU,YAAYwkB,SACrFvH,EAAenD,UAEjBnc,KAAK+kB,WAAW2B,IAAI,EAAA1jB,YAAYkC,SAAU,IAAIyhB,EAC5C,EAAA3jB,YAAYkC,SACZlF,KAAK+kB,WACL/kB,KAAK4mB,0BAA0B,EAAA5jB,YAAYkC,SAAU,EAAA7C,YAAYoU,OAAS,EAAApU,YAAYwkB,SACtFvH,EAAenD,UAEb4H,EAAQ+C,WAAW,KAAe9mB,KAAKqmB,mBAAmB,EAAArjB,YAAYe,KAAM,EAAAuiB,KAAKviB,MACjFggB,EAAQ+C,WAAW,MAA0B9mB,KAAKqmB,mBAAmB,EAAArjB,YAAYgB,OAAQ,EAAAsiB,KAAKtiB,QAGlGhE,KAAK+mB,wBAAwB,EAAA/jB,YAAYyC,WAAY,EAAA6gB,KAAKljB,IACxD4jB,QAAQjD,EAAQkD,SAAW,EAAApd,OAAOqd,OAAS,EAAArd,OAAOsd,SACpDnnB,KAAK+mB,wBAAwB,EAAA/jB,YAAY2C,cAAe,EAAA2gB,KAAK1iB,KAC3DojB,QAAQjD,EAAQqD,SAAW,EAAI,EAAG,IACpCpnB,KAAK+mB,wBAAwB,EAAA/jB,YAAY4C,gBAAiB,EAAA0gB,KAAKljB,IAC7D4jB,QAAQjD,EAAQsD,WAAY,IAC9BrnB,KAAK+mB,wBAAwB,EAAA/jB,YAAY6C,eAAgB,EAAAygB,KAAKljB,IAC5D4jB,QAAQjD,EAAQuD,UAAW,IAC7BtnB,KAAK+mB,wBAAwB,EAAA/jB,YAAY8C,mBAAoB,EAAAwgB,KAAKljB,IAChE4jB,QAAQjD,EAAQwD,kBAAmB,IACrCvnB,KAAK+mB,wBAAwB,EAAA/jB,YAAY+C,iBAAkB,EAAAugB,KAAKljB,IAC9D4jB,QAAQjD,EAAQyD,gBAAiB,IAGnCxnB,KAAK+mB,wBAAwB,EAAA/jB,YAAYgD,2BAA4B,EAAAsgB,KAAK1iB,KACxEojB,QAAQjD,EAAQ+C,WAAW,GAA0B,EAAI,EAAG,IAC9D9mB,KAAK+mB,wBAAwB,EAAA/jB,YAAYiD,4BAA6B,EAAAqgB,KAAK1iB,KACzEojB,QAAQjD,EAAQ+C,WAAW,GAA2B,EAAI,EAAG,IAC/D9mB,KAAK+mB,wBAAwB,EAAA/jB,YAAYkD,4BAA6B,EAAAogB,KAAK1iB,KACzEojB,QAAQjD,EAAQ+C,WAAW,GAA2B,EAAI,EAAG,IAC/D9mB,KAAK+mB,wBAAwB,EAAA/jB,YAAYmD,wBAAyB,EAAAmgB,KAAK1iB,KACrEojB,QAAQjD,EAAQ+C,WAAW,GAAuB,EAAI,EAAG,IAC3D9mB,KAAK+mB,wBAAwB,EAAA/jB,YAAYoD,iBAAkB,EAAAkgB,KAAK1iB,KAC9DojB,QAAQjD,EAAQ+C,WAAW,IAAgB,EAAI,EAAG,IACpD9mB,KAAK+mB,wBAAwB,EAAA/jB,YAAYqD,oBAAqB,EAAAigB,KAAK1iB,KACjEojB,QAAQjD,EAAQ+C,WAAW,IAAmB,EAAI,EAAG,IACvD9mB,KAAK+mB,wBAAwB,EAAA/jB,YAAYsD,+BAAgC,EAAAggB,KAAK1iB,KAC5EojB,QAAQjD,EAAQ+C,WAAW,IAA8B,EAAI,EAAG,IAClE9mB,KAAK+mB,wBAAwB,EAAA/jB,YAAYuD,uBAAwB,EAAA+f,KAAK1iB,KACpEojB,QAAQjD,EAAQ+C,WAAW,KAAsB,EAAI,EAAG,IAC1D9mB,KAAK+mB,wBAAwB,EAAA/jB,YAAYwD,4BAA6B,EAAA8f,KAAK1iB,KACzEojB,QAAQjD,EAAQ+C,WAAW,KAA2B,EAAI,EAAG,IAG/D,IAAIW,EAAgB,IAAIhgB,MACpBigB,EAAgB,IAAI9f,IACpB+f,EAAoB,IAAI/f,IACxBggB,EAAgB,IAAIngB,MACpBogB,EAAmB,IAAIpgB,MAG3B,IAAK,IAAIpH,EAAI,EAAGqb,EAAI1b,KAAKgkB,QAAQ9X,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACnD,IAAIqL,EAAS1L,KAAKgkB,QAAQ3jB,GACtBynB,EAAO,IAAI9C,EAAKhlB,KAAM0L,GAC1B1L,KAAKkkB,YAAYhX,IAAI4a,EAAK7C,aAAc6C,GACxC,IAAI9S,EAAatJ,EAAOsJ,WACxB,IAAK,IAAI+S,EAAI,EAAGznB,EAAI0U,EAAW9I,OAAQ6b,EAAIznB,IAAKynB,EAAG,CACjD,IAAIjS,EAAYd,EAAW+S,GAC3B,OAAQjS,EAAUrI,MAChB,KAAK,EAAAJ,SAASoJ,OACZzW,KAAKgoB,kBAAmClS,EAAWgS,EAAMJ,EAAeC,GACxE,MAEF,KAAK,EAAAta,SAAS2J,cACZhX,KAAKioB,wBAAgDnS,EAAWgS,EAAMF,EAAeC,GACrF,MAEF,KAAK,EAAAxa,SAAS2K,OACZhY,KAAKkoB,kBAAmCpS,EAAWgS,EAAML,EAAeC,GACxE,MAEF,KAAK,EAAAra,SAAS2N,SACZhb,KAAKmoB,oBAAuCrS,EAAWgS,GACvD,MAEF,KAAK,EAAAza,SAASsI,iBACZ3V,KAAKooB,gBAAkCtS,EAAWgS,EAAMF,EAAeC,GACvE,MAEF,KAAK,EAAAxa,SAAS8I,gBACZnW,KAAKqoB,eAAgCvS,EAAWgS,GAChD,MAEF,KAAK,EAAAza,SAASgM,oBACZrZ,KAAKsoB,mBAAwCxS,EAAWgS,GACxD,MAEF,KAAK,EAAAza,SAASkL,qBACZvY,KAAKuoB,oBAA0CzS,EAAWgS,GAC1D,MAEF,KAAK,EAAAza,SAASwM,qBACZ7Z,KAAKwoB,oBAA0C1S,EAAWgS,EAAMF,EAAeC,GAC/E,MAEF,KAAK,EAAAxa,SAASyN,gBACZ9a,KAAKyoB,yBAA0C3S,EAAWgS,KASlE,IAAK,IAAIY,EAAQC,SAAShB,GAAoBtnB,EAAI,EAAGqb,EAAIgN,EAAMxc,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACjF,IAAIynB,EAAOY,EAAMroB,GACbuoB,EAAcre,OAAOod,EAAkBzmB,IAAI4mB,IAC/C,IAAK,IAAIC,EAAI,EAAGznB,EAAIsoB,EAAY1c,OAAQ6b,EAAIznB,IAAKynB,EAAG,CAClD,IAAIc,EAAaC,UAAUF,EAAYb,IACnCgB,EAAc/oB,KAAKgpB,kBAAkBH,EAAW9J,YAAa8J,EAAW7J,gBACvE+J,EAOLjB,EAAKmB,iBAAiBF,GANpB/oB,KAAKkpB,MACH,EAAAre,eAAese,iBACfN,EAAW1J,YAAYhU,MAAO0d,EAAW1J,YAAY7d,QAS7D,IAAK,IAAIjB,EAAI,EAAGqb,EAAI+L,EAAcvb,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACpD,IAAI+oB,EAAe3B,EAAcpnB,GAC7Bwe,EAAkBuK,EAAavK,gBAC/BC,EAAoBsK,EAAatK,kBACrC,GAAIA,EAAmB,CACrB,IAAI9M,EAAUhS,KAAKqpB,cACjBvK,EAAkB9S,KAClBod,EAAarK,YACbqK,EAAapK,eACb0I,GAEE1V,EACFoX,EAAaxK,UAAU8H,IACrB7H,EAAgB7S,KAChBgG,EACA6M,GAIF7e,KAAKkpB,MACH,EAAAre,eAAeye,kCACfxK,EAAkB3T,MAAOie,EAAarK,YAAaD,EAAkB9S,UAGpE,CACL,IAAI+c,EAAc/oB,KAAKgpB,kBAAkBI,EAAarK,YAAaqK,EAAapK,gBAChF,GAAI+J,EAAa,CACf,IAAInK,EAAYwK,EAAaxK,UACzBtH,EAAYuH,EAAgB7S,KAChC4S,EAAU8H,IACRpP,EACAyR,EAAYQ,oBACVjS,EACAsH,EACAC,GAEFA,QAGFtU,QAAO,IAOb,IAAK,IAAIme,EAAQC,SAASjB,GAAgBrnB,EAAI,EAAGqb,EAAIgN,EAAMxc,OAAQ7L,EAAIqb,IAAKrb,EAAG,CAC7E,IAAIynB,EAAOgB,UAAUJ,EAAMroB,IACvBX,EAAU6K,OAAOmd,EAAcxmB,IAAI4mB,IAEvC,IAAK,IAAI0B,EAAcb,SAASjpB,GAAUqoB,EAAI,EAAGznB,EAAIkpB,EAAYtd,OAAQ6b,EAAIznB,IAAKynB,EAAG,CACnF,IAAI0B,EAAaX,UAAUU,EAAYzB,IACnC2B,EAAenf,OAAO7K,EAAQwB,IAAIuoB,IAClCnS,EAAYoS,EAAa7K,gBAAgB7S,KACzC+S,EAAc2K,EAAa3K,YAC/B,GAAIA,EAAa,CACf,IAAI/M,EAAUhS,KAAKqpB,cACjB/R,EACAyH,EACAxU,OAAOmf,EAAa1K,gBACpB0I,GAEE1V,EACF8V,EAAK6B,aAAaF,EAAYzX,GAE9BhS,KAAKkpB,MACH,EAAAre,eAAeye,kCACfI,EAAa7K,gBAAgB1T,MAC7B4T,EAAazH,OAGZ,CACL,IAAItF,EAAU8V,EAAK8B,aAAatS,GAChC,GAAItF,EACF8V,EAAK6B,aAAaF,EAAYzX,OACzB,CACL,IAAI6X,EAAgB7pB,KAAK8pB,aAAaxS,GAChB,OAAlBuS,GAA0BE,EAAkBF,EAAcpc,MAC5Dqa,EAAK6B,aAAaF,EAA6BI,GAE/C7pB,KAAKkpB,MACH,EAAAre,eAAeye,kCACfI,EAAa5K,kBAAkB3T,MAC/B2c,EAAK7C,aAAcyE,EAAa5K,kBAAkB9S,SAS9DzB,OAA2B,GAApBvK,KAAKykB,aACZzkB,KAAKgqB,oBAAsBhqB,KAAKiqB,aAAa,EAAAjnB,YAAY8E,aACzDyC,OAAsC,GAA/BvK,KAAKgqB,oBAAoBxE,IAChCxlB,KAAKkqB,eAAiBlqB,KAAKiqB,aAAa,EAAAjnB,YAAYwE,QACpD+C,OAAiC,GAA1BvK,KAAKkqB,eAAe1E,IAC3BxlB,KAAKmqB,wBAA0BnqB,KAAKiqB,aAAa,EAAAjnB,YAAY6E,iBAC7D0C,OAA0C,GAAnCvK,KAAKmqB,wBAAwB3E,IAGpCxlB,KAAKoqB,qBAAqB,EAAA9D,KAAKpjB,GAAI,EAAAF,YAAYyD,IAC/CzG,KAAKoqB,qBAAqB,EAAA9D,KAAKnjB,IAAK,EAAAH,YAAY0D,KAChD1G,KAAKoqB,qBAAqB,EAAA9D,KAAKljB,IAAK,EAAAJ,YAAY2D,KAChD3G,KAAKoqB,qBAAqB,EAAA9D,KAAKjjB,IAAK,EAAAL,YAAY4D,KAChD5G,KAAKoqB,qBAAqBrG,EAAQwC,UAAW,EAAAvjB,YAAY6D,OACzD7G,KAAKoqB,qBAAqB,EAAA9D,KAAK/iB,GAAI,EAAAP,YAAY8D,IAC/C9G,KAAKoqB,qBAAqB,EAAA9D,KAAK9iB,IAAK,EAAAR,YAAY+D,KAChD/G,KAAKoqB,qBAAqB,EAAA9D,KAAK7iB,IAAK,EAAAT,YAAYgE,KAChDhH,KAAKoqB,qBAAqB,EAAA9D,KAAK5iB,IAAK,EAAAV,YAAYiE,KAChDjH,KAAKoqB,qBAAqBrG,EAAQyC,UAAW,EAAAxjB,YAAYkE,OACzDlH,KAAKoqB,qBAAqB,EAAA9D,KAAK1iB,KAAM,EAAAZ,YAAYmE,MACjDnH,KAAKoqB,qBAAqB,EAAA9D,KAAKziB,IAAK,EAAAb,YAAYoE,KAChDpH,KAAKoqB,qBAAqB,EAAA9D,KAAKxiB,IAAK,EAAAd,YAAYqE,KAC5C0c,EAAQ+C,WAAW,KAAe9mB,KAAKoqB,qBAAqB,EAAA9D,KAAKviB,KAAM,EAAAf,YAAYsE,MACnFyc,EAAQ+C,WAAW,MAA0B9mB,KAAKoqB,qBAAqB,EAAA9D,KAAKtiB,OAAQ,EAAAhB,YAAYuE,QAGpGvH,KAAKqqB,iBAAmCrqB,KAAKJ,QAAQ,EAAAoD,YAAYiF,UAAWoX,EAAYiL,iBACxFtqB,KAAKuqB,kBAAoCvqB,KAAKJ,QAAQ,EAAAoD,YAAYkF,WAAYmX,EAAYiL,iBAC1FtqB,KAAKwqB,kBAAoCxqB,KAAKJ,QAAQ,EAAAoD,YAAYmF,WAAYkX,EAAYiL,iBAC1FtqB,KAAKyqB,kBAAoCzqB,KAAKJ,QAAQ,EAAAoD,YAAYoF,WAAYiX,EAAYiL,iBAC1FtqB,KAAK0qB,iBAAmC1qB,KAAKJ,QAAQ,EAAAoD,YAAYqF,WAAYgX,EAAYiL,iBACzFtqB,KAAK2qB,wBAA0C3qB,KAAKJ,QAAQ,EAAAoD,YAAYsF,kBAAmB+W,EAAYiL,iBACvGtqB,KAAK4qB,kBAAoC5qB,KAAKJ,QAAQ,EAAAoD,YAAYuF,YAAa8W,EAAYiL,iBAC3FtqB,KAAK6qB,kBAAoC7qB,KAAKJ,QAAQ,EAAAoD,YAAYwF,YAAa6W,EAAYiL,iBAC3FtqB,KAAK8qB,kBAAoC9qB,KAAKJ,QAAQ,EAAAoD,YAAYyF,YAAa4W,EAAYiL,iBAC3FtqB,KAAK+qB,kBAAoC/qB,KAAKJ,QAAQ,EAAAoD,YAAY0F,aAAc2W,EAAYiL,iBAC5FtqB,KAAKgrB,kBAAoChrB,KAAKJ,QAAQ,EAAAoD,YAAY2F,aAAc0W,EAAYiL,iBAG5F,IAAIlF,EAAWplB,KAAKolB,SACpB,IAAK,IAAI/kB,EAAI,EAAGqb,EAAIkM,EAAc1b,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACpD,IAAI4qB,EAAgBrD,EAAcvnB,GAC9B6qB,EAAc3gB,OAAO0gB,EAAcC,aACnCC,EAAc/F,EAASgG,gBAAgBF,EAAYtqB,KAAMqqB,EAAcjF,QAC3E,GAAKmF,EACL,GAAIA,EAAY1d,MAAQ4R,EAAYiL,gBAAiB,CACnD,IAAIe,EAAgCF,EAChCE,EAAcC,aAAahM,EAAe7C,SAC5Czc,KAAKkpB,MACH,EAAAre,eAAe0gB,yCACfL,EAAY/f,MAAwBggB,EAAaK,eAAexf,MAIlEqf,EAAcC,aAAahM,EAAe5C,YAC1CuO,EAAcK,aAAahM,EAAe5C,YAE1C1c,KAAKkpB,MACH,EAAAre,eAAe4gB,+DACf,EAAAnO,MAAM5Q,KAAKue,EAAcO,eAAergB,MAAO+f,EAAY/f,QAG/D8f,EAAcI,cAAgBA,OAE9BrrB,KAAKkpB,MACH,EAAAre,eAAe6gB,sCACfR,EAAY/f,OAMlB,CACE,IAAIwgB,EAAgB5H,EAAQ4H,cAC5B,GAAIA,EAEF,IAAK,IAAIjD,EAAQC,SAASgD,GAAgBtrB,EAAI,EAAGqb,EAAIgN,EAAMxc,OAAQ7L,EAAIqb,IAAKrb,EAAG,CAC7E,IAAIua,EAAQkO,UAAUJ,EAAMroB,IACxBO,EAAO2J,OAAOohB,EAAczqB,IAAI0Z,IACpC,IAAKha,EAAKsL,OAAQ,SAClB,IAAI0f,EAAYhrB,EAAK0L,WAAW,GAChC,GAAIsf,GAAa,IAAeA,GAAa,GAC3C5rB,KAAK+mB,wBAAwBnM,EAAO,EAAA0L,KAAKljB,IAAK4jB,QAAa6E,SAASjrB,EAAM,UACrE,CACL,IAAIujB,EAAiBnkB,KAAKmkB,eACtBnS,EAAUmS,EAAejjB,IAAIN,GACjC,IAAIoR,EAIC,MAAM,IAAIpJ,MAAM,2BAA6BhI,GAHhD,GAAIujB,EAAerX,IAAI8N,GAAQ,MAAM,IAAIhS,MAAM,6BAA+BhI,GAC9EujB,EAAejX,IAAI0N,EAAO5I,KASpChS,KAAK8rB,eAAiC9rB,KAAKJ,QAAQ,EAAAoD,YAAYyE,MAAO4X,EAAYiL,iBAClFtqB,KAAK+rB,qBAAuC/rB,KAAKJ,QAAQ,EAAAoD,YAAY0E,YAAa2X,EAAYiL,iBAC9FtqB,KAAKgsB,aAA+BhsB,KAAKJ,QAAQ,EAAAoD,YAAY2E,IAAK0X,EAAYiL,iBAC9EtqB,KAAKisB,aAA+BjsB,KAAKJ,QAAQ,EAAAoD,YAAY4E,IAAKyX,EAAYiL,iBAC9EtqB,KAAKksB,cAAgBlsB,KAAKmsB,eAAe,EAAAnpB,YAAY6F,OACrD7I,KAAKosB,cAAgBpsB,KAAKqsB,gBAAgB,EAAArpB,YAAYgG,OACtDhJ,KAAKssB,gBAAkBtsB,KAAKqsB,gBAAgB,EAAArpB,YAAYiG,SACxDjJ,KAAKusB,aAAevsB,KAAKqsB,gBAAgB,EAAArpB,YAAYkG,MACrDlJ,KAAKwsB,eAAiBxsB,KAAKqsB,gBAAgB,EAAArpB,YAAYmG,QACvDnJ,KAAKysB,gBAAkBzsB,KAAKqsB,gBAAgB,EAAArpB,YAAYoG,SACxDpJ,KAAK0sB,gBAAkB1sB,KAAKqsB,gBAAgB,EAAArpB,YAAYqG,SACxDrJ,KAAK2sB,iBAAmB3sB,KAAKqsB,gBAAgB,EAAArpB,YAAYsG,UACzDtJ,KAAK4sB,mBAAqB5sB,KAAKqsB,gBAAgB,EAAArpB,YAAYuG,aAC3DvJ,KAAK6sB,cAAgB7sB,KAAKqsB,gBAAgB,EAAArpB,YAAYwG,OACtDxJ,KAAK8sB,oBAAsB9sB,KAAKqsB,gBAAgB,EAAArpB,YAAYyG,aAC5DzJ,KAAK+sB,mBAAqB/sB,KAAKqsB,gBAAgB,EAAArpB,YAAY0G,YAI3D,IAAK,IAAIsjB,EAAUC,WAAWjtB,KAAKkkB,aAAc7jB,EAAI,EAAGqb,EAAIsR,EAAQ9gB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACtF,IAAIynB,EAAOgB,UAAUkE,EAAQ3sB,IACzBynB,EAAKpc,OAAOoS,YAAc,EAAAtQ,WAAW0f,YACvCltB,KAAKmtB,kBAAkBrF,KAMrB,QAAQlnB,EAAc6M,GAC5B,IAAIuE,EAAUhS,KAAK8pB,aAAalpB,GAChC,IAAKoR,EAAS,MAAM,IAAIpJ,MAAM,WAAahI,GAC3C,GAAIoR,EAAQvE,MAAQA,EAAM,MAAM,IAAI7E,MAAM,cAAgBhI,GAC1D,OAAOoR,EAID,aAAapR,GACnB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMye,EAAYiL,iBAC3C8C,EAAWptB,KAAKolB,SAASiI,aAA6BprB,EAAW,MACrE,IAAKmrB,EAAU,MAAM,IAAIxkB,MAAM,WAAahI,GAC5C,OAAOwsB,EAID,eAAexsB,GACrB,IAAIqB,EAAYjC,KAAK8pB,aAAalpB,GAClC,OAAKqB,GAAaA,EAAUwL,MAAQ4R,EAAYiO,mBACzCttB,KAAKolB,SAASmI,gBAAmCtrB,EAAW,MADQ,KAKrE,gBAAgBrB,EAAc0N,EAA+B,MACnE,IAAIrM,EAAYjC,KAAKJ,QAAQgB,EAAMye,EAAYiO,oBAC3CF,EAAWptB,KAAKolB,SAASmI,gBAAmCtrB,EAAWqM,GAC3E,IAAK8e,EAAU,MAAM,IAAIxkB,MAAM,WAAahI,GAC5C,OAAOwsB,EAID,kBAAkBtF,GACxB,IAAIpoB,EAAUooB,EAAKpoB,QACnB,GAAIA,EAEF,IAAK,IAAIstB,EAAUC,WAAWvtB,GAAUqoB,EAAI,EAAGznB,EAAI0sB,EAAQ9gB,OAAQ6b,EAAIznB,IAAKynB,EAAG,CAC7E,IAAI/V,EAAU8W,UAAUkE,EAAQjF,IAChC/nB,KAAKwtB,iBAAiBxb,GAG1B,IAAIyb,EAAc3F,EAAK2F,YACvB,GAAIA,EACF,IAAK,IAAIptB,EAAI,EAAGqb,EAAI+R,EAAYvhB,OAAQ7L,EAAIqb,IAAKrb,EAC/CL,KAAKmtB,kBAAkBM,EAAYptB,IAMjC,iBAAiB2R,GAEvB,OADAA,EAAQ9E,IAAI,EAAA7K,YAAYqrB,eAChB1b,EAAQvE,MACd,KAAK4R,EAAYiL,gBAAiB,CAChC,IAAIqD,EAAmC3b,EAAS2b,gBAChD,GAAIA,EAEF,IAAK,IAAIX,EAAUC,WAAWU,GAAkBttB,EAAI,EAAGqb,EAAIsR,EAAQ9gB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACrF,IAAIutB,EAAS9E,UAAUkE,EAAQ3sB,IAC/BL,KAAKwtB,iBAAiBI,GAG1B,MAEF,KAAKvO,EAAYwO,mBAAoB,CACnC,IAAIC,EAAsC9b,EAAS8b,gBAC/CA,GAAiB9tB,KAAKwtB,iBAAiBM,GAC3C,IAAIC,EAAsC/b,EAAS+b,gBAC/CA,GAAiB/tB,KAAKwtB,iBAAiBO,GAC3C,MAEF,KAAK1O,EAAY2O,SACjB,KAAK3O,EAAY7M,SACjB,KAAK6M,EAAY4O,MACjB,KAAK5O,EAAY3N,MAAOnH,QAAO,GAEjC,IAAI2jB,EAAgBlc,EAAQwD,QAC5B,GAAI0Y,EAEF,IAAK,IAAIlB,EAAUC,WAAWiB,GAAgB7tB,EAAI,EAAGqb,EAAIsR,EAAQ9gB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACnF,IAAIutB,EAAS9E,UAAUkE,EAAQ3sB,IAC/BL,KAAKwtB,iBAAiBI,IAMpB,mBAAmBhtB,EAAcyO,GACvC,IAAI2C,EAAU,IAAI2U,EAChB/lB,EACAZ,KAAK+kB,WACL/kB,KAAK4mB,0BAA0BhmB,EAAM,EAAAyB,YAAYoU,QACjD6I,EAAenD,SAEjBnK,EAAQmc,QAAQ9e,GAChBrP,KAAK+kB,WAAW2B,IAAI9lB,EAAMoR,GAIpB,qBAAqB3C,EAAY+e,GACvC,IAAI9J,EAAiBtkB,KAAKskB,eAC1B/Z,QAAQ8E,EAAKgf,iBAAmB/J,EAAexX,IAAIuC,IACnD,IAAI2C,EAAUhS,KAAK8pB,aAAasE,GAChC,GAAKpc,EAAL,CACAzH,OAAOyH,EAAQvE,MAAQ4R,EAAYiL,iBACnC,IAAIgE,EAAetuB,KAAKolB,SAASiI,aAA6Brb,EAAS,MAClEsc,IACLA,EAAaC,YAAclf,EAC3BiV,EAAepX,IAAImC,EAAMif,KAI3B,wBAAwB1tB,EAAcyO,EAAY/N,GAChDiJ,OAAO8E,EAAKmf,GAAG,IACf,IAAIC,EAAS,IAAIC,EACf9tB,EACAZ,KAAK+kB,WACLzF,EAAevD,KACf/b,KAAK2uB,8BAA8B/tB,EAAM,EAAAyB,YAAYusB,MAAQ,EAAAvsB,YAAYoU,SAE3EgY,EAAOI,wBAAwBvtB,EAAO+N,GACtCrP,KAAK+kB,WAAW2B,IAAI9lB,EAAM6tB,GAIpB,sBAAsB7tB,EAAcyO,EAAY/N,GACtDiJ,OAAO8E,EAAKmf,GAAG,IACf,IAAIC,EAAS,IAAIC,EACf9tB,EACAZ,KAAK+kB,WACLzF,EAAevD,KACf/b,KAAK2uB,8BAA8B/tB,EAAM,EAAAyB,YAAYusB,MAAQ,EAAAvsB,YAAYoU,SAE3EgY,EAAOK,sBAAsBxtB,EAAO+N,GACpCrP,KAAK+kB,WAAW2B,IAAI9lB,EAAM6tB,GAI5B,aAAa7tB,EAAcoR,GACzB,IAAImS,EAAiBnkB,KAAKmkB,eAC1B,GAAIA,EAAerX,IAAIlM,GAAO,CAC5B,IAAImuB,EAAWxkB,OAAO4Z,EAAejjB,IAAIN,IAMzC,GAAImuB,IAAa/c,EAAS,CACxB,IAAIgd,EAASC,EAASF,EAAU/c,GAChC,IAAKgd,EAcH,OAbIjF,EAAkBgF,EAASthB,MAC7BzN,KAAKkvB,aACH,EAAArkB,eAAeskB,uBACfnd,EAAQwZ,eAAergB,MACL4jB,EAAUvd,YAAY5Q,KAAKuK,MAC7CvK,GAGFZ,KAAKkpB,MACH,EAAAre,eAAeskB,uBACfnd,EAAQwZ,eAAergB,MAAOvK,GAG3BoR,EAETA,EAAUgd,GAId,OADA7K,EAAejX,IAAItM,EAAMoR,GAClBA,EAIT,aAAapR,GACX,IAAI0P,EAAWtQ,KAAKmkB,eACpB,OAAI7T,EAASxD,IAAIlM,GAAc2J,OAAO+F,EAASpP,IAAIN,IAC5C,KAIT,cAAcA,GACZ,IAAI0P,EAAWtQ,KAAKmkB,eACpB,GAAI7T,EAASxD,IAAIlM,GAAO,OAAO2J,OAAO+F,EAASpP,IAAIN,IACnD,MAAM,IAAIgI,MAAM,kBAIV,kBAENmW,EAEAC,GAEA,IAAIkF,EAAclkB,KAAKkkB,YACvB,OAAOA,EAAYpX,IAAIiS,GAChBxU,OAAO2Z,EAAYhjB,IAAI6d,IACvBmF,EAAYpX,IAAIkS,GAChBzU,OAAO2Z,EAAYhjB,IAAI8d,IACvB,KAID,cAEN7G,EAEA4G,EAEAC,EAEA0I,GAEA,OAAG,CACD,IAAIqB,EAAc/oB,KAAKgpB,kBAAkBjK,EAAaC,GACtD,IAAK+J,EAAa,OAAO,KAGzB,IAAI/W,EAAU+W,EAAYqG,aAAajX,GACvC,GAAInG,EAAS,OAAOA,EAGpB,GAAI0V,EAAc5a,IAAIic,GAAc,CAClC,IAAIsG,EAAoB9kB,OAAOmd,EAAcxmB,IAAI6nB,IACjD,GAAIsG,EAAkBviB,IAAIqL,GAAc,CACtC,IAAIuR,EAAenf,OAAO8kB,EAAkBnuB,IAAIiX,IAC5CmX,EAA0B5F,EAAa3K,YAC3C,GAAIuQ,EAAyB,CAC3BnX,EAAcuR,EAAa7K,gBAAgB7S,KAC3C+S,EAAcuQ,EACdtQ,EAAiBzU,OAAOmf,EAAa1K,gBACrC,SAGA,GADAhN,EAAU+W,EAAYa,aAAaF,EAAa7K,gBAAgB7S,MAC5DgG,EAAS,OAAOA,GAI1B,MAEF,OAAO,KAID,gBAENyD,EAEA8Z,GAEA,IAAI5b,EAAQ2L,EAAevD,KAC3B,GAAItG,EACF,IAAK,IAAIpV,EAAI,EAAGqb,EAAIjG,EAAWvJ,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACjD,IAAIqe,EAAYjJ,EAAWpV,GACvBoN,EAAO,EAAAH,cAAcyC,SAAS2O,EAAU9d,MACxCob,EAAOsD,EAAekQ,SAAS/hB,GAC/BuO,IACEA,GAAQsD,EAAenD,QACnBoT,EAAgBvT,GAAU0C,EAAUvT,MAAMO,OAAO+jB,UAMrD9b,GAASqI,EALThc,KAAKkpB,MACH,EAAAre,eAAe6kB,8BACfhR,EAAUvT,MAAOuT,EAAU9d,KAAKuK,MAAMM,YAK/B8jB,EAAgBvT,EAKlBrI,EAAQqI,EACjBhc,KAAKkpB,MACH,EAAAre,eAAe8kB,oBACfjR,EAAUvT,OAGZwI,GAASqI,EAVThc,KAAKkpB,MACH,EAAAre,eAAe6kB,8BACfhR,EAAUvT,MAAOuT,EAAU9d,KAAKuK,MAAMM,aAahD,OAAOkI,EAID,gBAENnC,EAEAwU,EAEA4B,EAEAC,GAEA,IAAIjnB,EAAO4Q,EAAY5Q,KAAKoL,KACxBgG,EAAU,IAAI4d,EAChBhvB,EACAolB,EACAxU,EACAxR,KAAK6vB,gBAAgBre,EAAYiE,WAC/B6J,EAAejD,OACfiD,EAAe7C,OACf6C,EAAe5C,YAGnB,IAAKsJ,EAAOU,IAAI9lB,EAAMoR,GAAU,OAAO,KAEvC,IAAIuD,EAAkB/D,EAAY+D,gBAClC,GAAIA,EAAiB,CACnB,IAAIua,EAAqBva,EAAgBrJ,OAEzC,GAAI8F,EAAQsZ,aAAahM,EAAe5C,WAClCoT,GACF9vB,KAAKkpB,MACH,EAAAre,eAAeklB,8CACf,EAAAzS,MAAM5Q,KACJ8E,EAAY5Q,KAAKuK,MACjBoK,EAAgBua,EAAqB,GAAG3kB,aAIzC,GAAI2kB,EAAoB,CAE7B,IAAK,IAAIzvB,EAAI,EAAGA,EAAIyvB,IAAsBzvB,EACxCL,KAAKgwB,QACH,EAAAnlB,eAAeolB,gBACf1a,EAAgBlV,GAAG8K,OAGvB0c,EAAiBpb,KAAKuF,IAItBR,EAAYvC,aAAa2Y,EAAcnb,KAAKuF,GAGhD,IAAIke,EAAqB1e,EAAYgE,QACrC,IAAK,IAAInV,EAAI,EAAGqb,EAAIwU,EAAmBhkB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACzD,IAAI8vB,EAAoBD,EAAmB7vB,GAC3C,OAAQ8vB,EAAkB1iB,MACxB,KAAK,EAAAJ,SAASoL,iBACZzY,KAAKowB,gBAAkCD,EAAmBne,GAC1D,MAEF,KAAK,EAAA3E,SAASsM,kBACRwW,EAAkBE,MAAM,EAAAhuB,YAAYiuB,IAAM,EAAAjuB,YAAYkuB,KACxDvwB,KAAKwwB,mBAAsCL,EAAmBne,GAE9DhS,KAAKywB,iBAAoCN,EAAmBne,GAE9D,MAEF,KAAK,EAAA3E,SAASoM,0BAA2B,MACzC,QAASlP,QAAO,IAGpB,OAAOyH,EAID,gBAENR,EAEAwU,GAEA,IAEIhU,EAFApR,EAAO4Q,EAAY5Q,KAAKoL,KACxByJ,EAAajE,EAAYiE,WAEzB8Z,EAAgCjQ,EAAe3C,OAInD,GAHIqJ,EAAOwI,GAAG,EAAAnsB,YAAYquB,WACxBnB,GAAiBjQ,EAAelD,UAE9B5K,EAAYgd,GAAG,EAAAnsB,YAAYsuB,SAY7B,GAXApmB,OAAOyb,EAAOvY,MAAQ4R,EAAYuR,qBAClCrB,GAAiBjQ,EAAe/C,KAC5B/K,EAAYgd,GAAG,EAAAnsB,YAAYwuB,YAC7BtB,GAAiBjQ,EAAehD,QAElCtK,EAAU,IAAI0c,EACZ9tB,EACAolB,EACAhmB,KAAK6vB,gBAAgBpa,EAAY8Z,GACjC/d,IAEGwU,EAAOU,IAAI9lB,EAAMoR,GAAU,YAShC,GAPAzH,QAAQiH,EAAY6e,MAAM,EAAAhuB,YAAYyuB,SAAW,EAAAzuB,YAAYiuB,IAAM,EAAAjuB,YAAYkuB,MAC/Eve,EAAU,IAAI+e,EACZnwB,EACAolB,EACAxU,EACAxR,KAAK6vB,gBAAgBpa,EAAY8Z,KAE9BvJ,EAAOgL,YAAYpwB,EAAMoR,GAAU,OAKpC,iBAENR,EAEAwU,GAEA,IAAIplB,EAAO4Q,EAAY5Q,KAAKoL,KACxBilB,EAAWzf,EAAYgd,GAAG,EAAAnsB,YAAYsuB,QACtCpB,EAAgBjQ,EAAehD,OAASgD,EAAe3C,OACtDnL,EAAYgd,GAAG,EAAAnsB,YAAYwkB,WAC9B0I,GAAiBjQ,EAAezC,gBACfyC,EAAexC,gBACfwC,EAAevC,kBAE9BiJ,EAAOwI,GAAG,EAAAnsB,YAAYquB,WACxBnB,GAAiBjQ,EAAelD,UAElC,IAAIpK,EAAU,IAAImU,EAChBvlB,EACAolB,EACAxU,EACAxR,KAAK6vB,gBAAgBre,EAAYiE,WAAY8Z,IAE/C,GAAI0B,GAEF,GADA1mB,OAAOiH,EAAY5Q,KAAK6M,MAAQ,EAAAJ,SAAS0E,cACpCiU,EAAOU,IAAI9lB,EAAMoR,GAAU,YAEhC,IAAKgU,EAAOgL,YAAYpwB,EAAMoR,GAAU,OAE1ChS,KAAKkxB,uBAAuB1f,EAAYiE,WAAYzD,EAASgU,GAIvD,uBAENvQ,EAEAxT,EAEAkvB,GAEA,GAAI1b,EACF,IAAK,IAAIpV,EAAI,EAAGqb,EAAIjG,EAAWvJ,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACjD,IAAIqe,EAA2BjJ,EAAWpV,GAC1C,OAAQqe,EAAU5O,eAChB,KAAK,EAAAxC,cAAckP,SACnB,KAAK,EAAAlP,cAAcuP,gBACnB,KAAK,EAAAvP,cAAcwP,gBACnB,KAAK,EAAAxP,cAAcyP,iBAAkB,CACnC,IAAIrN,EAAOgP,EAAU7O,UACjBuhB,EAAU1hB,EAAOA,EAAKxD,OAAS,EACnC,GAAe,GAAXklB,EAAc,CAChB,IAAIC,EAA0B3S,EAAU7O,UAAW,GACnD,GACEwhB,EAAS5jB,MAAQ,EAAAJ,SAASK,SACN2jB,EAAU7gB,aAAe,EAAAjD,YAAY8G,OACzD,CACA,IAAIrI,EAAiCqlB,EAAU/vB,MAC3CmM,EAAO2R,EAAaG,cAAcb,EAAU5O,cAAe9D,GAC/D,GAAIyB,GAAQ2R,EAAamC,QACvBvhB,KAAKkpB,MACH,EAAAre,eAAeymB,2BACfD,EAASlmB,MAAOa,OAEb,CACL,IAAIulB,EAAYJ,EAAeK,mBAC3BD,EAAUzkB,IAAIW,GAChBzN,KAAKkpB,MACH,EAAAre,eAAe4mB,kCACfJ,EAASlmB,QAGXlJ,EAAUyvB,aAAejkB,EACzB8jB,EAAUrkB,IAAIO,EAAMxL,UAIxBjC,KAAKkpB,MACH,EAAAre,eAAe8mB,wBACfN,EAASlmB,YAIbnL,KAAKkpB,MACH,EAAAre,eAAe+mB,+BACflT,EAAUvT,MAAO,IAAKimB,EAAQ3lB,eAUpC,eAEN+F,EAEAwU,GAEA,IAAIplB,EAAO4Q,EAAY5Q,KAAKoL,KAC5B,GAAIwF,EAAYgd,GAAG,EAAAnsB,YAAYsuB,QAAS,CACtC,IAAIkB,EAAgB7L,EAAOxQ,QAC3B,GAAsB,OAAlBqc,IAA0BA,EAAc/kB,IAAIlM,GAGzC,CACL,IAAIoR,EAAU,IAAI8f,EAAkBlxB,EAAMolB,EAAQxU,GAClD,OAAKwU,EAAOU,IAAI9lB,EAAMoR,GACfA,EADgC,KALc,CACrD,IAAIA,EAAUzH,OAAOsnB,EAAc3wB,IAAIN,IACvC,GAAIoR,EAAQvE,MAAQ4R,EAAYwO,mBAAoB,OAA0B7b,OAM3E,CACL,IAAI6f,EAAgB7L,EAAO2H,gBAC3B,GAAsB,OAAlBkE,IAA0BA,EAAc/kB,IAAIlM,GAGzC,CACL,IAAIoR,EAAU,IAAI8f,EAAkBlxB,EAAMolB,EAAQxU,GAClD,OAAKwU,EAAOgL,YAAYpwB,EAAMoR,GACvBA,EADwC,KALM,CACrD,IAAIA,EAAUzH,OAAOsnB,EAAc3wB,IAAIN,IACvC,GAAIoR,EAAQvE,MAAQ4R,EAAYwO,mBAAoB,OAA0B7b,GAWlF,OAJAhS,KAAKkpB,MACH,EAAAre,eAAeknB,qBACfvgB,EAAY5Q,KAAKuK,MAAOvK,GAEnB,KAID,mBAEN4Q,EAEAwU,GAEA,IAAIhkB,EAAWhC,KAAKgyB,eAAexgB,EAAawU,GAChD,GAAKhkB,EAAL,CACA,IAAIpB,EAAO4Q,EAAY5Q,KAAKoL,KACxBimB,EAAWzgB,EAAYgd,GAAG,EAAAnsB,YAAYiuB,KAC1C,GAAI2B,GACF,GAAIjwB,EAAS8rB,gBAKX,YAJA9tB,KAAKkpB,MACH,EAAAre,eAAeknB,qBACfvgB,EAAY5Q,KAAKuK,MAAOvK,QAK5B,GAAIoB,EAAS+rB,gBAKX,YAJA/tB,KAAKkpB,MACH,EAAAre,eAAeknB,qBACfvgB,EAAY5Q,KAAKuK,MAAOvK,GAK9B,IAAIoR,EAAU,IAAImU,GACf8L,EAAW,EAAAzvB,cAAgB,EAAAC,eAAiB7B,EAC7CoB,EACAwP,EACAxR,KAAK6vB,gBAAgBre,EAAYiE,WAC/B6J,EAAehD,OAASgD,EAAe3C,SAGvCsV,EACFjwB,EAAS8rB,gBAAkB9b,EAE3BhQ,EAAS+rB,gBAAkB/b,GAKvB,eAENR,EAEAwU,GAEA,IAAIplB,EAAO4Q,EAAY5Q,KAAKoL,KACxBgG,EAAU,IAAIkgB,EAChBtxB,EACAolB,EACAxU,EACAxR,KAAK6vB,gBAAgBre,EAAYiE,WAC/B6J,EAAejD,OACfiD,EAAehD,OACfgD,EAAe/C,OAGnB,IAAKyJ,EAAOU,IAAI9lB,EAAMoR,GAAU,OAAO,KACvC,IAAImB,EAAS3B,EAAY2B,OACzB,IAAK,IAAI9S,EAAI,EAAGqb,EAAIvI,EAAOjH,OAAQ7L,EAAIqb,IAAKrb,EAC1CL,KAAKmyB,oBAAoBhf,EAAO9S,GAAI2R,GAEtC,OAAOA,EAID,oBAENR,EAEAwU,GAEA,IAAIplB,EAAO4Q,EAAY5Q,KAAKoL,KACxBgG,EAAU,IAAIogB,EAChBxxB,EACAolB,EACAxU,EACAxR,KAAK6vB,gBAAgBre,EAAYiE,WAC/B6J,EAAevD,OAGdiK,EAAOU,IAAI9lB,EAAMoR,GAIhB,kBAEN8D,EAEAkQ,EAEA0B,EAEAC,GAEA,IAAInS,EAAUM,EAAUN,QACxB,GAAIA,EACF,IAAK,IAAInV,EAAI,EAAGqb,EAAIlG,EAAQtJ,OAAQ7L,EAAIqb,IAAKrb,EAC3CL,KAAKqyB,iBAAiB7c,EAAQnV,GAAI2lB,EAAQlQ,EAAUe,aAAc6Q,OAE/D,CACL,IAAI4K,EACA3K,EAAkB7a,IAAIkZ,GAASsM,EAAS/nB,OAAOod,EAAkBzmB,IAAI8kB,IACpE2B,EAAkBza,IAAI8Y,EAAQsM,EAAS,IAC5C,IAAIvT,EAAcjJ,EAAUe,aAC5Byb,EAAO7lB,KAAK,IAAIyS,EACdH,EACAA,EAAYN,SAAS,EAAA1b,cACjBgc,EAAYvS,UAAU,EAAGuS,EAAY7S,OAAS,EAAAnJ,aAAamJ,QAC3D6S,EAAc,EAAAhc,aAClBwH,OAAOuL,EAAUQ,SAMf,iBAENsX,EAEAhP,EAEAG,EAEA2I,GAEA,IAAIpQ,EAAYsW,EAAOtW,UAAUtL,KAC7BmM,EAAcyV,EAAOrW,aAAavL,KAGlCgG,EAAU4M,EAAUwQ,aAAajX,GACrC,GAAInG,EACFhS,KAAKkpB,MACH,EAAAre,eAAe0nB,4DACf3E,EAAOrW,aAAapM,MAAOgN,QAK/B,GAAoB,OAAhB4G,EAGF,GAAI/M,EAAU4M,EAAUgL,aAAatS,GACnCsH,EAAU+K,aAAaxR,EAAanG,OAG/B,CACL,IAAIsgB,EACA5K,EAAc5a,IAAI8R,GAAY0T,EAAS/nB,OAAOmd,EAAcxmB,IAAI0d,IAC/D8I,EAAcxa,IAAI0R,EAAW0T,EAAS,IAAI1qB,KAC/C0qB,EAAOplB,IAAIiL,EAAa,IAAI8G,EAC1B2O,EAAOtW,UACPsW,EAAOrW,aACP,KAAM,WAKL,CACL,IAAI+a,EACA5K,EAAc5a,IAAI8R,GAAY0T,EAAS/nB,OAAOmd,EAAcxmB,IAAI0d,IAC/D8I,EAAcxa,IAAI0R,EAAW0T,EAAS,IAAI1qB,KAC/C0qB,EAAOplB,IAAIiL,EAAa,IAAI8G,EAC1B2O,EAAOtW,UACPsW,EAAOrW,aACPwH,EACAA,EAAYN,SAAS,EAAA1b,cACjBgc,EAAYvS,UAAU,EAAGuS,EAAY7S,OAAS,EAAAnJ,aAAamJ,QAC3D6S,EAAc,EAAAhc,gBAKhB,wBAEN+S,EAEAkQ,EAEA4B,EAEAC,GAEA,IAAIrW,EAAcsE,EAAUtE,YACxBQ,EAAkC,KACtC,OAAQR,EAAY/D,MAClB,KAAK,EAAAJ,SAAS8I,gBACZnE,EAAUhS,KAAKqoB,eAAgC7W,EAAawU,GAC5D,MAEF,KAAK,EAAA3Y,SAASgM,oBACZrH,EAAUhS,KAAKsoB,mBAAwC9W,EAAawU,GACpE,MAEF,KAAK,EAAA3Y,SAASsI,iBACZ3D,EAAUhS,KAAKooB,gBAAkC5W,EAAawU,EAAQ4B,EAAeC,GACrF,MAEF,KAAK,EAAAxa,SAASkL,qBACZvG,EAAUhS,KAAKuoB,oBAA0C/W,EAAawU,GACtE,MAEF,KAAK,EAAA3Y,SAASwM,qBACZ7H,EAAUhS,KAAKwoB,oBAA0ChX,EAAawU,EAAQ4B,EAAeC,GAC7F,MAEF,QAAStd,QAAO,GAElB,GAAIyH,EAAS,CACX,IAAItS,EAAUsmB,EAAOtmB,QACrB,GAAKA,GAEH,GAAIA,EAAQoN,IAAI,WAAY,CAC1B,IAAIiiB,EAAWxkB,OAAO7K,EAAQwB,IAAI,YAOlC,YANAlB,KAAKkvB,aACH,EAAArkB,eAAeskB,uBACf3d,EAAY5Q,KAAKuK,MACjB4jB,EAASvd,YAAY5Q,KAAKuK,MAC1B,iBARQ6a,EAAOtmB,QAAUA,EAAU,IAAIkI,IAa7ClI,EAAQwN,IAAI,UAAW8E,IAKnB,kBAEN8D,EAEAkQ,EAEAyB,EAEAC,GAEA,IAAIzP,EAAenC,EAAUmC,aAC7B,GAAIA,EACF,IAAK,IAAI5X,EAAI,EAAGqb,EAAIzD,EAAa/L,OAAQ7L,EAAIqb,IAAKrb,EAChDL,KAAKwyB,iBACHva,EAAa5X,GACb2lB,EACAlQ,EAAUe,aACV4Q,EACAC,OAGC,CACL,IAAIxP,EAAgBpC,EAAUoC,cAC1BA,GACFuP,EAAchb,KAAK,IAAIkS,EACrBqH,EACA9N,EACA,KACApC,EAAUe,aACVf,EAAUe,aAAe,EAAA9T,gBASzB,iBAENyO,EAEAwU,EAEAjH,EAEA0I,EAEAC,GAEA,IAAI1I,EAAiBD,EAAYN,SAAS,EAAA1b,cACtCgc,EAAYvS,UAAU,EAAGuS,EAAY7S,OAAS,EAAAnJ,aAAamJ,QAC3D6S,EAAc,EAAAhc,aAGdiP,EAAUhS,KAAKqpB,cAAc7X,EAAY2G,YAAYnM,KAAM+S,EAAaC,EAAgB0I,GACxF1V,EACFgU,EAAOU,IAAIlV,EAAY5Q,KAAKoL,KAAMgG,EAASR,EAAY5Q,MAKzD6mB,EAAchb,KAAK,IAAIkS,EACrBqH,EACAxU,EAAY5Q,KACZ4Q,EAAY2G,YACZ4G,EACAC,IAKI,mBAENxN,EAEAwU,GAEA,IAAIplB,EAAO4Q,EAAY5Q,KAAKoL,KACxBymB,EAAkBnT,EAAe3C,OAAS2C,EAAenD,QACzD3K,EAAYgd,GAAG,EAAAnsB,YAAYquB,SAC7B+B,GAAmBnT,EAAelD,UAElCqW,GAAmBnT,EAAehD,OAC9B9K,EAAYrG,MAAMO,OAAO+jB,YAC3BgD,GAAmBnT,EAAe/C,OAGjC/K,EAAYgd,GAAG,EAAAnsB,YAAYqwB,WAC1B1M,EAAOvY,MAAQ4R,EAAYiL,kBAC7BmI,GAAmBnT,EAAejD,QAGtC,IAAIrK,EAAU,IAAImU,EAChBvlB,EACAolB,EACAxU,EACAxR,KAAK6vB,gBAAgBre,EAAYiE,WAAYgd,IAE/C,OAAKzM,EAAOU,IAAI9lB,EAAMoR,GACfA,EADgC,KAKjC,oBAENR,EAEAwU,GAEA,IAAIplB,EAAO4Q,EAAY5Q,KAAKoL,KACxBgG,EAAU,IAAI2gB,EAChB/xB,EACAolB,EACAxU,EACAxR,KAAK6vB,gBAAgBre,EAAYiE,WAC/B6J,EAAejD,SAGnB,IAAK2J,EAAOU,IAAI9lB,EAAMoR,GAAU,OAAO,KACvC,IAAIke,EAAqB1e,EAAYgE,QACrC,IAAK,IAAInV,EAAI,EAAGqb,EAAIwU,EAAmBhkB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACzD,IAAI8vB,EAAoBD,EAAmB7vB,GAC3C,OAAQ8vB,EAAkB1iB,MACxB,KAAK,EAAAJ,SAASoL,iBACZzY,KAAKowB,gBAAkCD,EAAmBne,GAC1D,MAEF,KAAK,EAAA3E,SAASsM,kBACRwW,EAAkBE,MAAM,EAAAhuB,YAAYiuB,IAAM,EAAAjuB,YAAYkuB,KACxDvwB,KAAKwwB,mBAAsCL,EAAmBne,GAE9DhS,KAAKywB,iBAAoCN,EAAmBne,GAE9D,MAEF,QAASzH,QAAO,IAGpB,OAAOyH,EAID,oBAENR,EAEAwU,EAEA4B,EAEAC,GAEA,IAAIjnB,EAAO4Q,EAAY5Q,KAAKoL,KACxB4mB,EAAW,IAAIC,EACjBjyB,EACAolB,EACAxU,EACAxR,KAAK6vB,gBAAgBre,EAAYiE,WAAY6J,EAAejD,SAE9D,IAAK2J,EAAOU,IAAI9lB,EAAMgyB,GAAW,OAAO,KACxC,IAAI5gB,EAAUzH,OAAOyb,EAAO4D,aAAahpB,IACrC4U,EAAUhE,EAAYgE,QAC1B,IAAK,IAAInV,EAAI,EAAGqb,EAAIlG,EAAQtJ,OAAQ7L,EAAIqb,IAAKrb,EAAG,CAC9C,IAAIutB,EAASpY,EAAQnV,GACrB,OAAQutB,EAAOngB,MACb,KAAK,EAAAJ,SAASsI,iBACZ3V,KAAKooB,gBAAkCwF,EAAQgF,EAAUhL,EAAeC,GACxE,MAEF,KAAK,EAAAxa,SAAS8I,gBACZnW,KAAKqoB,eAAgCuF,EAAQgF,GAC7C,MAEF,KAAK,EAAAvlB,SAASgM,oBACZrZ,KAAKsoB,mBAAwCsF,EAAQgF,GACrD,MAEF,KAAK,EAAAvlB,SAASkL,qBACZvY,KAAKuoB,oBAA0CqF,EAAQgF,GACvD,MAEF,KAAK,EAAAvlB,SAASwM,qBACZ7Z,KAAKwoB,oBAA0CoF,EAAQgF,EAAUhL,EAAeC,GAChF,MAEF,KAAK,EAAAxa,SAASyN,gBACZ9a,KAAKyoB,yBAA0CmF,EAAQgF,GACvD,MAEF,KAAK,EAAAvlB,SAAS2N,SACZhb,KAAKmoB,oBAAuCyF,EAAQgF,GACpD,MAEF,QAASroB,QAAO,IAIpB,OADIqoB,GAAY5gB,GAAS8gB,EAAYF,EAAU5gB,GACxCA,EAID,yBAENR,EAEAwU,GAEA,IAAIplB,EAAO4Q,EAAY5Q,KAAKoL,KACxBgG,EAAU,IAAI2U,EAChB/lB,EACAolB,EACAxU,EACAxR,KAAK6vB,gBAAgBre,EAAYiE,WAAY6J,EAAevD,OAE9DiK,EAAOU,IAAI9lB,EAAMoR,GAIX,oBAEN8D,EAEAkQ,GAEA,IAAI/N,EAAenC,EAAUmC,aAC7B,IAAK,IAAI5X,EAAI,EAAGqb,EAAIzD,EAAa/L,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACnD,IAAImR,EAAcyG,EAAa5X,GAC3BO,EAAO4Q,EAAY5Q,KAAKoL,KACxBujB,EAAgBjQ,EAAejD,OAASiD,EAAe/C,KACvD/K,EAAYgd,GAAG,EAAAnsB,YAAY0wB,WAC7BxD,GAAiBjQ,EAAelD,UAE9B5K,EAAYgd,GAAG,EAAAnsB,YAAYusB,SAC7BW,GAAiBjQ,EAAehD,QAElC,IAAItK,EAAU,IAAI0c,EAChB9tB,EACAolB,EACAhmB,KAAK6vB,gBAAgBre,EAAYiE,WAAY8Z,GAC7C/d,GAEGwU,EAAOU,IAAI9lB,EAAMoR,IAgC1B,oBACE,IAAIghB,EAAU,IAAIrrB,IAElB,IAAK,IAAIqlB,EAAUC,WAAWjtB,KAAKukB,gBAAiBlkB,EAAI,EAAGqb,EAAIsR,EAAQ9gB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACzF,IAAI4yB,EAAWnK,UAAUkE,EAAQ3sB,IAC5B4yB,EAASC,WAAWF,EAAQtM,IAAIuM,GAEvC,OAAOD,GAppDX,YAypDA,SAAY3T,GAEV,uBAEA,qBAEA,mBAEA,6BAEA,+CAEA,2BAEA,yCAEA,yCAEA,qBAEA,iDAEA,8BAEA,0CAEA,sBAEA,gDAEA,4BAEA,8BAEA,oBAEA,wCAEA,wCAtCF,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KA0CvB,SAAYC,GAEV,mBAEA,uBAEA,yCAEA,yCAEA,2CAEA,8BAEA,wBAEA,wBAEA,6BAEA,2BAEA,qBAEA,0BAxBF,CAAYA,EAAA,EAAAA,iBAAA,EAAAA,eAAc,KA2B1B,SAAiBA,GAGC,EAAAkQ,SAAhB,SAAyB/hB,GACvB,OAAQA,GACN,KAAK,EAAAH,cAAc+O,OAAQ,OAAOiD,EAAejD,OACjD,KAAK,EAAA/O,cAAckP,SACnB,KAAK,EAAAlP,cAAcuP,gBAAiB,OAAOyC,EAAezC,gBAC1D,KAAK,EAAAvP,cAAcwP,gBAAiB,OAAOwC,EAAexC,gBAC1D,KAAK,EAAAxP,cAAcyP,iBAAkB,OAAOuC,EAAevC,iBAC3D,KAAK,EAAAzP,cAAcoP,UAAW,OAAO4C,EAAe5C,UACpD,KAAK,EAAApP,cAAcmP,OAAQ,OAAO6C,EAAe7C,OACjD,KAAK,EAAAnP,cAAcgP,OAAQ,OAAOgD,EAAehD,OACjD,KAAK,EAAAhP,cAAc8O,SAAU,OAAOkD,EAAelD,SACnD,KAAK,EAAA9O,cAAc6O,QAAS,OAAOmD,EAAenD,QAClD,KAAK,EAAA7O,cAAciP,KAAM,OAAO+C,EAAe/C,KAC/C,KAAK,EAAAjP,cAAcqP,OAAQ,OAAO2C,EAAe3C,OACjD,QAAS,OAAO2C,EAAevD,OAjBrC,CAAiBuD,EAAA,EAAAA,iBAAA,EAAAA,eAAc,KAuB/B,MAAsB6T,EAcpB,YAES1lB,EAEA7M,EAEAqkB,EAEAmO,EAEPpN,GARO,KAAAvY,OAEA,KAAA7M,OAEA,KAAAqkB,eAEA,KAAAmO,UAjBT,KAAAzf,MAAqB,EAAAtR,YAAY0Z,KAEjC,KAAAkK,eAAiC3G,EAAevD,KAEhD,KAAAvG,QAA8C,KAE9C,KAAA6d,WAAoC,KAelCrzB,KAAKozB,QAAUA,EACfpzB,KAAKY,KAAOA,EACZZ,KAAKilB,aAAeA,EAChBe,EACFhmB,KAAKgmB,OAASA,GAEdzb,OAAOvK,KAAKyN,MAAQ4R,EAAYiU,MAChCtzB,KAAKgmB,OAAShmB,MAKlB,WAEE,IADA,IAAIuzB,EAAmBvzB,OAGrB,IADAuzB,EAAUA,EAAQvN,QACNvY,MAAQ4R,EAAYiU,KAAM,OAAaC,EAKvD,GAAGvX,GAA2B,OAAQhc,KAAK2T,MAAQqI,IAASA,EAE5D,MAAMrI,GAA4B,OAA+B,IAAvB3T,KAAK2T,MAAQA,GAEvD,IAAIqI,GAA2Bhc,KAAK2T,OAASqI,EAE7C,MAAMA,GAA0Bhc,KAAK2T,QAAUqI,EAE/C,aAAaA,GAA8B,OAAQhc,KAAKimB,eAAiBjK,IAASA,EAGlF,aAAapb,GACX,IAAI4U,EAAUxV,KAAKwV,QACnB,OAAgB,OAAZA,GAAoBA,EAAQ1I,IAAIlM,GAAc2J,OAAOiL,EAAQtU,IAAIN,IAC9D,KAOT,IAAIA,EAAcoR,EAA0BwhB,EAAuD,MACjG,IAAIC,EAAsBzhB,EAAQR,YAC9BgE,EAAUxV,KAAKwV,QACnB,GAAKA,GACA,GAAIA,EAAQ1I,IAAIlM,GAAO,CAC1B,IAAImuB,EAAWxkB,OAAOiL,EAAQtU,IAAIN,IAClC,GAAImuB,EAAS/I,SAAWhmB,UAEjB,CACL,IAAIgvB,EAASC,EAASF,EAAU/c,GAChC,IAAIgd,EAEG,CACL,IAAI0E,EAAqBF,GAErBxhB,EAAQwZ,eAcZ,OAbIzB,EAAkBgF,EAASthB,MAC7BzN,KAAKozB,QAAQlE,aACX,EAAArkB,eAAeskB,uBACfuE,EAAmBvoB,MACD4jB,EAAUvD,eAAergB,MAC3CuoB,EAAmB1nB,MAGrBhM,KAAKozB,QAAQlK,MACX,EAAAre,eAAeskB,uBACfuE,EAAmBvoB,MAAOuoB,EAAmB1nB,OAG1C,EAlBPgG,EAAUgd,SARFhvB,KAAKwV,QAAUA,EAAU,IAAI5N,IA8B3C4N,EAAQtI,IAAItM,EAAMoR,GAClB,IAAIohB,EAAUpzB,KAAKozB,QAMnB,OALIphB,EAAQvE,MAAQ4R,EAAYiO,oBAA2Ctb,EAAS2hB,UAElFP,EAAQjP,eAAejX,IAAI8E,EAAQiT,aAAcjT,GACjDohB,EAAQhP,sBAAsBlX,IAAIumB,EAAqBzhB,KAElD,EAIT,WACE,OAAOhS,KAAKilB,aAAe,UAAYjlB,KAAKyN,KAAKhC,YAjHrD,YAsHA,IAAImoB,EAAmB,IAAIjsB,IAG3B,SAAgBoiB,EAAkBtc,GAChC,OAAOmmB,EAAiB9mB,IAAIW,GAD9B,sBAKA,MAAsBomB,UAAwBV,EAG5C,YAEE1lB,EAEA7M,EAEAqkB,EAEAmO,EAEApN,EAEOxU,GAEPkM,MAAMjQ,EAAM7M,EAAMqkB,EAAcmO,EAASpN,GAFlC,KAAAxU,cAGPoiB,EAAiBlN,IAAIjZ,GAOrBzN,KAAKwR,YAAcA,EACnBxR,KAAK2T,MAAQnC,EAAYmC,MAI3B,0BACE,OAAO3T,KAAKwR,YAAYrG,MAAMO,OAAO+jB,UAIvC,qBACE,OAAOzvB,KAAKwR,YAAY5Q,KAI1B,qBACE,OAAOZ,KAAKwR,YAAYiE,YAzC5B,oBA8CA,IAAIqe,EAAgB,IAAInsB,IAGxB,0BAA+B8F,GAC7B,OAAOqmB,EAAchnB,IAAIW,IAI3B,MAAsBsmB,UAAqBF,EAKzC,YAEEpmB,EAEA7M,EAEAqkB,EAEAmO,EAEApN,EAEAxU,GAEAkM,MAAMjQ,EAAM7M,EAAMqkB,EAAcmO,EAASpN,EAAQxU,GAhBnD,KAAAnC,KAAa,EAAAiX,KAAKG,KAiBhBqN,EAAcpN,IAAIjZ,GAIpB,QAAQ4B,GACN9E,QAAQvK,KAAKwuB,GAAG,EAAAnsB,YAAY2xB,WAC5Bh0B,KAAKqP,KAAOA,EACZrP,KAAKkN,IAAI,EAAA7K,YAAY2xB,WA3BzB,iBAgCA,MAAahP,UAAamO,EAUxB,YAEEC,EAEO1nB,GAEPgS,MACE2B,EAAYiU,KACZ5nB,EAAOC,eACPD,EAAOmL,aACPuc,EACA,MAPK,KAAA1nB,SAXT,KAAAhM,QAA8C,KAE9C,KAAA+tB,YAA6B,KAkB3BztB,KAAK0L,OAASA,EACdnB,QAAQ6oB,EAAQlP,YAAYpX,IAAI9M,KAAKilB,eACrCmO,EAAQlP,YAAYhX,IAAIlN,KAAKilB,aAAcjlB,MAC3C,IAAIi0B,EAAgBj0B,KAAKozB,QAAQc,mBAC/B,SAAWl0B,KAAKilB,aAChB,IAAI,EAAAkP,UAAUf,EAAS,KAAM,EAAA9M,KAAKG,MAClCzmB,MAEFi0B,EAAchP,aAAegP,EAAcrzB,KAC3CZ,KAAKi0B,cAAgBA,EAIvB,IAAIrzB,EAAcoR,EAA0BwhB,EAAuD,MAIjG,OAHIxhB,EAAQsZ,aAAahM,EAAejD,UACtCrK,EAAUhS,KAAKozB,QAAQgB,aAAaxzB,EAAMoR,MAEvC0L,MAAMgJ,IAAI9lB,EAAMoR,EAASwhB,MAC9BxhB,EAAUzH,OAAOvK,KAAK4pB,aAAahpB,KACvB4tB,GAAG,EAAAnsB,YAAYoU,UAAY+c,GACrCxzB,KAAK2pB,aACH3X,EAAQpR,KACRoR,IAGG,GAIT,aAAapR,GACX,IAAIoR,EAAU0L,MAAMkM,aAAahpB,GACjC,GAAIoR,EAAS,OAAOA,EACpB,IAAIyb,EAAcztB,KAAKytB,YACvB,GAAIA,EACF,IAAK,IAAIptB,EAAI,EAAGqb,EAAI+R,EAAYvhB,OAAQ7L,EAAIqb,IAAKrb,EAC/C,GAAI2R,EAAUyb,EAAYptB,GAAGupB,aAAahpB,GAAO,OAAOoR,EAG5D,OAAO,KAIT,OAAOpR,GACL,IAAIoR,EAAUhS,KAAK4pB,aAAahpB,GAChC,OAAIoR,GACGhS,KAAKozB,QAAQtJ,aAAalpB,GAInC,aAAaA,EAAcoR,GACzB,IAAItS,EAAUM,KAAKN,QACdA,IAASM,KAAKN,QAAUA,EAAU,IAAIkI,KAC3ClI,EAAQwN,IAAItM,EAAMoR,GACdhS,KAAK0L,OAAOoS,YAAc,EAAAtQ,WAAW2Q,eAAene,KAAKozB,QAAQgB,aAAaxzB,EAAMoR,GAI1F,iBAAiB8V,GACf,IAAI2F,EAAcztB,KAAKytB,YACvB,GAAKA,GACA,GAAIA,EAAYxgB,SAAS6a,GAAO,YADnB9nB,KAAKytB,YAAcA,EAAc,GAEnDA,EAAYhhB,KAAKqb,GAInB,aAAalnB,GACX,IAAIlB,EAAUM,KAAKN,QACnB,GAAgB,OAAZA,GAAoBA,EAAQoN,IAAIlM,GAAO,OAAO2J,OAAO7K,EAAQwB,IAAIN,IACrE,IAAI6sB,EAAcztB,KAAKytB,YACvB,GAAIA,EACF,IAAK,IAAIptB,EAAI,EAAGqb,EAAI+R,EAAYvhB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CAClD,IAAI2R,EAAUyb,EAAYptB,GAAG+uB,aAAaxuB,GAC1C,GAAIoR,EAAS,OAAOA,EAGxB,OAAO,KAIT,oBAAoBpR,EAAcolB,EAAiBnH,GACjD,IAAIrN,EAAcxR,KAAKozB,QAAQiB,+BAA+BzzB,GAC9D4Q,EAAY5Q,KAAOie,EACnB,IAAInd,EAAK,IAAImxB,EAAUjyB,EAAMolB,EAAQxU,GAGrC,OAFA9P,EAAGwL,IAAI,EAAA7K,YAAYiyB,QACnBt0B,KAAKu0B,uBAAuB7yB,GACrBA,EAID,uBAAuBA,GAC7B,IAAIhC,EAAUM,KAAKN,QACnB,GAAIA,EAEF,IAAK,IAAIgpB,EAAQC,SAASjpB,GAAUW,EAAI,EAAGqb,EAAIgN,EAAMxc,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACvE,IAAIm0B,EAAa1L,UAAUJ,EAAMroB,IAC7ButB,EAASrjB,OAAO7K,EAAQwB,IAAIszB,IAChC9yB,EAAGglB,IAAI8N,EAAY5G,GAGvB,IAAIH,EAAcztB,KAAKytB,YACvB,GAAIA,EACF,IAAK,IAAIptB,EAAI,EAAGqb,EAAI+R,EAAYvhB,OAAQ7L,EAAIqb,IAAKrb,EAC/CotB,EAAYptB,GAAGk0B,uBAAuB7yB,IA7H9C,SAoIA,MAAailB,UAAuBoN,EAGlC,YAEEnzB,EAEAolB,EAEAxU,EAEAyU,EAAiC3G,EAAevD,MAEhD2B,MACE2B,EAAYoV,eACZ7zB,EACA8zB,EAAmB9zB,EAAMolB,GAAQ,GACjCA,EAAOoN,QACPpN,EACAxU,GAEFxR,KAAKimB,eAAiBA,EAIxB,yBACE,OAAyBjmB,KAAKwR,YAAa8D,eAI7C,eACE,OAAyBtV,KAAKwR,YAAanC,KAI7C,OAAOzO,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,IApC9B,mBAyCA,MAAaiyB,UAAkBgB,EAG7B,YAEEjzB,EAEAolB,EAEAxU,EAEAyU,EAAiC3G,EAAevD,MAEhD2B,MACE2B,EAAYuV,UACZh0B,EACA8zB,EAAmB9zB,EAAMolB,GAAQ,GACjCA,EAAOoN,QACPpN,EACAxU,GAEFxR,KAAKimB,eAAiBA,EAIxB,OAAOrlB,GACL,IAAIi0B,EAAS70B,KAAK4pB,aAAahpB,GAC/B,OAAIi0B,GACG70B,KAAKgmB,OAAO2O,OAAO/zB,IA5B9B,cAiCA,MAAasxB,UAAa6B,EAGxB,YAEEnzB,EAEAolB,EAEAxU,EAEAyU,EAAiC3G,EAAevD,MAEhD2B,MACE2B,EAAYyV,KACZl0B,EACA8zB,EAAmB9zB,EAAMolB,GAAQ,GACjCA,EAAOoN,QACPpN,EACAxU,GAEFxR,KAAKimB,eAAiBA,EACtBjmB,KAAKmuB,QAAQ,EAAA7H,KAAKljB,KAIpB,OAAOxC,GACL,IAAIi0B,EAAS70B,KAAK4pB,aAAahpB,GAC/B,OAAIi0B,GACG70B,KAAKgmB,OAAO2O,OAAO/zB,IA7B9B,SAkCA,SAAkBm0B,GAEhB,mBAEA,yBAEA,qBANF,CAAkB,EAAAA,oBAAA,EAAAA,kBAAiB,KAUnC,MAAsBC,UAA4BjB,EAUhD,YAEEtmB,EAEA7M,EAEAolB,EAEAxU,EAAgDwU,EAAOoN,QAAQzE,8BAA8B/tB,IAE7F8c,MACEjQ,EACA7M,EACA8zB,EAAmB9zB,EAAMolB,GAAQ,GACjCA,EAAOoN,QACPpN,EACAxU,GAvBJ,KAAAyjB,kBAAiB,EAyBfj1B,KAAK2T,MAAQnC,EAAYmC,MAI3B,eACE,OAA0C3T,KAAKwR,YAAanC,KAI9D,sBACE,OAA0CrP,KAAKwR,YAAalC,YAI9D,wBAAwBhO,EAAY+N,GAClC9E,OAAO8E,EAAKmf,GAAG,IACfxuB,KAAKqP,KAAOA,EACZrP,KAAKi1B,kBAAoB,EACzBj1B,KAAKk1B,qBAAuB5zB,EAC5BtB,KAAKkN,IAAI,EAAA7K,YAAYusB,MAAQ,EAAAvsB,YAAY8yB,QAAU,EAAA9yB,YAAY2xB,UAIjE,sBAAsB1yB,EAAY+N,GAChC9E,OAAO8E,EAAKmf,GAAG,IACfxuB,KAAKqP,KAAOA,EACZrP,KAAKi1B,kBAAoB,EACzBj1B,KAAKo1B,mBAAqB9zB,EAC1BtB,KAAKkN,IAAI,EAAA7K,YAAYusB,MAAQ,EAAAvsB,YAAY8yB,QAAU,EAAA9yB,YAAY2xB,UAIjE,OAAOpzB,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,IA7D9B,wBAkEA,MAAawxB,UAAkB4C,EAG7B,YAEEp0B,EAEAolB,EAEAxU,EAEAyU,EAAiC3G,EAAevD,MAEhD2B,MACE2B,EAAYgW,UACZz0B,EACAolB,EACAxU,GAOJ,KAAA8jB,aAAoB,EALlBt1B,KAAKimB,eAAiBA,EACtBjmB,KAAKmuB,QAAQ,EAAA7H,KAAKljB,KAOpB,gBACE,OAA8BpD,KAAKwR,YAAalQ,MAIlD,OAAOV,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,IAjC9B,cAsCA,MAAa8tB,UAAesG,EAG1B,YAEEp0B,EAEAolB,EAEAC,EAEAzU,EAAgDwU,EAAOoN,QAAQzE,8BAA8B/tB,IAE7F8c,MACE2B,EAAYhD,OACZzb,EACAolB,EACAxU,GAEFxR,KAAKimB,eAAiBA,GAnB1B,WAwBA,kBAEE,YAESrlB,EAEAyO,EAEAC,EAAiC,MAJjC,KAAA1O,OAEA,KAAAyO,OAEA,KAAAC,gBAKX,MAAaimB,UAAcP,EAGzB,YAEEp0B,EAEO40B,EAEPnmB,EAEA2W,EAEAxU,EAAgDwU,EAAOoN,QAAQzE,8BAA8B/tB,IAE7F8c,MACE2B,EAAYoW,MACZ70B,EACAolB,EACAxU,GAZK,KAAAgkB,QAcPx1B,KAAKw1B,MAAQA,EACbjrB,OAAO8E,GAAQ,EAAAiX,KAAKG,MACpBzmB,KAAKmuB,QAAQ9e,IAvBjB,UA4BA,MAAa8W,UAA0B0N,EAWrC,YAEEjzB,EAEAolB,EAEAxU,EAEAyU,EAAiC3G,EAAevD,MAEhD2B,MACE2B,EAAYiO,mBACZ1sB,EACA8zB,EAAmB9zB,EAAMolB,EAAQxU,EAAYgd,GAAG,EAAAnsB,YAAYqwB,WAC5D1M,EAAOoN,QACPpN,EACAxU,GAxBJ,KAAAkgB,aAA6BtS,EAAamC,QAE1C,KAAAmU,UAAyC,KAGjC,KAAAC,gBAAuD,KAqB7D31B,KAAKimB,eAAiBA,EAIxB,yBACE,OAA6BjmB,KAAKwR,YAAa8D,eAIjD,uBACE,OAA6BtV,KAAKwR,YAAayH,UAIjD,eACE,OAA6BjZ,KAAKwR,YAAa0H,KAIjD,gBACE,OAA6BlZ,KAAKwR,YAAa2H,UAIjD,cACE,IAAI6M,EAAShmB,KAAKgmB,OAClB,OAAOA,EAAOvY,MAAQ4R,EAAY3N,OAC3BsU,EAAOvY,MAAQ4R,EAAYwO,oBAAsB7H,EAAOA,OAAOvY,MAAQ4R,EAAY3N,MAI5F,QAAQkkB,GACNrrB,OAAOvK,KAAKwuB,GAAG,EAAAnsB,YAAYqwB,WAC3BnoB,QAAQvK,KAAK2zB,SACb,IAAIgC,EAAkB31B,KAAK21B,gBAC3B,GAAKA,GACA,GAAIA,EAAgB7oB,IAAI8oB,GAAgB,OAAOrrB,OAAOorB,EAAgBz0B,IAAI00B,SADzD51B,KAAK21B,gBAAkBA,EAAkB,IAAI/tB,IAEnE,IAAI4J,EAAcxR,KAAKwR,YAAajH,OAAOiH,EAAY/D,MAAQ,EAAAJ,SAASsM,mBACxE,IAAIkc,EAAQ,IAAI1P,EACdnmB,KAAKY,KACLg1B,EACmBpkB,EACnBxR,KAAKimB,gBAMP,OAJA4P,EAAMliB,MAAQ3T,KAAK2T,MACnBkiB,EAAMnE,aAAe1xB,KAAK0xB,aAE1BiE,EAAgBzoB,IAAI0oB,EAAeC,GAC5BA,EAIT,oBAAoBC,GAClB,IAAIJ,EAAY11B,KAAK01B,UACrB,OAAkB,OAAdA,GAAsBA,EAAU5oB,IAAIgpB,GAA+BJ,EAAUx0B,IAAI40B,GAC9E,KAIT,oBAAoBA,EAAqB7C,GACvC,IAAIyC,EAAY11B,KAAK01B,UAChBA,EACAnrB,QAAQmrB,EAAU5oB,IAAIgpB,IADX91B,KAAK01B,UAAYA,EAAY,IAAI9tB,IAEjD8tB,EAAUxoB,IAAI4oB,EAAa7C,GAI7B,OAAOryB,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,IAjG9B,sBAsGA,MAAaslB,UAAiB6N,EAiC5B,YAEEgC,EAEA9zB,EAEAgX,EAEA+c,EAAmD,MAEnDtY,MACE2B,EAAY7M,SACZujB,EACArB,EAAmBqB,EAAwB9zB,EAAU+jB,OAAQ/jB,EAAUusB,GAAG,EAAAnsB,YAAYqwB,WACtFzwB,EAAUmxB,QACVnxB,EAAU+jB,OACV/jB,EAAUuP,aA1Cd,KAAAykB,aAAkC,IAAIruB,IAEtC,KAAAsuB,cAAyB,GAEzB,KAAAC,iBAA2B,GAM3B,KAAAC,eAA0B,GAE1B,KAAAC,IAAmB,EAEnB,KAAAC,oBAA2B,EAE3B,KAAAC,WAA8B,KAG9B,KAAAC,aAAoB,EAEpB,KAAAC,gBAAuB,EAEvB,KAAAC,kBAAyB,EA2FzB,KAAAC,SAA2B,KAC3B,KAAAC,SAA2B,KAC3B,KAAAC,SAA2B,KAC3B,KAAAC,SAA2B,KAC3B,KAAAC,UAA4B,KAC5B,KAAAC,YAA8B,KAC9B,KAAAC,YAA8B,KAG9B,KAAAC,YAAmB,EACnB,KAAAC,WAA2B,KAC3B,KAAAC,WAA4B,KAjF1Bp3B,KAAKiC,UAAYA,EACjBjC,KAAKiZ,UAAYA,EACjBjZ,KAAK2T,MAAQ1R,EAAU0R,MAAQ,EAAAtR,YAAY2xB,SAC3Ch0B,KAAKimB,eAAiBhkB,EAAUgkB,eAChCjmB,KAAKg2B,wBAA0BA,EAC/B,IAAI5C,EAAUnxB,EAAUmxB,QAExB,GADApzB,KAAKqP,KAAO+jB,EAAQrP,QAAQyC,UAAU6Q,WAAWpe,IAC5ChX,EAAUusB,GAAG,EAAAnsB,YAAYquB,SAAU,CACtC,IAAI4G,EAAa,EACjB,GAAIt3B,KAAKwuB,GAAG,EAAAnsB,YAAYqwB,UAAW,CACjC,IAAI6E,EAAQ,IAAIhC,EACd,EAAAvyB,YAAYsC,MACZgyB,IACA/sB,OAAO0O,EAAUue,UACjBx3B,MAEFA,KAAKi2B,aAAa/oB,IAAI,EAAAlK,YAAYsC,MAAOiyB,GACzCv3B,KAAKk2B,cAAcqB,EAAM/B,OAAS+B,EAEpC,IAAIE,EAAiBxe,EAAUwe,eAC/B,IAAK,IAAIp3B,EAAI,EAAGqb,EAAI+b,EAAevrB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACrD,IAAIq3B,EAAgBD,EAAep3B,GAC/Bs3B,EAAgB1e,EAAU2e,iBAAiBv3B,GAC3Ck3B,EAAQ,IAAIhC,EACdoC,EACAL,IACAI,EACA13B,MAEFA,KAAKi2B,aAAa/oB,IAAIyqB,EAAeJ,GACrCv3B,KAAKk2B,cAAcqB,EAAM/B,OAAS+B,GAGtCv3B,KAAK63B,KAAO,EAAAC,KAAKn2B,OAAO3B,MACxB+3B,EAAwB3E,EAASpzB,MAInC,SAASqP,EAAYzO,EAAsB,KAAM4Q,EAA0C,MAEzF,IAAI8lB,EAAat3B,KAAKiZ,UAAUwe,eAAevrB,OAASlM,KAAKm2B,iBAAiBjqB,OAC1ElM,KAAKwuB,GAAG,EAAAnsB,YAAYqwB,aAAa4E,EACrC,IAAIhgB,EAAqB,OAAT1W,EACZA,EACA,OAAS02B,EAAW7rB,WACnB+F,IAAaA,EAAcxR,KAAKozB,QAAQzE,8BAA8BrX,IAC3E,IAAIigB,EAAQ,IAAIhC,EACdje,EACAggB,EACAjoB,EACArP,KACAwR,GAEF,GAAI5Q,EAAM,CACR,GAAIZ,KAAKi2B,aAAanpB,IAAIlM,GAAO,MAAM,IAAIgI,MAAM,wBACjD5I,KAAKi2B,aAAa/oB,IAAItM,EAAM22B,GAI9B,OAFAv3B,KAAKk2B,cAAcqB,EAAM/B,OAAS+B,EAClCv3B,KAAKm2B,iBAAiB1pB,KAAK4C,GACpBkoB,EAIT,OAAO32B,GACL,IAAIo3B,EAASh4B,KAAKi2B,aAClB,OAAI+B,EAAOlrB,IAAIlM,GAAc2J,OAAOytB,EAAO92B,IAAIN,IACxCZ,KAAKgmB,OAAO2O,OAAO/zB,GAkB5B,SAASjB,EAAgB02B,GAMvB,GALAr2B,KAAKq2B,IAAMA,EACX9rB,QAAQvK,KAAKm3B,aAAen3B,KAAKm3B,WAAWjrB,QAC5ClM,KAAKm3B,WAAa,KAClBn3B,KAAKo3B,WAAa,KAClBp3B,KAAK22B,SAAW32B,KAAK42B,SAAW52B,KAAK62B,SAAW72B,KAAK82B,SAAW,KAC5D92B,KAAKozB,QAAQrP,QAAQkU,UAAW,CAClC,IAAI7B,EAAiBp2B,KAAKo2B,eAC1B,IAAK,IAAI/1B,EAAI,EAAGqb,EAAI0a,EAAelqB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACrD,IAAI63B,EAAgB9B,EAAe/1B,GACnCV,EAAOw4B,iBACL9B,EACA6B,EAAcE,aACdF,EAAcxsB,OAAOiS,eACrBua,EAActsB,KACdssB,EAAcrsB,WAtJxB,aA6JA,IAoWWwsB,EApWPC,EAAqB,EAGzB,+BAAoCnF,EAQlC,YAEEla,EAEAma,GAEA1V,MACE2B,EAAYkZ,gBACZ,OAASD,EAAmB7sB,WAC5B,OAAS6sB,EAAmB7sB,WAC5B2nB,EACAA,EAAQrO,cAERuT,EACFt4B,KAAKiZ,UAAYA,EACjBjZ,KAAK2T,MAAQ,EAAAtR,YAAY2xB,SACzBh0B,KAAKqP,KAAO+jB,EAAQrP,QAAQyC,UAAU6Q,WAAWpe,GAInD,OAAOrY,GACL,OAAO,OAKX,MAAamwB,UAAuB8C,EAGlC,YAEEjzB,EAEAolB,EAEAxU,EAEAyU,EAAiC3G,EAAevD,MAEhD2B,MACE2B,EAAYmZ,gBACZ53B,EACA8zB,EAAmB9zB,EAAMolB,EAAQzb,OAAOiH,EAAYgd,GAAG,EAAAnsB,YAAYqwB,YACnE1M,EAAOoN,QACPpN,EACAxU,GAEFxR,KAAKimB,eAAiBA,EAIxB,eACE,OAA0BjmB,KAAKwR,YAAanC,KAI9C,sBACE,OAA0BrP,KAAKwR,YAAalC,YAI9C,qBACE,OAA0BtP,KAAKwR,YAAa8M,eAI9C,OAAO1d,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,IAzC9B,mBA8CA,sBAA2Bo0B,EAYzB,YAEE/yB,EAEA+jB,EAEA3W,GAEAqO,MACE2B,EAAY4O,MACZhsB,EAAUrB,KACVolB,EACkC/jB,EAAUuP,aAnBhD,KAAAinB,cAAqB,EAErB,KAAAC,UAAyB,EAEzB,KAAAC,UAAyB,EAiBvB34B,KAAKiC,UAAYA,EACjBjC,KAAK2T,MAAQ1R,EAAU0R,MACvB3T,KAAKimB,eAAiBhkB,EAAUgkB,eAChC1b,OAAO8E,GAAQ,EAAAiX,KAAKG,MACpBzmB,KAAKmuB,QAAQ9e,GACb0oB,EAAwB/3B,KAAKozB,QAASpzB,MAIxC,yBACE,OAAOA,KAAKgmB,OAAOf,aAAe,EAAAviB,mBAAqB,EAAAF,cAAgBxC,KAAKY,KAI9E,yBACE,OAAOZ,KAAKgmB,OAAOf,aAAe,EAAAviB,mBAAqB,EAAAD,cAAgBzC,KAAKY,OAKhF,MAAakxB,UAA0B+B,EAQrC,YAEEjzB,EAEAolB,EAEA4S,GAEAlb,MACE2B,EAAYwO,mBACZjtB,EACA8zB,EAAmB9zB,EAAMolB,EAAQ4S,EAAiBpK,GAAG,EAAAnsB,YAAYqwB,WACjE1M,EAAOoN,QACPpN,EACA4S,GAnBJ,KAAA9K,gBAA4C,KAE5C,KAAAC,gBAA4C,KAmB1C/tB,KAAK2T,SAAW,EAAAtR,YAAYiuB,IAAM,EAAAjuB,YAAYkuB,KAIhD,OAAO3vB,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,IA7B9B,sBAkCA,yBAA8Bo0B,EAU5B,YAEE/yB,EAEA+jB,GAEAtI,MACE2B,EAAY2O,SACZ/rB,EAAUrB,KACVolB,EACA/jB,EAAUmxB,QAAQzE,8BAChB1sB,EAAUrB,KACVqB,EAAUusB,GAAG,EAAAnsB,YAAYqwB,UACrB,EAAArwB,YAAYqwB,SACZ,EAAArwB,YAAY0Z,OAnBtB,KAAA8c,eAAkC,KAElC,KAAAC,eAAkC,KAoBhC94B,KAAKiC,UAAYA,EACjBjC,KAAK2T,MAAQ1R,EAAU0R,MACvB3T,KAAKimB,eAAiBhkB,EAAUgkB,eAChC8R,EAAwB/3B,KAAKozB,QAASpzB,MAIxC,OAAOY,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,KAK9B,+BAAoCo0B,EAGlC,YAEEhP,GAEAtI,MAAM2B,EAAY0Z,eAAgB/S,EAAOf,aAAe,KAAMe,GAIhE,kBAAkBgT,GAChB,OAAeh5B,KAAKgmB,OAAQiT,eAAe7Z,EAAaK,YAAauZ,GAIvE,kBAAkBA,GAChB,OAAeh5B,KAAKgmB,OAAQiT,eAAe7Z,EAAaM,YAAasZ,GAIvE,OAAOp4B,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,KAK9B,MAAagvB,UAAuBiE,EAelC,YAEEjzB,EAEAolB,EAEAxU,EAEAyU,EAAiC3G,EAAevD,KAChDmd,GAAqB,GAErBxb,MACEwb,EAAe7Z,EAAYuR,oBAAsBvR,EAAYiL,gBAC7D1pB,EACA8zB,EAAmB9zB,EAAMolB,EAAQxU,EAAYgd,GAAG,EAAAnsB,YAAYqwB,WAC5D1M,EAAOoN,QACPpN,EACAxU,GA7BJ,KAAAmc,gBAA8C,KAE9C,KAAAtC,cAAuC,KAEvC,KAAA8N,qBAAiD,KAEjD,KAAA3H,mBAA2D,IAAI5pB,IAE/D,KAAA8tB,UAAsC,KAEtC,KAAA0D,UAAiC,IAAIzxB,IAqBnC3H,KAAKimB,eAAiBA,EAIxB,yBACE,OAA0BjmB,KAAKwR,YAAa8D,eAG9C,kBACE,OAA0BtV,KAAKwR,YAAavC,YAG9C,sBACE,OAA0BjP,KAAKwR,YAAa+D,gBAI9C,qBACE,IAAI4U,EAA0BnqB,KAAKozB,QAAQjJ,wBAC3C,OAAmC,OAA5BA,GACAnqB,KAAKq5B,QAAQlP,EAAwBloB,WAI9C,QAAQq3B,GACN,IAAI/F,EAAiCvzB,KACjC6M,EAAO,IAAIlF,IACf,EAAG,CAED,GAAIkF,EAAKC,IAAIymB,GAAU,MAEvB,GADA1mB,EAAK6Z,IAAI6M,GACLA,IAAY+F,EAAe,OAAO,EACtC/F,EAAUA,EAAQlI,oBACXkI,GACT,OAAO,EAIT,YAAY3yB,EAAcoR,GACxB,IAAIyhB,EAAsBzhB,EAAQR,YAC9Bmc,EAAkB3tB,KAAK2tB,gBAC3B,GAAKA,GACA,GAAIA,EAAgB7gB,IAAIlM,GAAO,CAClC,IAAImuB,EAAWxkB,OAAOojB,EAAgBzsB,IAAIN,IACtCouB,EAASC,EAASF,EAAU/c,GAChC,IAAKgd,EAcH,OAbIjF,EAAkBgF,EAASthB,MAC7BzN,KAAKozB,QAAQlE,aACX,EAAArkB,eAAeskB,uBACfnd,EAAQwZ,eAAergB,MACL4jB,EAAUvd,YAAY5Q,KAAKuK,MAC7C6G,EAAQwZ,eAAexf,MAGzBhM,KAAKozB,QAAQlK,MACX,EAAAre,eAAeskB,uBACfnd,EAAQwZ,eAAergB,MAAO6G,EAAQwZ,eAAexf,OAGlD,EAETgG,EAAUgd,QApBUhvB,KAAK2tB,gBAAkBA,EAAkB,IAAI/lB,IA2BnE,OALA+lB,EAAgBzgB,IAAItM,EAAMoR,GACtBA,EAAQwc,GAAG,EAAAnsB,YAAYoU,SAAWzW,KAAKwuB,GAAG,EAAAnsB,YAAYqrB,gBACxD1b,EAAQ9E,IAAI,EAAA7K,YAAYqrB,eAE1B1tB,KAAKozB,QAAQhP,sBAAsBlX,IAAIumB,EAAqBzhB,IACrD,EAIT,oBAAoB8jB,GAClB,IAAIJ,EAAY11B,KAAK01B,UACrB,OAAkB,OAAdA,GAAsBA,EAAU5oB,IAAIgpB,GAA4BJ,EAAUx0B,IAAI40B,GAC3E,KAIT,oBAAoBA,EAAqB7C,GACvC,IAAIyC,EAAY11B,KAAK01B,UAChBA,EACAnrB,QAAQmrB,EAAU5oB,IAAIgpB,IADX91B,KAAK01B,UAAYA,EAAY,IAAI9tB,IAEjD8tB,EAAUxoB,IAAI4oB,EAAa7C,GAI7B,OAAOryB,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,IA1H9B,mBA8HA,SAAWy3B,GACT,yBACA,yBACA,iCAHF,CAAWA,MAAY,KAOvB,MAAakB,UAAcxF,EAsDzB,YAEEgC,EAEA9zB,EAEAqM,EAA+B,KAC/B4qB,GAAqB,GAErBxb,MACEwb,EAAe7Z,EAAYma,UAAYna,EAAY3N,MACnDqkB,EACArB,EAAmBqB,EAAwB9zB,EAAU+jB,OAAQ/jB,EAAUusB,GAAG,EAAAnsB,YAAYqwB,WACtFzwB,EAAUmxB,QACVnxB,EAAU+jB,OACV/jB,EAAUuP,aA9Dd,KAAAioB,KAAqB,KAErB,KAAAzD,wBAAmD,KAEnD,KAAA0D,iBAAwB,EAExB,KAAAC,oBAAuC,KAEvC,KAAApI,UAA+C,KAE/C,KAAAqI,eAAwC,KAEhC,KAAAC,IAAW,EAEX,KAAAC,SAAQ,EAEhB,KAAAC,UAAiB,EAEjB,KAAAxL,YAA2B,KA8CzB,IAAI6E,EAAUpzB,KAAKozB,QAOnB,GANApzB,KAAKiC,UAAYA,EACjBjC,KAAK2T,MAAQ1R,EAAU0R,MACvB3T,KAAKimB,eAAiBhkB,EAAUgkB,eAChCjmB,KAAKsO,cAAgBA,EACrBtO,KAAKmuB,QAAQiF,EAAQrP,QAAQyC,UAAUwT,QAAQh6B,QAE1CA,KAAKsrB,aAAahM,EAAe5C,WAAY,CAChD,IAAI8I,EAAK4N,EAAQ3O,cACjBzkB,KAAK65B,IAAMrU,EACX4N,EAAQ7O,eAAerX,IAAIsY,EAAIxlB,MAIjC,IAAIsV,EAAiBrT,EAAUuZ,mBAC/B,GAAIlN,EAAe,CACjB,IAAI+O,EAAmB/O,EAAcpC,OACrC,IAAKoJ,GAAkB+H,GAAoB/H,EAAepJ,OACxD,MAAM,IAAItD,MAAM,gCAElB,GAAIyU,EAAkB,CACfrd,KAAKg2B,0BAAyBh2B,KAAKg2B,wBAA0B,IAAIpuB,KACtE,IAAK,IAAIvH,EAAI,EAAGA,EAAIgd,IAAoBhd,EACtCL,KAAKg2B,wBAAwB9oB,IAAIoI,EAAejV,GAAGO,KAAKoL,KAAMsC,EAAcjO,UAG3E,GAAuB,OAAnBiV,GAA2BA,EAAepJ,OAAS,EAC5D,MAAM,IAAItD,MAAM,gCAElBmvB,EAAwB3E,EAASpzB,MAxEnC,SACE,OAAOA,KAAK65B,IAId,qBACE,OAAO75B,KAAKiC,UAAUg4B,eAIxB,kBACE,GAAIj6B,KAAKi6B,eAAgB,OAAO,EAChC,IAAIC,EAAcl6B,KAAK4pB,aAAa,UACpC,OAAuB,OAAhBsQ,IACLA,EAAYzsB,MAAQ4R,EAAY4O,OAE9BiM,EAAYzsB,MAAQ4R,EAAY2O,UACW,OAAhCkM,EAAarB,kBAGwB,OAAlD74B,KAAKi5B,eAAe7Z,EAAaK,cAC2B,OAA5Dzf,KAAKi5B,eAAe7Z,EAAaO,wBAuDrC,QAAQ8Z,GACNlvB,QAAQvK,KAAKy5B,MACbz5B,KAAKy5B,KAAOA,EAGZ,IAAIpO,EAAiCoO,EAAKx3B,UACtCgpB,EAAgBjrB,KAAKiC,UACzBsI,OAAO8gB,GAAiBJ,GACxBI,EAAc+N,UAAU1S,IAAIuE,GAC5B,IAAIkP,EAAsBlP,EAAc0C,gBACxC,GAAIwM,EACF,OAAG,CACD,IAAIC,EAAsB/O,EAAcsC,gBACxC,GAAIyM,EACF,IAAK,IAAI1R,EAAQC,SAASyR,GAAsB/5B,EAAI,EAAGqb,EAAIgN,EAAMxc,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACnF,IAAIm0B,EAAa9L,EAAMroB,GACnButB,EAASrjB,OAAO6vB,EAAoBl5B,IAAIszB,IACxC2F,EAAoBrtB,IAAI0nB,IAC1B5G,EAAO1gB,IAAI,EAAA7K,YAAYg4B,SAI7B,IAAIC,EAAgBjP,EAAcA,cAClC,IAAKiP,EAAe,MACpBjP,EAAgBiP,EAKpB,IAAIC,EAAyBd,EAAKzD,wBAClC,GAAIuE,EAAwB,CAC1B,IAAIvE,EAA0Bh2B,KAAKg2B,wBAEnC,IAAK,IAAItN,EAAQC,SAAS4R,GAAyBl6B,EAAI,EAAGqb,EAAIgN,EAAMxc,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACtF,IAAIm6B,EAAW1R,UAAUJ,EAAMroB,IAC3Bo6B,EAAWlwB,OAAOgwB,EAAuBr5B,IAAIs5B,IAC5CxE,EAGOA,EAAwBlpB,IAAI0tB,IACtCxE,EAAwB9oB,IAAIstB,EAAUC,IAHtCz6B,KAAKg2B,wBAA0BA,EAA0B,IAAIpuB,IAC7DouB,EAAwB9oB,IAAIstB,EAAUC,MAS9C,eAAeC,GACb,IAAInH,EAAwBvzB,KAC5B,EAAG,CACD,GAAIuzB,GAAWmH,EAAQ,OAAO,EAC9BnH,EAAUA,EAAQkG,WACXlG,GACT,OAAO,EAIT,eAAe9lB,EAAoBqb,GAAkB,GACnD,GAAIA,EACF,OAAQrb,GACN,KAAK2R,EAAaK,YAAa,CAC7B,IAAIkb,EAAoB36B,KAAKi5B,eAAe7Z,EAAaO,uBACzD,GAAIgb,EAAmB,OAAOA,EAC9B,MAEF,KAAKvb,EAAaM,YAAa,CAC7B,IAAIib,EAAoB36B,KAAKi5B,eAAe7Z,EAAaQ,uBACzD,GAAI+a,EAAmB,OAAOA,EAC9B,MAEF,QAASpwB,QAAO,GAGpB,IAAI0oB,EAAyBjzB,KAC7B,EAAG,CACD,IAAIuxB,EAAY0B,EAAS1B,UACzB,GAAIA,EAAW,CACb,IAAIqJ,EAAWrJ,EAAUrwB,IAAIuM,GAC7B,GAAImtB,EAAU,OAAOA,EAEvB3H,EAAWA,EAASwG,WACbxG,GACT,OAAO,KAIT,OAAOryB,GACL,OAAOZ,KAAKgmB,OAAO2O,OAAO/zB,GAI5B,SAASi6B,GACP,IAAIrlB,EAAUjL,OAAOvK,KAAKwV,SAC1BjL,OAAOiL,EAAQ1I,IAAI+tB,IACnB,IAAIC,EAAiBtlB,EAAQtU,IAAI25B,GAEjC,OADAtwB,OAAOuwB,EAAMrtB,MAAQ4R,EAAY4O,OAClB6M,EAAOrC,aAIxB,WAAc73B,EAAcU,EAAUgkB,EAAoByV,GACxD,IAAID,EAAQ96B,KAAK4pB,aAAahpB,GAC9B,GAAc,OAAVk6B,GAAkBA,EAAMrtB,MAAQ4R,EAAY4O,MAAO,CACrD,IAAI1I,EAASwV,EAAqBD,EAAOrC,aACzC,OAAgBqC,EAAOzrB,KAAK5B,MAC1B,KAAK,EACL,KAAK,EAEH,OADA,EAAAutB,QAAQ53B,IAAI9B,GAAQgkB,EAAQC,GACrB,EAET,KAAK,EACL,KAAK,EAEH,OADA,EAAA0V,SAAS73B,IAAI9B,GAAQgkB,EAAQC,GACtB,EAET,KAAK,EACL,KAAK,EAEH,OADA,EAAAG,SAAStiB,IAAI9B,GAAQgkB,EAAQC,GACtB,EAET,KAAK,EACL,KAAK,EAGH,OAFAhb,QAAQvK,KAAKozB,QAAQrP,QAAQkD,UAC7B,EAAAvB,SAAStiB,IAAI9B,GAAQgkB,EAAQC,GACtB,EAET,KAAK,GAEH,OADA,EAAA2V,SAASr3B,IAAIvC,GAAQgkB,EAAQC,GACtB,EAET,KAAK,GAEH,OADA,EAAA4V,SAASr3B,IAAIxC,GAAQgkB,EAAQC,GACtB,GAKb,OADAhb,QAAO,GACA,EAIT,QAAQtI,GACN,OAAOjC,KAAKiC,UAAUo3B,QAAQp3B,GAIhC,mBAAmBm5B,GACjB,IAAI7H,EAAwBvzB,KAC5B,EAAG,CACD,GAAIuzB,EAAQtxB,YAAcm5B,EAAmB,OAAO7H,EAAQjlB,cAC5DilB,EAAUA,EAAQkG,WACXlG,GACT,OAAO,KAIT,oBAIE,IAHA,IAAIA,EAAiBvzB,KACjBozB,EAAUpzB,KAAKozB,QACfiI,EAAcjI,EAAQjJ,wBACnBoJ,EAAQkG,OAAS4B,GACtB9H,EAAUhpB,OAAOgpB,EAAQkG,MAE3B,IAAIx3B,EAAYsxB,EAAQtxB,UACxB,OAAIA,GAAamxB,EAAQtH,eAChB9rB,KAAKs7B,mBAAmBlI,EAAQtH,gBAAiB,GAEtD7pB,GAAamxB,EAAQ/I,iBAAyB,EAAA/D,KAAKpjB,GACnDjB,GAAamxB,EAAQ7I,kBAA0B,EAAAjE,KAAKnjB,IACpDlB,GAAamxB,EAAQ5I,kBAA0B,EAAAlE,KAAKljB,IACpDnB,GAAamxB,EAAQ3I,kBAA0B,EAAAnE,KAAKjjB,IACpDpB,GAAamxB,EAAQ1I,iBAAyB,EAAApE,KAAK/iB,GACnDtB,GAAamxB,EAAQzI,wBAAgC,EAAArE,KAAK/iB,GAC1DtB,GAAamxB,EAAQxI,kBAA0B,EAAAtE,KAAK9iB,IACpDvB,GAAamxB,EAAQvI,kBAA0B,EAAAvE,KAAK7iB,IACpDxB,GAAamxB,EAAQtI,kBAA0B,EAAAxE,KAAK5iB,IACpDzB,GAAamxB,EAAQrI,kBAA0B,EAAAzE,KAAKziB,IACpD5B,GAAamxB,EAAQpI,kBAA0B,EAAA1E,KAAKxiB,KACxDyG,QAAO,GACA,EAAA+b,KAAKG,MAId,gBACE,IAAI8U,EAAUv7B,KAAK85B,SACnB,GAAe,GAAXyB,EAAiC,CACnC,IAAIC,EAAWx7B,KAAKy7B,SAASz7B,MACfA,KAAK85B,SAAWyB,EAA1BC,EAAoC,EACT,EAEjC,OAAkB,GAAXD,EAID,SAASG,EAAcC,EAAqB,IAAIh0B,KAWtD,GAAIg0B,EAAO7uB,IAAI9M,MAAO,OAAO,EAI7B,IAAIuzB,EAHJoI,EAAOjV,IAAI1mB,MAIX,IAkBIqrB,EAlBAsC,EAAkB3tB,KAAKwV,QAC3B,GAAImY,EAEF,IAAK,IAAIX,EAAUC,WAAWU,GAAkBttB,EAAI,EAAGqb,EAAIsR,EAAQ9gB,OAAQ7L,EAAIqb,IAAKrb,EAAG,CACrF,IAAIutB,EAAS9E,UAAUkE,EAAQ3sB,IAC/B,GAAIutB,EAAOngB,MAAQ4R,EAAY4O,MAAO,CACpC,IAAI2N,EAAoBhO,EAAQve,KAChC,GAAIusB,EAAUpN,GAAG,MAC8B,QAAxC+E,EAAUqI,EAAUvN,kBACvBkF,IAAYmI,GACZnI,EAAQkI,SAASC,EAAOC,IACvB,OAAO,GAUlB,GAAsD,QAAjDtQ,EAAgBrrB,KAAKozB,QAAQtH,iBAA4B9rB,KAAKiC,UAAUo3B,QAAQhO,GAAgB,CACnG,IAAI/c,EAAgB/D,OAAOvK,KAAKs7B,mBAAmBjQ,IAEnD,GADA9gB,OAA+B,GAAxB+D,EAAcpC,QAE6B,QAA/CqnB,EAAUjlB,EAAc,GAAG+f,kBAE1BkF,IAAYmI,GACZnI,EAAQkI,SAASC,EAAOC,IAE1B,OAAO,OAGJ,GAAoD,QAA/CtQ,EAAgBrrB,KAAKozB,QAAQpH,eAA0BhsB,KAAKiC,UAAUo3B,QAAQhO,GAAgB,CACxG,IAAI/c,EAAgB/D,OAAOvK,KAAKs7B,mBAAmBjQ,IAEnD,GADA9gB,OAA+B,GAAxB+D,EAAcpC,QAE6B,QAA/CqnB,EAAUjlB,EAAc,GAAG+f,kBAE1BkF,IAAYmI,GACZnI,EAAQkI,SAASC,EAAOC,IAE1B,OAAO,OAGJ,GAAoD,QAA/CtQ,EAAgBrrB,KAAKozB,QAAQnH,eAA0BjsB,KAAKiC,UAAUo3B,QAAQhO,GAAgB,CACxG,IAAI/c,EAAgB/D,OAAOvK,KAAKs7B,mBAAmBjQ,IAEnD,GADA9gB,OAA+B,GAAxB+D,EAAcpC,QAE6B,QAA/CqnB,EAAUjlB,EAAc,GAAG+f,kBAE1BkF,IAAYmI,GACZnI,EAAQkI,SAASC,EAAOC,IAE1B,OAAO,EACT,GACkD,QAA/CpI,EAAUjlB,EAAc,GAAG+f,kBAE1BkF,IAAYmI,GACZnI,EAAQkI,SAASC,EAAOC,IAE1B,OAAO,EAEX,OAAO,GAzXX,UA8XA,MAAahJ,UAA2B/C,EAGtC,YACEhvB,EACAolB,EACAxU,EACAyU,GAEAvI,MACE9c,EACAolB,EACAxU,EACAyU,GACA,IAdN,uBAsCA,SAAS8R,EAAwB3E,EAAkBphB,GACjDzH,QAAQ6oB,EAAQ/O,gBAAgBvX,IAAIkF,EAAQiT,eAC5CmO,EAAQ/O,gBAAgBnX,IAAI8E,EAAQiT,aAAcjT,GAIpD,SAASid,EAAS4M,EAAgBC,GAIhC,GADAvxB,OAAOsxB,EAAMzI,UAAY0I,EAAM1I,SAC3B0I,EAAMtmB,QAAS,OAAO,KAC1B,IAAIwZ,EAAiC,KACrC,OAAQ6M,EAAMpuB,MACZ,KAAK4R,EAAYiO,mBACf,OAAQwO,EAAMruB,MACZ,KAAK4R,EAAYuV,UACf9B,EAAYgJ,EAAOD,GACnB7M,EAA0B6M,EAC1B,MAEF,KAAKxc,EAAYoV,eACVoH,EAAMxI,aACTwI,EAAMxI,WAA6ByI,EACnChJ,EAAYgJ,EAAOD,GACnB7M,EAA0B6M,GAKhC,MAEF,KAAKxc,EAAYiL,gBACjB,KAAKjL,EAAYyV,KACf,GAAIgH,EAAMruB,MAAQ4R,EAAYuV,UAAW,CACvC9B,EAAYgJ,EAAOD,GACnB7M,EAA0B6M,EAC1B,MAEF,MAEF,KAAKxc,EAAYuV,UACf,OAAQkH,EAAMruB,MACZ,KAAK4R,EAAYyV,KACjB,KAAKzV,EAAYiL,gBACjB,KAAKjL,EAAYiO,mBACfwF,EAAY+I,EAAOC,GACnB9M,EAA0B8M,EAC1B,MAEF,KAAKzc,EAAYuV,UACf9B,EAAYgJ,EAAOD,GACnB7M,EAA0B6M,EAC1B,MAEF,KAAKxc,EAAYoV,eACVoH,EAAMxI,aACTwI,EAAMxI,WAA6ByI,EACnChJ,EAAYgJ,EAAOD,GACnB7M,EAA0B6M,GAKhC,MAEF,KAAKxc,EAAYhD,OACXyf,EAAMruB,MAAQ4R,EAAYoV,iBACvBoH,EAAMxI,aACTwI,EAAMxI,WAA6ByI,EACnChJ,EAAYgJ,EAAOD,GACnB7M,EAA0B6M,IAG9B,MAEF,KAAKxc,EAAYoV,eACf,OAAQqH,EAAMruB,MACZ,KAAK4R,EAAYhD,OACjB,KAAKgD,EAAYiO,mBACjB,KAAKjO,EAAYuV,UACVkH,EAAMzI,aACTyI,EAAMzI,WAA6BwI,EACnC/I,EAAY+I,EAAOC,GACnB9M,EAA0B8M,IAQpC,GAAI9M,EAAQ,EACU6M,EAAMrN,GAAG,EAAAnsB,YAAYoU,SAAWolB,EAAMvQ,aAAahM,EAAejD,WAClEyf,EAAMtN,GAAG,EAAAnsB,YAAYoU,SAAWqlB,EAAMxQ,aAAahM,EAAejD,UAEpFwf,EAAMzI,QAAQlK,MACZ,EAAAre,eAAekxB,kFACf/M,EAAOxD,eAAergB,MAAO6jB,EAAOxD,eAAexf,MAIzD,OAAOgjB,EAIT,SAAS8D,EAAYkJ,EAAcC,GACjC,IAAIC,EAAaF,EAAIxmB,QACrB,GAAI0mB,EAAY,CACd,IAAIC,EAAcF,EAAKzmB,QAClB2mB,IAAaF,EAAKzmB,QAAU2mB,EAAc,IAAIv0B,KAEnD,IAAK,IAAI8gB,EAAQC,SAASuT,GAAa77B,EAAI,EAAGqb,EAAIgN,EAAMxc,OAAQ7L,EAAIqb,IAAKrb,EAAG,CAC1E,IAAIm0B,EAAa1L,UAAUJ,EAAMroB,IAC7ButB,EAASrjB,OAAO2xB,EAAWh7B,IAAIszB,IACnC2H,EAAYjvB,IAAIsnB,EAAY5G,KAMlC,SAAgB8G,EAAmB9zB,EAAcolB,EAAiBoW,EAAkBC,GAAiB,GACnG,OAAQrW,EAAOvY,MACb,KAAK4R,EAAYiU,KACf,OAAI+I,EAAiBz7B,EACdolB,EAAOf,aAAe,EAAA3iB,eAAiB1B,EAEhD,KAAKye,EAAY7M,SACf,OAAI6pB,EAAiBz7B,GACrB2J,QAAQ6xB,GACDpW,EAAOf,aAAe,EAAAriB,gBAAkBhC,GAEjD,QACE,OAAO8zB,EAAmB1O,EAAOplB,KAAMolB,EAAOA,OAAQA,EAAOwI,GAAG,EAAAnsB,YAAYqwB,UAAW2J,IAC/ED,EAAa,EAAA15B,mBAAqB,EAAAC,kBAAoB/B,GAvJpE,0BAA+B24B,EAG7B,YACExD,EACA9zB,EACAqM,EAAwB,IAExBoP,MACEqY,EACA9zB,EACAqM,GACA,KA8HN,wB,8EC92HA,aAMA,OAKA,OAYA,IAAYoT,EAwIA4a,EAMZ,SAAgBC,EAAiBvwB,GAE/B,OADAzB,OAAOyB,EAAKE,QACJF,EAAKM,WAAW,IACtB,KAAK,GACH,GAAY,YAARN,EAAoB,OAAO0V,EAAMoP,SACrC,GAAY,MAAR9kB,EAAc,OAAO0V,EAAM8a,GAC/B,GAAY,SAARxwB,EAAiB,OAAO0V,EAAM+a,MAClC,GAAY,SAARzwB,EAAiB,OAAO0V,EAAMgb,MAClC,MAEF,KAAK,GACH,GAAY,SAAR1wB,EAAiB,OAAO0V,EAAMrM,MAClC,MAEF,KAAK,GACH,GAAY,QAARrJ,EAAgB,OAAO0V,EAAMib,KACjC,GAAY,SAAR3wB,EAAiB,OAAO0V,EAAMkb,MAClC,GAAY,SAAR5wB,EAAiB,OAAO0V,EAAMhQ,MAClC,GAAY,YAAR1F,EAAoB,OAAO0V,EAAM7L,SACrC,GAAY,SAAR7J,EAAiB,OAAO0V,EAAMkN,MAClC,GAAY,eAAR5iB,EAAuB,OAAO0V,EAAM3P,YACxC,MAEF,KAAK,IACH,GAAY,YAAR/F,EAAoB,OAAO0V,EAAMmb,SACrC,GAAY,WAAR7wB,EAAmB,OAAO0V,EAAMqR,QACpC,GAAY,WAAR/mB,EAAmB,OAAO0V,EAAMob,QACpC,GAAY,UAAR9wB,EAAkB,OAAO0V,EAAMqb,OACnC,GAAY,MAAR/wB,EAAc,OAAO0V,EAAM1L,GAC/B,MAEF,KAAK,IACH,GAAY,QAARhK,EAAgB,OAAO0V,EAAMsb,KACjC,GAAY,QAARhxB,EAAgB,OAAO0V,EAAMoT,KACjC,GAAY,UAAR9oB,EAAkB,OAAO0V,EAAMjL,OACnC,GAAY,WAARzK,EAAmB,OAAO0V,EAAMub,QACpC,MAEF,KAAK,IACH,GAAY,SAARjxB,EAAiB,OAAO0V,EAAM7T,MAClC,GAAY,WAAR7B,EAAmB,OAAO0V,EAAMwb,QACpC,GAAY,OAARlxB,EAAe,OAAO0V,EAAM9I,IAChC,GAAY,QAAR5M,EAAgB,OAAO0V,EAAMyb,KACjC,GAAY,YAARnxB,EAAoB,OAAO0V,EAAMlP,SACrC,MAEF,KAAK,IACH,GAAY,OAARxG,EAAe,OAAO0V,EAAM4O,IAChC,MAEF,KAAK,IACH,GAAY,MAARtkB,EAAc,OAAO0V,EAAM7J,GAC/B,GAAY,cAAR7L,EAAsB,OAAO0V,EAAM0b,WACvC,GAAY,UAARpxB,EAAkB,OAAO0V,EAAM1J,OACnC,GAAY,MAARhM,EAAc,OAAO0V,EAAM2b,GAC/B,GAAY,cAARrxB,EAAsB,OAAO0V,EAAM/O,WACvC,GAAY,aAAR3G,EAAqB,OAAO0V,EAAM8X,UACtC,GAAY,MAARxtB,EAAc,OAAO0V,EAAM4b,GAC/B,MAEF,KAAK,IACH,GAAY,SAARtxB,EAAiB,OAAO0V,EAAM6b,MAClC,MAEF,KAAK,IACH,GAAY,OAARvxB,EAAe,OAAO0V,EAAM8b,IAChC,MAEF,KAAK,IACH,GAAY,UAARxxB,EAAkB,OAAO0V,EAAM+b,OACnC,MAEF,KAAK,IACH,GAAY,aAARzxB,EAAqB,OAAO0V,EAAMkT,UACtC,GAAY,OAAR5oB,EAAe,OAAO0V,EAAM1O,IAChC,GAAY,QAARhH,EAAgB,OAAO0V,EAAM/T,KACjC,MAEF,KAAK,IACH,GAAY,MAAR3B,EAAc,OAAO0V,EAAMgc,GAC/B,MAEF,KAAK,IACH,GAAY,WAAR1xB,EAAmB,OAAO0V,EAAMic,QACpC,GAAY,WAAR3xB,EAAmB,OAAO0V,EAAMkc,QACpC,GAAY,aAAR5xB,EAAqB,OAAO0V,EAAMmc,UACtC,GAAY,UAAR7xB,EAAkB,OAAO0V,EAAMoc,OACnC,MAEF,KAAK,IACH,GAAY,YAAR9xB,EAAoB,OAAO0V,EAAMmP,SACrC,GAAY,UAAR7kB,EAAkB,OAAO0V,EAAM3H,OACnC,MAEF,KAAK,IACH,GAAY,OAAR/N,EAAe,OAAO0V,EAAM6O,IAChC,GAAY,UAARvkB,EAAkB,OAAO0V,EAAMiP,OACnC,GAAY,SAAR3kB,EAAiB,OAAO0V,EAAMnN,MAClC,GAAY,UAARvI,EAAkB,OAAO0V,EAAMxH,OACnC,MAEF,KAAK,IACH,GAAY,QAARlO,EAAgB,OAAO0V,EAAMjN,KACjC,GAAY,SAARzI,EAAiB,OAAO0V,EAAMpH,MAClC,GAAY,QAARtO,EAAgB,OAAO0V,EAAM9T,KACjC,GAAY,OAAR5B,EAAe,OAAO0V,EAAM/G,IAChC,GAAY,QAAR3O,EAAgB,OAAO0V,EAAMqc,KACjC,GAAY,UAAR/xB,EAAkB,OAAO0V,EAAMsc,OACnC,MAEF,KAAK,IACH,GAAY,OAARhyB,EAAe,OAAO0V,EAAMuc,IAChC,GAAY,QAARjyB,EAAgB,OAAO0V,EAAMtG,KACjC,MAEF,KAAK,IACH,GAAY,SAARpP,EAAiB,OAAO0V,EAAMpG,MAClC,GAAY,QAARtP,EAAgB,OAAO0V,EAAMwc,KACjC,MAEF,KAAK,IACH,GAAY,SAARlyB,EAAiB,OAAO0V,EAAMyc,MAItC,OAAOzc,EAAMH,QAGf,SAAgB6c,EAAsB3c,GACpC,OAAQA,GACN,KAAKC,EAAMoP,SACX,KAAKpP,EAAM8a,GACX,KAAK9a,EAAM3P,YACX,KAAK2P,EAAMqR,QACX,KAAKrR,EAAMqb,OACX,KAAKrb,EAAMyb,KACX,KAAKzb,EAAM9I,IACX,KAAK8I,EAAM4O,IACX,KAAK5O,EAAM/O,WACX,KAAK+O,EAAM4b,GACX,KAAK5b,EAAM6b,MACX,KAAK7b,EAAM+b,OACX,KAAK/b,EAAMkT,UACX,KAAKlT,EAAM/T,KACX,KAAK+T,EAAMmP,SACX,KAAKnP,EAAM6O,IACX,KAAK7O,EAAMqc,KACX,KAAKrc,EAAMtG,KAAM,OAAO,EACxB,QAAS,OAAO,IAlSpB,SAAYsG,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAY4a,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4C17B,GAE1C,OADA2J,OAAO3J,EAAKsL,QACJtL,EAAK0L,WAAW,IACtB,KAAK,IAAY,MAAe,UAAR1L,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsC6gB,GACpC,OAAQA,GACN,KAAKC,EAAMqb,OAAQ,MAAO,SAC1B,KAAKrb,EAAM2b,GAAI,MAAO,KACtB,KAAK3b,EAAM/O,WAAY,MAAO,aAC9B,KAAK+O,EAAM1O,IAAK,MAAO,MACvB,KAAK0O,EAAMsc,OAAQ,MAAO,SAC1B,KAAK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yBACA,uBACA,yBACA,wBACA,oBAZF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAetB,SAAYC,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,mBAXF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAcxB,SAAYC,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BA/CF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAkDxB,SAAYE,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,sDACA,oDACA,sDACA,oDACA,sDACA,oDACA,uDA3GF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA8GnB,SAAYC,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iDACA,iDACA,iDACA,iDACA,qCA/KF,CAAY,EAAAA,WAAA,EAAAA,SAAQ,KAkLpB,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,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,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAxGc,IAwGVpS,EAAeW,WAAW,GAC5B,OAAOX,EAGX,OAASoS,EAAM,GACb,GA7Gc,IA6GVpS,EAAeW,WAAWyR,GAC5B,OAAOpS,EAAea,UAAU,EAAGuR,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BpS,EAAwB28G,GAClD,OAAI38G,EAAegL,WAAW,QACrBhL,EAEF+K,EACL2xG,EAAQC,GAAU,EAAAhmH,eAAiBqJ,IAKvC,a,8EC3GA,SAAkB48G,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B7nH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAM8nH,EAAS,GAAJ9nH,EACX,OAAO8nH,GAAM,IAAcA,GAAM,KACrB,IAAL9nH,GACK,IAALA,GACAA,EAAI,SAmLqBuK,EAnLYvK,GAoL9B,KAAOuK,EAAO,QACrBw9G,EAAmBx9G,EAAay9G,IAFzC,IAAkCz9G,GA/KlC,8BAAmCvK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAM8nH,EAAS,GAAJ9nH,EACX,OAAO8nH,GAAM,IAAcA,GAAM,KAC1B9nH,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBuK,EAzKYvK,GA0K7B,KAAOuK,EAAO,QACrBw9G,EAAmBx9G,EAAa09G,IAFzC,IAAiC19G,GArKjC,MAAMy9G,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBx9G,EAAWu7G,GACrC,GAAIv7G,EAAOu7G,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIoC,EACAC,EAHA1L,EAAK,EACLC,EAAKoJ,EAAIt6G,OAINixG,EAAK,EAAIC,GAAI,CAIlB,GAHAwL,EAAMzL,GAAOC,EAAKD,GAAO,IAEzB0L,EAASrC,EADToC,GAAc,EAANA,KAEM39G,GAAQA,GAAQu7G,EAAIoC,EAAM,GACtC,OAAO,EAEL39G,EAAO49G,EACTzL,EAAKwL,EAELzL,EAAKyL,EAAM,EAGf,OAAO,EAkBT,kBAAuBr8G,EAAcikC,GACnC,KAAOA,GAAS,GACdjkC,EAAGE,KALU,YAMb+jC,GAAS,EAEPA,GAAS,IACXjkC,EAAGE,KAVU,QAWb+jC,GAAS,GAEPA,GACFjkC,EAAGE,KAfU","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        range.source.normalizedPath +\n        \":\" +\n        range.line.toString() +\n        \":\" +\n        range.column.toString()\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString());\n    sb.push(\",\");\n    sb.push(range.column.toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString());\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,i32[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenCodesAtPos = assert(seenInSource.get(range.start));\n          if (seenCodesAtPos.includes(code)) return;\n          seenCodesAtPos.push(code);\n        } else {\n          seenInSource.set(range.start, [ code ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,i32[]>();\n        seenInSource.set(range.start, [ code ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var node = new TypeName();\n    node.kind = NodeKind.TYPENAME;\n    node.range = range;\n    node.identifier = name;\n    node.next = null;\n    return node;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var node = new NamedTypeNode();\n    node.kind = NodeKind.NAMEDTYPE;\n    node.range = range;\n    node.name = name;\n    node.typeArguments = typeArguments;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var node = new FunctionTypeNode();\n    node.kind = NodeKind.FUNCTIONTYPE;\n    node.range = range;\n    node.parameters = parameters;\n    node.returnType = returnType;\n    node.explicitThisType = explicitThisType;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var node = new TypeParameterNode();\n    node.kind = NodeKind.TYPEPARAMETER;\n    node.range = range;\n    node.name = name;\n    node.extendsType = extendsType;\n    node.defaultType = defaultType;\n    return node;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var node = new ParameterNode();\n    node.kind = NodeKind.PARAMETER;\n    node.range = range;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.parameterKind = kind;\n    return node;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var node = new DecoratorNode();\n    node.kind = NodeKind.DECORATOR;\n    node.range = range;\n    node.name = name;\n    node.arguments = args;\n    node.decoratorKind = DecoratorKind.fromNode(name);\n    return node;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.kind = NodeKind.COMMENT;\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = name;\n    node.isQuoted = isQuoted;\n    return node;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = \"\";\n    return node;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var node = new ArrayLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.range = range;\n    node.literalKind = LiteralKind.ARRAY;\n    node.elementExpressions = elements;\n    return node;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var node = new AssertionExpression();\n    node.kind = NodeKind.ASSERTION;\n    node.range = range;\n    node.assertionKind = assertionKind;\n    node.expression = expression;\n    node.toType = toType;\n    return node;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var node = new BinaryExpression();\n    node.kind = NodeKind.BINARY;\n    node.range = range;\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var node = new CallExpression();\n    node.kind = NodeKind.CALL;\n    node.range = range;\n    node.expression = expression;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var node = new ClassExpression();\n    node.kind = NodeKind.CLASS;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var node = new CommaExpression();\n    node.kind = NodeKind.COMMA;\n    node.range = range;\n    node.expressions = expressions;\n    return node;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var node = new ConstructorExpression();\n    node.kind = NodeKind.CONSTRUCTOR;\n    node.range = range;\n    node.text = \"constructor\";\n    return node;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var node = new ElementAccessExpression();\n    node.kind = NodeKind.ELEMENTACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.elementExpression = element;\n    return node;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var node = new FalseExpression();\n    node.kind = NodeKind.FALSE;\n    node.range = range;\n    node.text = \"false\";\n    return node;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var node = new FloatLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.FLOAT;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var node = new FunctionExpression();\n    node.kind = NodeKind.FUNCTION;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var node = new InstanceOfExpression();\n    node.kind = NodeKind.INSTANCEOF;\n    node.range = range;\n    node.expression = expression;\n    node.isType = isType;\n    return node;\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var node = new IntegerLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.INTEGER;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var node = new NewExpression();\n    node.kind = NodeKind.NEW;\n    node.range = range;\n    node.typeName = typeName;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var node = new NullExpression();\n    node.kind = NodeKind.NULL;\n    node.range = range;\n    node.text = \"null\";\n    return node;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var node = new ObjectLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.OBJECT;\n    node.range = range;\n    node.names = names;\n    node.values = values;\n    return node;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var node = new ParenthesizedExpression();\n    node.kind = NodeKind.PARENTHESIZED;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var node = new PropertyAccessExpression();\n    node.kind = NodeKind.PROPERTYACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.property = property;\n    return node;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var node = new RegexpLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.REGEXP;\n    node.range = range;\n    node.pattern = pattern;\n    node.patternFlags = flags;\n    return node;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var node = new TernaryExpression();\n    node.kind = NodeKind.TERNARY;\n    node.range = range;\n    node.condition = condition;\n    node.ifThen = ifThen;\n    node.ifElse = ifElse;\n    return node;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var node = new StringLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.STRING;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var node = new SuperExpression();\n    node.kind = NodeKind.SUPER;\n    node.range = range;\n    node.text = \"super\";\n    return node;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var node = new ThisExpression();\n    node.kind = NodeKind.THIS;\n    node.range = range;\n    node.text = \"this\";\n    return node;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var node = new TrueExpression();\n    node.kind = NodeKind.TRUE;\n    node.range = range;\n    node.text = \"true\";\n    return node;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var node = new UnaryPostfixExpression();\n    node.kind = NodeKind.UNARYPOSTFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var node = new UnaryPrefixExpression();\n    node.kind = NodeKind.UNARYPREFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var node = new BlockStatement();\n    node.kind = NodeKind.BLOCK;\n    node.range = range;\n    node.statements = statements;\n    return node;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var node = new BreakStatement();\n    node.kind = NodeKind.BREAK;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var node = new ClassDeclaration();\n    node.kind = NodeKind.CLASSDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = identifier;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.implementsTypes = implementsTypes;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var node = new ContinueStatement();\n    node.kind = NodeKind.CONTINUE;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var node = new DoStatement();\n    node.kind = NodeKind.DO;\n    node.range = range;\n    node.statement = statement;\n    node.condition = condition;\n    return node;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var node = new EmptyStatement();\n    node.kind = NodeKind.EMPTY;\n    node.range = range;\n    return node;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var node = new EnumDeclaration();\n    node.kind = NodeKind.ENUMDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.values = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var node = new EnumValueDeclaration();\n    node.kind = NodeKind.ENUMVALUEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.value = value;\n    return node;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var node = new ExportStatement();\n    node.kind = NodeKind.EXPORT;\n    node.range = range;\n    node.members = members;\n    node.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      node.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      node.internalPath = null;\n    }\n    node.isDeclare = isDeclare;\n    return node;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var node = new ExportDefaultStatement();\n    node.kind = NodeKind.EXPORTDEFAULT;\n    node.declaration = declaration;\n    node.range = range;\n    return node;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var node = new ExportImportStatement();\n    node.kind = NodeKind.EXPORTIMPORT;\n    node.range = range;\n    node.name = name;\n    node.externalName = externalName;\n    return node;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var node = new ExportMember();\n    node.kind = NodeKind.EXPORTMEMBER;\n    node.range = range;\n    node.localName = name;\n    if (!externalName) externalName = name;\n    node.exportedName = externalName;\n    return node;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var node = new ExpressionStatement();\n    node.kind = NodeKind.EXPRESSION;\n    node.range = expression.range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var node = new IfStatement();\n    node.kind = NodeKind.IF;\n    node.range = range;\n    node.condition = condition;\n    node.ifTrue = ifTrue;\n    node.ifFalse = ifFalse;\n    return node;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = decls;\n    node.namespaceName = null;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = null;\n    node.namespaceName = identifier;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var node = new ImportDeclaration();\n    node.kind = NodeKind.IMPORTDECLARATION;\n    node.range = range;\n    node.foreignName = foreignName;\n    if (!name) name = foreignName;\n    node.name = name;\n    return node;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var node = new InterfaceDeclaration();\n    node.kind = NodeKind.INTERFACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var node = new FieldDeclaration();\n    node.kind = NodeKind.FIELDDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var node = new ForStatement();\n    node.kind = NodeKind.FOR;\n    node.range = range;\n    node.initializer = initializer;\n    node.condition = condition;\n    node.incrementor = incrementor;\n    node.statement = statement;\n    return node;\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    var node = new ForOfStatement();\n    node.kind = NodeKind.FOROF;\n    node.range = range;\n    node.variable = variable;\n    node.iterable = iterable;\n    node.statement = statement;\n    return node;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var node = new FunctionDeclaration();\n    node.kind = NodeKind.FUNCTIONDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    node.arrowKind = arrowKind;\n    return node;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var node = new IndexSignatureDeclaration();\n    node.kind = NodeKind.INDEXSIGNATUREDECLARATION;\n    node.range = range;\n    node.keyType = keyType;\n    node.valueType = valueType;\n    node.flags = flags;\n    return node;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var node = new MethodDeclaration();\n    node.kind = NodeKind.METHODDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var node = new NamespaceDeclaration();\n    node.kind = NodeKind.NAMESPACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var node = new ReturnStatement();\n    node.kind = NodeKind.RETURN;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var node = new SwitchStatement();\n    node.kind = NodeKind.SWITCH;\n    node.range = range;\n    node.condition = condition;\n    node.cases = cases;\n    return node;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var node = new SwitchCase();\n    node.kind = NodeKind.SWITCHCASE;\n    node.range = range;\n    node.label = label;\n    node.statements = statements;\n    return node;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var node = new ThrowStatement();\n    node.kind = NodeKind.THROW;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var node = new TryStatement();\n    node.kind = NodeKind.TRY;\n    node.range = range;\n    node.statements = statements;\n    node.catchVariable = catchVariable;\n    node.catchStatements = catchStatements;\n    node.finallyStatements = finallyStatements;\n    return node;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var node = new TypeDeclaration();\n    node.kind = NodeKind.TYPEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.type = alias;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var node = new VariableStatement();\n    node.kind = NodeKind.VARIABLE;\n    node.range = range;\n    node.declarations = declarations;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var node = new VariableDeclaration();\n    node.kind = NodeKind.VARIABLEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators; // inherited\n    return node;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var node = new VoidStatement();\n    node.kind = NodeKind.VOID;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var node = new WhileStatement();\n    node.kind = NodeKind.WHILE;\n    node.range = range;\n    node.condition = condition;\n    node.statement = statement;\n    return node;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n            if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL,\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  /** Integer value. */\n  value: i64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.kind = NodeKind.SOURCE;\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n  variable: Statement;\n  /** Iterable expression being iterated. */\n  iterable: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Static array prototype reference. */\n  staticArrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` */\n  allocBufferInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, signature, null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    // Initialize only once\n    if (this.initialized) return;\n\n    this.initialized = true;\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonNames.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        // TODO: for (let [alias, name] of globalAliases) {\n        for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n          let alias = unchecked(_keys[i]);\n          let name = assert(globalAliases.get(alias));\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.staticArrayPrototype = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocBufferInstance = this.requireFunction(CommonNames.allocBuffer);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? assert(filesByName.get(foreignPath))\n         : filesByName.has(foreignPathAlt)\n         ? assert(filesByName.get(foreignPathAlt))\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.arguments;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n\n    // Remember extendees and mark overloaded methods virtual\n    var basePrototype: ClassPrototype  = base.prototype;\n    var thisPrototype = this.prototype;\n    assert(basePrototype != thisPrototype);\n    basePrototype.extendees.add(thisPrototype);\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _keys = Map_keys(baseInstanceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = _keys[i];\n            let member = assert(baseInstanceMembers.get(memberName));\n            if (thisInstanceMembers.has(memberName)) {\n              member.set(CommonFlags.VIRTUAL);\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field !== null && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    if (prototype == program.arrayPrototype) {\n      return this.getTypeArgumentsTo(program.arrayPrototype)![0];\n    }\n    if (prototype == program.i8ArrayPrototype) return Type.i8;\n    if (prototype == program.i16ArrayPrototype) return Type.i16;\n    if (prototype == program.i32ArrayPrototype) return Type.i32;\n    if (prototype == program.i64ArrayPrototype) return Type.i64;\n    if (prototype == program.u8ArrayPrototype) return Type.u8;\n    if (prototype == program.u8ClampedArrayPrototype) return Type.u8;\n    if (prototype == program.u16ArrayPrototype) return Type.u16;\n    if (prototype == program.u32ArrayPrototype) return Type.u32;\n    if (prototype == program.u64ArrayPrototype) return Type.u64;\n    if (prototype == program.f32ArrayPrototype) return Type.f32;\n    if (prototype == program.f64ArrayPrototype) return Type.f64;\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.is(TypeFlags.REFERENCE)) {\n            if ((current = fieldType.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = []\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) reusableState = null;\n    else state = new State();\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport enum NativeType {\n  None = 0 /* _BinaryenTypeNone */,\n  Unreachable = 1 /* _BinaryenTypeUnreachable */,\n  I32 = 2 /* _BinaryenTypeInt32 */,\n  I64 = 3 /* _BinaryenTypeInt64 */,\n  F32 = 4 /* _BinaryenTypeFloat32 */,\n  F64 = 5 /* _BinaryenTypeFloat64 */,\n  V128 = 6 /* _BinaryenTypeVec128 */,\n  Funcref = 7 /* _BinaryenTypeFuncref */,\n  Anyref = 8 /* _BinaryenTypeAnyref */,\n  Nullref = 9 /* _BinaryenTypeNullref */,\n  Exnref = 10 /* _BinaryenTypeExnref */,\n  Auto = -1 /* _BinaryenTypeAuto */\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  All = 511 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  NegI8x16 = 67 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 68 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 69 /* _BinaryenAllTrueVecI8x16 */,\n  NegI16x8 = 70 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 71 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 72 /* _BinaryenAllTrueVecI16x8 */,\n  NegI32x4 = 73 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 74 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 75 /* _BinaryenAllTrueVecI32x4 */,\n  NegI64x2 = 76 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 77 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 78 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 79 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 80 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 81 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 82 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 83 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 84 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 85 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 86 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 87 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 88 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 89 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 90 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 91 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 92 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 93 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 94 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 95 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 96 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 97 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 98 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 99 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 100 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  AddF64x2 = 162 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 163 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 164 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 165 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 166 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 167 /* _BinaryenMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 168 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 169 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 170 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 171 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 172 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: i64;\n\n  static create(buffer: Uint8Array, offset: i64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocPtrArray([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var ret = new BinaryModule();\n    ret.output = readBuffer(binaryPtr, binaryLen);\n    ret.sourceMap = readString(sourceMapPtr);\n    binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return ret;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocI32Array(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  Any = 2047 /* _BinaryenSideEffectAny */,\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var ptr = binaryen._malloc(u32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = u32s.length; i < k; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var ptr = binaryen._malloc(ptrs.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = ptrs.length; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: i32): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n  // return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    var cachedNullableType = this.cachedNullableType;\n    if (!cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      cachedNullableType.nonNullableType = this;\n      cachedNullableType.classReference = this.classReference;       // either a class reference\n      cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames !== null && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return assert(wrapperClasses.get(type));\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = assert(wrapperClasses.get(returnType));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return assert(members.get(propertyName)); // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          node.range\n        );\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return assert(wrapperClasses.get(intType));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return assert(wrapperClasses.get(fltType));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return assert(wrapperClasses.get(Type.bool));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Class[] = [];\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.push(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.includes(base)) return instance;\n    }\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var instanceMembers = instance.members;\n    if (!instanceMembers) instance.members = instanceMembers = new Map();\n\n    // Alias base members\n    var pendingClasses = this.resolveClassPending;\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.includes(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let baseMemberName = unchecked(_keys[i]);\n          let baseMember = assert(baseMembers.get(baseMemberName));\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = assert(baseMembers.get((<FieldPrototype>member).name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let field = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            field.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, field); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.nextMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n      if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          assert(instance.contextualTypeArguments),\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    var pendingIndex = pendingClasses.indexOf(instance);\n    assert(~pendingIndex); // must be pending\n    pendingClasses.splice(pendingIndex, 1);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    var derivedPendingClasses = new Array<Class>();\n    for (let i = 0, k = pendingClasses.length; i < k; ++i) {\n      let pending = pendingClasses[i];\n      if (instance == pending.base) derivedPendingClasses.push(pending);\n    }\n    for (let i = 0, k = derivedPendingClasses.length; i < k; ++i) {\n      this.finishResolveClass(derivedPendingClasses[i], reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 13,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ALLOCATES) { // can become conditional\n      if (otherFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (otherFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ALLOCATES) {\n      if (rightFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (rightFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n    var combinedFlags = new Array<LocalFlags>(maxLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n      let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n      let newFlags = leftFlags & rightFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (leftFlags & LocalFlags.RETAINED) {\n        if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (rightFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      combinedFlags[i] = newFlags;\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ALLOCATES)) sb.push(\"ALLOCATES\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ALLOCATES)) sb.push(\"CONDITIONALLY_ALLOCATES\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.Binaryen || (global.Binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonNames,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Static table start offset. */\n  tableBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    var module = Module.create();\n    this.module = module;\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    module.setFeatures(featureFlags);\n  }\n\n  initializeProgram(): void {\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize(this.options);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // check and perform this program initialization if it hasn't been done\n    this.initializeProgram();\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyLibraryFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    this.setupVirtualLookupTables();\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      ExportNames.memory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  private setupVirtualLookupTables(): void {\n    // TODO: :-)\n    var program = this.program;\n    var virtualCalls = this.virtualCalls;\n\n    // Virtual instance methods in the function table are potentially called virtually\n    var functionTable = this.functionTable;\n    var elementsByName = program.elementsByName;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instanceName = unchecked(functionTable[i]);\n      if (elementsByName.has(instanceName)) { // otherwise ~anonymous\n        let instance = assert(elementsByName.get(instanceName));\n        if (instance.is(CommonFlags.INSTANCE | CommonFlags.VIRTUAL)) {\n          assert(instance.kind == ElementKind.FUNCTION);\n          virtualCalls.add(<Function>instance);\n        }\n      }\n    }\n\n    // Inject a virtual lookup table into each function potentially called virtually\n    // TODO: for (let instance of virtualCalls.values()) {\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.warning(\n        DiagnosticCode.Function_0_is_possibly_called_virtually_which_is_not_yet_supported,\n        instance.identifierNode.range, instance.internalName\n      );\n    }\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureBuiltinArgumentsLength();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport((<Field>element).internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport((<Field>element).internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (instance) this.compileClass(instance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          assert(!getterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(getterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          assert(!setterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          let origInitExpr = initExpr;\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n          if (this.skippedAutoreleases.has(origInitExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n          }\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      let body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        body = module.block(\"vtable\", [ body ], getExpressionType(body));\n      }\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract function\n    } else if (instance.is(CommonFlags.ABSTRACT)) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n      this.virtualCalls.add(instance);\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitializationInConstructor(classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n            if (getterPrototype) {\n              assert(!getterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(getterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n            if (setterPrototype) {\n              assert(!setterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(setterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType))\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType))\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    if (!instance.is(CommonFlags.TRAMPOLINE) && instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      instance = this.ensureTrampoline(instance);\n    }\n    functionTable.push(instance.internalName);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        labelNode.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(statement.condition, Type.i32),\n          this.currentType\n        )\n      );\n      let condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(condition, Type.bool),\n          this.currentType\n        )\n      );\n      condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          stmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        if (hasSideEffects(condExpr)) {\n          return module.block(null, [\n            module.drop(condExpr),\n            this.compileStatement(ifTrue)\n          ]);\n        }\n        return this.compileStatement(ifTrue);\n      }\n      case ConditionKind.FALSE: {\n        if (hasSideEffects(condExpr)) {\n          return ifFalse\n            ? module.block(null, [\n                module.drop(condExpr),\n                this.compileStatement(ifFalse)\n              ])\n            : module.drop(condExpr);\n        }\n        return ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      if (elseTerminates && !thenTerminates) {\n        flow.inherit(thenFlow);\n      } else {\n        flow.inheritMutual(thenFlow, elseFlow);\n      }\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString()\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        if (initializerNode) {\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = assert(scopedLocals.get(name));\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.is(TypeFlags.POINTER) && !toType.is(TypeFlags.POINTER)) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f32PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f64PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    return this.makeAssignment(\n      target,\n      valueExpr,\n      this.currentType,\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode !== null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let instance = <Class>(<Property>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let instance = <Class>(<IndexSignature>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = instance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, instance.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = instance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, instance.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2);\n        let valueType = indexedSet.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(instance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          module.local_get(localIndex, type.toNativeType()),\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          module.global_get(global.internalName, nativeType),\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.flatten(stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression; // compileCallDirect may reset\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        signature = (<Local>target).type.signatureReference;\n        if (signature) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, (<Local>target).type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        signature = (<Global>target).type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, (<Global>target).type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        signature = type.signatureReference;\n        if (signature) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: asc can't see this yet\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var ctx = new BuiltinContext();\n    ctx.compiler = this;\n    ctx.prototype = prototype;\n    ctx.typeArguments = typeArguments;\n    ctx.operands = expression.arguments;\n    ctx.contextualType = contextualType;\n    ctx.reportNode = expression;\n    ctx.contextIsExact = false;\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonNames.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureBuiltinArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n      // TODO: Enable this once mutable globals are the default nearly everywhere.\n      // if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n      //   module.addGlobalExport(BuiltinNames.argumentsLength, ExportNames.argumentsLength);\n      // } else {\n        module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n          module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n        );\n        module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n      // }\n    }\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureBuiltinArgumentsLength();\n          return module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.ensureBuiltinArgumentsLength();\n    var expr = module.block(null, [\n      module.global_set(BuiltinNames.argumentsLength, // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.flatten(stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!instance || !this.compileFunction(instance)) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(instance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.block(null, [\n            module.drop(expr),\n            module.i32(1)\n          ], NativeType.I32);\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32((<Class>arrayInstance).id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = (<Class>arrayInstance).lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32((<Class>arrayInstance).id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype)![0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr: ExpressionRef;\n      if (expression) {\n        expr = module.precomputeExpression(\n          this.compileExpression(<Expression>expression, elementType,\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          )\n        );\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n        } else {\n          isStatic = false;\n        }\n      } else {\n        expr = this.makeZero(elementType);\n      }\n      values[i] = expr;\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression)\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression)\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.flatten(exprs, this.options.nativeSizeType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.unreachable();\n          if (!this.compileFunction(instance)) return module.unreachable();\n          this.currentType = instance.type;\n          return module.i32(this.ensureFunctionTableEntry(instance));\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = evaluateConditionKind(condExpr);\n    if (condKind == ConditionKind.TRUE) return this.compileExpression(ifThen, ctxType);\n    if (condKind == ConditionKind.FALSE) return this.compileExpression(ifElse, ctxType);\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(codeLocation.range.line),\n          module.i32(codeLocation.range.column)\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Evaluates the kind of a boolean condition from its expression. */\nfunction evaluateConditionKind(expr: ExpressionRef): ConditionKind {\n  assert(getExpressionType(expr) == NativeType.I32 || getExpressionType(expr) == NativeType.Unreachable);\n  if (getExpressionId(expr) == ExpressionId.Const) {\n    return getConstValueI32(expr)\n      ? ConditionKind.TRUE\n      : ConditionKind.FALSE;\n  }\n  return ConditionKind.UNKNOWN;\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects,\n  createType\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  /** Compiler reference. */\n  compiler: Compiler;\n  /** Prototype being called. */\n  prototype: FunctionPrototype;\n  /** Provided type arguments. */\n  typeArguments: Type[] | null;\n  /** Provided operands. */\n  operands: Expression[];\n  /** Contextual type. */\n  contextualType: Type;\n  /** Respective call expression. */\n  reportNode: CallExpression;\n  /** Whether originating from inline assembly. */\n  contextIsExact: bool;\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.FLOAT) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type == Type.bool ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.SIGNED) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      let stringInstance = compiler.program.stringInstance;\n      if (stringInstance !== null && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.signatureReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classType = type.classReference;\n  if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    if (\n      operands[0].kind != NodeKind.LITERAL ||\n      (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n    ) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>operands[0]).value;\n    let classMembers = classType.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      operands[0].range, classType.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classType.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.is(TypeFlags.REFERENCE)) {\n    let classReference = resultType.classReference;\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.signatureReference;\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        value = \"Anyref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.ANYREF: { value = \"anyref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let signatureReference = type.signatureReference;\n    if (signatureReference) {\n      return module.i32(signatureReference.id);\n    }\n    let classReference = type.classReference;\n    if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      return module.i32(classReference.id);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(0)\n            ], NativeType.I32)\n          : module.i32(0);\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(1)\n            ], NativeType.I32)\n          : module.i32(1);\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (operands.length == 4) {\n    immAlign = evaluateImmediateOffset(operands[3], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[3].range, \"Alignment\"\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType // ^\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // if the assertion can be proven statically, omit it\n  if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n    switch (getExpressionType(arg0)) {\n      case NativeType.I32: {\n        if (getConstValueI32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.I64: {\n        if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        if (getConstValueF32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        if (getConstValueF64(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // return ifTrueish if assertions are disabled\n  if (compiler.options.noAssert) {\n    if (contextualType == Type.void) { // simplify if dropped anyway\n      compiler.currentType = Type.void;\n      return module.nop();\n    }\n    return arg0;\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    ctx.reportNode.typeArgumentsRange\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.classReference;\n  if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI8(getConstValueI32(expr), bytes, i);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI16(getConstValueI32(expr), bytes, i << 1);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI32(getConstValueI32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I64);\n      let off = i << 3;\n      writeI32(getConstValueI64Low(expr), bytes, off);\n      writeI32(getConstValueI64High(expr), bytes, off + 4);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F32);\n      writeF32(getConstValueF32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F64);\n      writeF64(getConstValueF64(expr), bytes, i << 3);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(argN) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(argN) == NativeType.I32);\n          let idx = getConstValueI32(argN);\n          if (idx < 0 || idx > maxIdx) {\n            compiler.error(\n              DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n              operand.range, \"Lane index\", \"0\", maxIdx.toString()\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.is(TypeFlags.INTEGER | TypeFlags.VALUE)) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Function_0_is_possibly_called_virtually_which_is_not_yet_supported = 104,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Function '{0}' is possibly called virtually, which is not yet supported.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && initializer !== null) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n        type = type!; // FIXME: WHY?\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      returnType = returnType!; // FIXME: WHY?\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      returnType = returnType!; // FIXME: WHY?\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators !== null && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        returnType = returnType!; // FIXME: WHY?\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT)) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && ((flags & CommonFlags.STATIC) != 0 || isInterface || initializer !== null)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        inner = inner!; // FIXME: WHY?\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = expr!; // FIXME: WHY?\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = expr!; // FIXME: WHY?\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n            expr = expr!; // FIXME: WHY?\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element) && !element.is(CommonFlags.INSTANCE)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let value = <EnumValue>member;\n          let isConst = value.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(value.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(value.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let value = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(value.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(value.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program, options: Options): void {\n  program.initialize(options);\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nimport * as util from \"./util/index\";\nexport { util };\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\nexport function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    // TODO: for (let v of original) {\n    for (let _values = Set_values(original), i = 0, k = _values.length; i < k; ++i) {\n      let v = unchecked(_values[i]);\n      cloned.add(v);\n    }\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n"],"sourceRoot":""}