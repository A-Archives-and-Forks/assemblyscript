{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","seen","has","seenInSource","seenCodesAtPos","includes","set","withRange","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","node","TypeName","kind","TYPENAME","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","NAMEDTYPE","parameters","returnType","explicitThisType","FunctionTypeNode","FUNCTIONTYPE","createNamedType","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","TYPEPARAMETER","type","initializer","ParameterNode","PARAMETER","parameterKind","args","DecoratorNode","DECORATOR","arguments","decoratorKind","fromNode","CommentNode","COMMENT","commentKind","isQuoted","IdentifierExpression","IDENTIFIER","elements","ArrayLiteralExpression","LITERAL","literalKind","ARRAY","elementExpressions","assertionKind","expression","toType","AssertionExpression","ASSERTION","operator","left","right","BinaryExpression","BINARY","typeArgs","CallExpression","CALL","declaration","ClassExpression","CLASS","expressions","CommaExpression","COMMA","ConstructorExpression","CONSTRUCTOR","element","ElementAccessExpression","ELEMENTACCESS","elementExpression","FalseExpression","FALSE","FloatLiteralExpression","FLOAT","FunctionExpression","FUNCTION","isType","InstanceOfExpression","INSTANCEOF","IntegerLiteralExpression","INTEGER","typeName","NewExpression","NEW","NullExpression","NULL","names","values","ObjectLiteralExpression","OBJECT","ParenthesizedExpression","PARENTHESIZED","PropertyAccessExpression","PROPERTYACCESS","pattern","flags","RegexpLiteralExpression","REGEXP","patternFlags","condition","ifThen","ifElse","TernaryExpression","TERNARY","StringLiteralExpression","STRING","SuperExpression","SUPER","ThisExpression","THIS","TrueExpression","TRUE","operand","UnaryPostfixExpression","UNARYPOSTFIX","UnaryPrefixExpression","UNARYPREFIX","statements","BlockStatement","BLOCK","label","BreakStatement","BREAK","typeParameters","implementsTypes","members","decorators","ClassDeclaration","CLASSDECLARATION","ContinueStatement","CONTINUE","statement","DoStatement","DO","EmptyStatement","EnumDeclaration","ENUMDECLARATION","EnumValueDeclaration","ENUMVALUEDECLARATION","path","isDeclare","ExportStatement","EXPORT","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","EXPORTDEFAULT","externalName","ExportImportStatement","EXPORTIMPORT","ExportMember","EXPORTMEMBER","localName","exportedName","ExpressionStatement","EXPRESSION","ifTrue","ifFalse","IfStatement","IF","decls","ImportStatement","IMPORT","declarations","namespaceName","foreignName","ImportDeclaration","IMPORTDECLARATION","InterfaceDeclaration","INTERFACEDECLARATION","FieldDeclaration","FIELDDECLARATION","incrementor","ForStatement","FOR","variable","iterable","ForOfStatement","FOROF","signature","body","arrowKind","FunctionDeclaration","FUNCTIONDECLARATION","keyType","valueType","IndexSignatureDeclaration","INDEXSIGNATUREDECLARATION","MethodDeclaration","METHODDECLARATION","NamespaceDeclaration","NAMESPACEDECLARATION","ReturnStatement","RETURN","cases","SwitchStatement","SWITCH","SwitchCase","SWITCHCASE","ThrowStatement","THROW","catchVariable","catchStatements","finallyStatements","TryStatement","TRY","alias","TypeDeclaration","TYPEDECLARATION","VariableStatement","VARIABLE","VariableDeclaration","VARIABLEDECLARATION","VoidStatement","VOID","WhileStatement","WHILE","changetype","TypeNode","typeParameterNodes","namedTypeNode","typeArgumentNodes","k","hasGenericComponent","functionTypeNode","parameterNodes","ParameterKind","implicitFieldDeclaration","NONE","flag","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","CommentKind","Expression","LiteralExpression","AssertionKind","numTypeArguments","Range","numArguments","UnaryExpression","Statement","super","debugInfoIndex","exportPaths","SOURCE","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","parameterIndex","ArrowKind","createFunctionDeclaration","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","Token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","initialized","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","unchecked","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","firstChar","parseInt","arrayPrototype","staticArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocBufferInstance","allocArrayInstance","_values","Map_values","USER_ENTRY","markModuleExports","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","propertyPrototype","getterPrototype","setterPrototype","PROPERTY","FIELD","staticMembers","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","declaredElements","DeclaredElement","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","inSelf","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extendees","extends","basePtototype","Class","INTERFACE","base","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","isBuiltinArray","lengthField","thisInstanceMembers","baseInstanceMembers","VIRTUAL","nextPrototype","inheritedTypeArguments","baseName","baseType","target","uncheckedOverload","overload","fieldName","field","baseOffset","fieldInstance","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","fieldType","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","NativeType","FeatureFlags","ExpressionId","SideEffects","UnaryOp","BinaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","Auto","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","None","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","Unreachable","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","allocI32Array","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","getSideEffects","features","All","_BinaryenExpressionGetSideEffects","u8s","numValues","i32s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","ch","fromCharCodes","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","auto","isize64","isize32","usize64","usize32","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","indexedGet","resolvedType","baseInstance","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","functionPrototype","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","pendingClasses","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","finishResolveClass","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pendingIndex","indexOf","splice","derivedPendingClasses","pending","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","Exnref","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","functionInstance","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_min","v128_max","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","ensureSmallIntegerWrap","binary","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","currentFlow","temp1","temp2","XorI32","AddI32","local_tee","local_get","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","immAlign","contextualType","outType","numOperands","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","builtin_store","contextIsExact","inType","convertExpression","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","precomputeExpression","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","hasSideEffects","drop","temp","SubF32","SubF64","makeIsTrueish","host","MemorySize","MemoryGrow","compileFunction","compileCallDirect","isChangeableTo","Type_0_cannot_be_changed_to_type_1","makeAbort","if","alreadyUnchecked","unset","compileInstantiate","off","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","exprs","COMPILED","global_get","addFunction","nativeSizeSize","blocks","outer","addBlockWithSwitch","SubI64","SubI32","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","addMemorySegment","addGlobal","Binaryen","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","importMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","virtualCalls","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","setFeatures","compile","initialize","initializeProgram","startFunctionInstance","startFunctionBody","currentBody","files","compileFile","compileExports","startIsEmpty","unshift","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Set_values","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","setupVirtualLookupTables","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","Function_0_is_possibly_called_virtually_which_is_not_yet_supported","elementName","ensureModuleExport","prefix","functionInstances","fullName","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureTrampoline","ensureBuiltinArgumentsLength","setter","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","origInitExpr","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","makeZero","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","An_implementation_cannot_be_declared_in_ambient_contexts","local_set","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","makeAllocation","makeFieldInitializationInConstructor","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureConstructor","compileField","compileProperty","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","byteLength","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateConditionKind","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","thenTerminates","elseStmts","elseFlow","elseTerminates","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","compileAssignment","AddF32","AddF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI32","OrI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","tempThis","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","functionTarget","compileCallIndirect","BuiltinContext","fn","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","Optional_parameter_must_have_an_initializer","newExpr","oldExpr","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","theOperands","isCallImport","allOptionalsAreConstant","compilesToConst","makeCallIndirect","numExpressions","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","nativeArrayType","dataStartMember","bufferSize","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","baseClass","baseCtor","allocExpr","parentEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","ref_is_null","thisLocalIndex","codeLocation","messageArg","filenameArg","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","i64_to_string","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","x","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","util","readI32","readI64","valueI64","cloned","v","overrides","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal"],"mappings":"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A,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYqb,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4C78B,GAE1C,OADAiK,OAAOjK,EAAK4L,QACJ5L,EAAKgM,WAAW,IACtB,KAAK,IAAY,MAAe,UAARhM,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsCuhB,GACpC,OAAQA,GACN,KAAKC,EAAM8b,OAAQ,MAAO,SAC1B,KAAK9b,EAAMoc,GAAI,MAAO,KACtB,KAAKpc,EAAMrP,WAAY,MAAO,aAC9B,KAAKqP,EAAMhP,IAAK,MAAO,MACvB,KAAKgP,EAAM+c,OAAQ,MAAO,SAC1B,KAAK/c,EAAM1G,K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CA,yBACA,wBACA,oBAZF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAetB,SAAYC,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,oBAZF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAexB,SAAYC,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BA/CF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAkDxB,SAAYE,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,sDACA,oDACA,sDACA,oDACA,sDACA,oDACA,uDA3GF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA8GnB,SAAYC,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iDACA,iDACA,iDACA,iDACA,qCA/KF,CAAY,EAAAA,WAAA,EAAAA,SAAQ,KAkLpB,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,2CA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BAAgBvC,IAAS,EAAAvC,aAAamP,MACjC,EAAA8e,iBAAiB1rB,GACpB,EACA,EAEC,I,8ECj+TT,SAAYl9B,GACV,2CACA,mDACA,yCACA,6DACA,iJACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,6IACA,uIACA,uIACA,+GACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MApJF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAwJ1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,2EACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAA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,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4BzpH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAM0pH,EAAS,GAAJ1pH,EACX,OAAO0pH,GAAM,IAAcA,GAAM,KACrB,IAAL1pH,GACK,IAALA,GACAA,EAAI,SAmLqB6K,EAnLY7K,GAoL9B,KAAO6K,EAAO,QACrB8+G,EAAmB9+G,EAAa++G,IAFzC,IAAkC/+G,GA/KlC,8BAAmC7K,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAM0pH,EAAS,GAAJ1pH,EACX,OAAO0pH,GAAM,IAAcA,GAAM,KAC1B1pH,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB6K,EAzKY7K,GA0K7B,KAAO6K,EAAO,QACrB8+G,EAAmB9+G,EAAag/G,IAFzC,IAAiCh/G,GArKjC,MAAM++G,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmB9+G,EAAW48G,GACrC,GAAI58G,EAAO48G,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIqC,EACAC,EAHA3L,EAAK,EACLC,EAAKoJ,EAAI37G,OAINsyG,EAAK,EAAIC,GAAI,CAIlB,GAHAyL,EAAM1L,GAAOC,EAAKD,GAAO,IAEzB2L,EAAStC,EADTqC,GAAc,EAANA,KAEMj/G,GAAQA,GAAQ48G,EAAIqC,EAAM,GACtC,OAAO,EAELj/G,EAAOk/G,EACT1L,EAAKyL,EAEL1L,EAAK0L,EAAM,EAGf,OAAO,EAkBT,kBAAuB39G,EAAc6kC,GACnC,KAAOA,GAAS,GACd7kC,EAAGE,KALU,YAMb2kC,GAAS,EAEPA,GAAS,IACX7kC,EAAGE,KAVU,QAWb2kC,GAAS,GAEPA,GACF7kC,EAAGE,KAfU","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        range.source.normalizedPath +\n        \":\" +\n        range.line.toString() +\n        \":\" +\n        range.column.toString()\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString());\n    sb.push(\",\");\n    sb.push(range.column.toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString());\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,i32[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenCodesAtPos = assert(seenInSource.get(range.start));\n          if (seenCodesAtPos.includes(code)) return;\n          seenCodesAtPos.push(code);\n        } else {\n          seenInSource.set(range.start, [ code ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,i32[]>();\n        seenInSource.set(range.start, [ code ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var node = new TypeName();\n    node.kind = NodeKind.TYPENAME;\n    node.range = range;\n    node.identifier = name;\n    node.next = null;\n    return node;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var node = new NamedTypeNode();\n    node.kind = NodeKind.NAMEDTYPE;\n    node.range = range;\n    node.name = name;\n    node.typeArguments = typeArguments;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var node = new FunctionTypeNode();\n    node.kind = NodeKind.FUNCTIONTYPE;\n    node.range = range;\n    node.parameters = parameters;\n    node.returnType = returnType;\n    node.explicitThisType = explicitThisType;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var node = new TypeParameterNode();\n    node.kind = NodeKind.TYPEPARAMETER;\n    node.range = range;\n    node.name = name;\n    node.extendsType = extendsType;\n    node.defaultType = defaultType;\n    return node;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var node = new ParameterNode();\n    node.kind = NodeKind.PARAMETER;\n    node.range = range;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.parameterKind = kind;\n    return node;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var node = new DecoratorNode();\n    node.kind = NodeKind.DECORATOR;\n    node.range = range;\n    node.name = name;\n    node.arguments = args;\n    node.decoratorKind = DecoratorKind.fromNode(name);\n    return node;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.kind = NodeKind.COMMENT;\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = name;\n    node.isQuoted = isQuoted;\n    return node;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = \"\";\n    return node;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var node = new ArrayLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.range = range;\n    node.literalKind = LiteralKind.ARRAY;\n    node.elementExpressions = elements;\n    return node;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var node = new AssertionExpression();\n    node.kind = NodeKind.ASSERTION;\n    node.range = range;\n    node.assertionKind = assertionKind;\n    node.expression = expression;\n    node.toType = toType;\n    return node;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var node = new BinaryExpression();\n    node.kind = NodeKind.BINARY;\n    node.range = range;\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var node = new CallExpression();\n    node.kind = NodeKind.CALL;\n    node.range = range;\n    node.expression = expression;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var node = new ClassExpression();\n    node.kind = NodeKind.CLASS;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var node = new CommaExpression();\n    node.kind = NodeKind.COMMA;\n    node.range = range;\n    node.expressions = expressions;\n    return node;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var node = new ConstructorExpression();\n    node.kind = NodeKind.CONSTRUCTOR;\n    node.range = range;\n    node.text = \"constructor\";\n    return node;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var node = new ElementAccessExpression();\n    node.kind = NodeKind.ELEMENTACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.elementExpression = element;\n    return node;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var node = new FalseExpression();\n    node.kind = NodeKind.FALSE;\n    node.range = range;\n    node.text = \"false\";\n    return node;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var node = new FloatLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.FLOAT;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var node = new FunctionExpression();\n    node.kind = NodeKind.FUNCTION;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var node = new InstanceOfExpression();\n    node.kind = NodeKind.INSTANCEOF;\n    node.range = range;\n    node.expression = expression;\n    node.isType = isType;\n    return node;\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var node = new IntegerLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.INTEGER;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var node = new NewExpression();\n    node.kind = NodeKind.NEW;\n    node.range = range;\n    node.typeName = typeName;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var node = new NullExpression();\n    node.kind = NodeKind.NULL;\n    node.range = range;\n    node.text = \"null\";\n    return node;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var node = new ObjectLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.OBJECT;\n    node.range = range;\n    node.names = names;\n    node.values = values;\n    return node;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var node = new ParenthesizedExpression();\n    node.kind = NodeKind.PARENTHESIZED;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var node = new PropertyAccessExpression();\n    node.kind = NodeKind.PROPERTYACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.property = property;\n    return node;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var node = new RegexpLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.REGEXP;\n    node.range = range;\n    node.pattern = pattern;\n    node.patternFlags = flags;\n    return node;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var node = new TernaryExpression();\n    node.kind = NodeKind.TERNARY;\n    node.range = range;\n    node.condition = condition;\n    node.ifThen = ifThen;\n    node.ifElse = ifElse;\n    return node;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var node = new StringLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.STRING;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var node = new SuperExpression();\n    node.kind = NodeKind.SUPER;\n    node.range = range;\n    node.text = \"super\";\n    return node;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var node = new ThisExpression();\n    node.kind = NodeKind.THIS;\n    node.range = range;\n    node.text = \"this\";\n    return node;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var node = new TrueExpression();\n    node.kind = NodeKind.TRUE;\n    node.range = range;\n    node.text = \"true\";\n    return node;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var node = new UnaryPostfixExpression();\n    node.kind = NodeKind.UNARYPOSTFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var node = new UnaryPrefixExpression();\n    node.kind = NodeKind.UNARYPREFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var node = new BlockStatement();\n    node.kind = NodeKind.BLOCK;\n    node.range = range;\n    node.statements = statements;\n    return node;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var node = new BreakStatement();\n    node.kind = NodeKind.BREAK;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var node = new ClassDeclaration();\n    node.kind = NodeKind.CLASSDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = identifier;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.implementsTypes = implementsTypes;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var node = new ContinueStatement();\n    node.kind = NodeKind.CONTINUE;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var node = new DoStatement();\n    node.kind = NodeKind.DO;\n    node.range = range;\n    node.statement = statement;\n    node.condition = condition;\n    return node;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var node = new EmptyStatement();\n    node.kind = NodeKind.EMPTY;\n    node.range = range;\n    return node;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var node = new EnumDeclaration();\n    node.kind = NodeKind.ENUMDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.values = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var node = new EnumValueDeclaration();\n    node.kind = NodeKind.ENUMVALUEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.value = value;\n    return node;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var node = new ExportStatement();\n    node.kind = NodeKind.EXPORT;\n    node.range = range;\n    node.members = members;\n    node.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      node.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      node.internalPath = null;\n    }\n    node.isDeclare = isDeclare;\n    return node;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var node = new ExportDefaultStatement();\n    node.kind = NodeKind.EXPORTDEFAULT;\n    node.declaration = declaration;\n    node.range = range;\n    return node;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var node = new ExportImportStatement();\n    node.kind = NodeKind.EXPORTIMPORT;\n    node.range = range;\n    node.name = name;\n    node.externalName = externalName;\n    return node;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var node = new ExportMember();\n    node.kind = NodeKind.EXPORTMEMBER;\n    node.range = range;\n    node.localName = name;\n    if (!externalName) externalName = name;\n    node.exportedName = externalName;\n    return node;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var node = new ExpressionStatement();\n    node.kind = NodeKind.EXPRESSION;\n    node.range = expression.range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var node = new IfStatement();\n    node.kind = NodeKind.IF;\n    node.range = range;\n    node.condition = condition;\n    node.ifTrue = ifTrue;\n    node.ifFalse = ifFalse;\n    return node;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = decls;\n    node.namespaceName = null;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = null;\n    node.namespaceName = identifier;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var node = new ImportDeclaration();\n    node.kind = NodeKind.IMPORTDECLARATION;\n    node.range = range;\n    node.foreignName = foreignName;\n    if (!name) name = foreignName;\n    node.name = name;\n    return node;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var node = new InterfaceDeclaration();\n    node.kind = NodeKind.INTERFACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var node = new FieldDeclaration();\n    node.kind = NodeKind.FIELDDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var node = new ForStatement();\n    node.kind = NodeKind.FOR;\n    node.range = range;\n    node.initializer = initializer;\n    node.condition = condition;\n    node.incrementor = incrementor;\n    node.statement = statement;\n    return node;\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    var node = new ForOfStatement();\n    node.kind = NodeKind.FOROF;\n    node.range = range;\n    node.variable = variable;\n    node.iterable = iterable;\n    node.statement = statement;\n    return node;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var node = new FunctionDeclaration();\n    node.kind = NodeKind.FUNCTIONDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    node.arrowKind = arrowKind;\n    return node;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var node = new IndexSignatureDeclaration();\n    node.kind = NodeKind.INDEXSIGNATUREDECLARATION;\n    node.range = range;\n    node.keyType = keyType;\n    node.valueType = valueType;\n    node.flags = flags;\n    return node;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var node = new MethodDeclaration();\n    node.kind = NodeKind.METHODDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var node = new NamespaceDeclaration();\n    node.kind = NodeKind.NAMESPACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var node = new ReturnStatement();\n    node.kind = NodeKind.RETURN;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var node = new SwitchStatement();\n    node.kind = NodeKind.SWITCH;\n    node.range = range;\n    node.condition = condition;\n    node.cases = cases;\n    return node;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var node = new SwitchCase();\n    node.kind = NodeKind.SWITCHCASE;\n    node.range = range;\n    node.label = label;\n    node.statements = statements;\n    return node;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var node = new ThrowStatement();\n    node.kind = NodeKind.THROW;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var node = new TryStatement();\n    node.kind = NodeKind.TRY;\n    node.range = range;\n    node.statements = statements;\n    node.catchVariable = catchVariable;\n    node.catchStatements = catchStatements;\n    node.finallyStatements = finallyStatements;\n    return node;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var node = new TypeDeclaration();\n    node.kind = NodeKind.TYPEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.type = alias;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var node = new VariableStatement();\n    node.kind = NodeKind.VARIABLE;\n    node.range = range;\n    node.declarations = declarations;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var node = new VariableDeclaration();\n    node.kind = NodeKind.VARIABLEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators; // inherited\n    return node;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var node = new VoidStatement();\n    node.kind = NodeKind.VOID;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var node = new WhileStatement();\n    node.kind = NodeKind.WHILE;\n    node.range = range;\n    node.condition = condition;\n    node.statement = statement;\n    return node;\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        // @operator.binary, @operator.prefix, @operator.postfix\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL,\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  /** Integer value. */\n  value: i64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.kind = NodeKind.SOURCE;\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n  variable: Statement;\n  /** Iterable expression being iterated. */\n  iterable: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// ├─File                     File, analogous to Source in the AST\n// └─FunctionTarget           Indirectly called function helper (typed)\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Static array prototype reference. */\n  staticArrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` */\n  allocBufferInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, signature, null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    // Initialize only once\n    if (this.initialized) return;\n\n    this.initialized = true;\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonNames.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, basePrototype.identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = assert(globalAliases.get(alias));\n        if (!name.length) continue; // explicitly disabled\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.staticArrayPrototype = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocBufferInstance = this.requireFunction(CommonNames.allocBuffer);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? assert(filesByName.get(foreignPath))\n         : filesByName.has(foreignPathAlt)\n         ? assert(filesByName.get(foreignPathAlt))\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.arguments;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n\n    // Remember extendees and mark overloaded methods virtual\n    var basePrototype: ClassPrototype  = base.prototype;\n    var thisPrototype = this.prototype;\n    assert(basePrototype != thisPrototype);\n    basePrototype.extendees.add(thisPrototype);\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _keys = Map_keys(baseInstanceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = _keys[i];\n            let member = assert(baseInstanceMembers.get(memberName));\n            if (thisInstanceMembers.has(memberName)) {\n              member.set(CommonFlags.VIRTUAL);\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      switch (fieldInstance.type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    if (prototype == program.arrayPrototype) {\n      return this.getTypeArgumentsTo(program.arrayPrototype)![0];\n    }\n    if (prototype == program.i8ArrayPrototype) return Type.i8;\n    if (prototype == program.i16ArrayPrototype) return Type.i16;\n    if (prototype == program.i32ArrayPrototype) return Type.i32;\n    if (prototype == program.i64ArrayPrototype) return Type.i64;\n    if (prototype == program.u8ArrayPrototype) return Type.u8;\n    if (prototype == program.u8ClampedArrayPrototype) return Type.u8;\n    if (prototype == program.u16ArrayPrototype) return Type.u16;\n    if (prototype == program.u32ArrayPrototype) return Type.u32;\n    if (prototype == program.u64ArrayPrototype) return Type.u64;\n    if (prototype == program.f32ArrayPrototype) return Type.f32;\n    if (prototype == program.f64ArrayPrototype) return Type.f64;\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.is(TypeFlags.REFERENCE)) {\n            if ((current = fieldType.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = []\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) reusableState = null;\n    else state = new State();\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport enum NativeType {\n  None = 0 /* _BinaryenTypeNone */,\n  Unreachable = 1 /* _BinaryenTypeUnreachable */,\n  I32 = 2 /* _BinaryenTypeInt32 */,\n  I64 = 3 /* _BinaryenTypeInt64 */,\n  F32 = 4 /* _BinaryenTypeFloat32 */,\n  F64 = 5 /* _BinaryenTypeFloat64 */,\n  V128 = 6 /* _BinaryenTypeVec128 */,\n  Funcref = 7 /* _BinaryenTypeFuncref */,\n  Anyref = 8 /* _BinaryenTypeAnyref */,\n  Nullref = 9 /* _BinaryenTypeNullref */,\n  Exnref = 10 /* _BinaryenTypeExnref */,\n  Auto = -1 /* _BinaryenTypeAuto */\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  All = 1023 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  NegI8x16 = 67 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 68 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 69 /* _BinaryenAllTrueVecI8x16 */,\n  NegI16x8 = 70 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 71 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 72 /* _BinaryenAllTrueVecI16x8 */,\n  NegI32x4 = 73 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 74 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 75 /* _BinaryenAllTrueVecI32x4 */,\n  NegI64x2 = 76 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 77 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 78 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 79 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 80 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 81 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 82 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 83 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 84 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 85 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 86 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 87 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 88 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 89 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 90 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 91 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 92 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 93 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 94 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 95 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 96 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 97 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 98 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 99 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 100 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  AddF64x2 = 162 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 163 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 164 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 165 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 166 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 167 /* _BinaryenMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 168 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 169 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 170 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 171 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 172 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: i64;\n\n  static create(buffer: Uint8Array, offset: i64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocPtrArray([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var ret = new BinaryModule();\n    ret.output = readBuffer(binaryPtr, binaryLen);\n    ret.sourceMap = readString(sourceMapPtr);\n    binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return ret;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocI32Array(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  Any = 2047 /* _BinaryenSideEffectAny */,\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var ptr = binaryen._malloc(u32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = u32s.length; i < k; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var ptr = binaryen._malloc(ptrs.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = ptrs.length; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: i32): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n  // return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    var cachedNullableType = this.cachedNullableType;\n    if (!cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      cachedNullableType.nonNullableType = this;\n      cachedNullableType.classReference = this.classReference;       // either a class reference\n      cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames !== null && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) {\n      return (<FunctionTarget>element).type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return assert(wrapperClasses.get(type));\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, variableLikeElement.type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterInstance = this.resolveFunction( // reports\n          assert(propertyPrototype.getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = assert(wrapperClasses.get(returnType));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return assert(members.get(propertyName)); // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      while (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          node.range\n        );\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return assert(wrapperClasses.get(intType));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return assert(wrapperClasses.get(fltType));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return assert(wrapperClasses.get(Type.bool));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Class[] = [];\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.push(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.includes(base)) return instance;\n    }\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var instanceMembers = instance.members;\n    if (!instanceMembers) instance.members = instanceMembers = new Map();\n\n    // Alias base members\n    var pendingClasses = this.resolveClassPending;\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.includes(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let baseMemberName = unchecked(_keys[i]);\n          let baseMember = assert(baseMembers.get(baseMemberName));\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>member;\n            let propertyInstance = new Property(propertyPrototype, instance);\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.nextMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n      if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          assert(instance.contextualTypeArguments),\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    var pendingIndex = pendingClasses.indexOf(instance);\n    assert(~pendingIndex); // must be pending\n    pendingClasses.splice(pendingIndex, 1);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    var derivedPendingClasses = new Array<Class>();\n    for (let i = 0, k = pendingClasses.length; i < k; ++i) {\n      let pending = pendingClasses[i];\n      if (instance == pending.base) derivedPendingClasses.push(pending);\n    }\n    for (let i = 0, k = derivedPendingClasses.length; i < k; ++i) {\n      this.finishResolveClass(derivedPendingClasses[i], reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 13,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ALLOCATES) { // can become conditional\n      if (otherFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (otherFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ALLOCATES) {\n      if (rightFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (rightFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ALLOCATES)) sb.push(\"ALLOCATES\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ALLOCATES)) sb.push(\"CONDITIONALLY_ALLOCATES\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects,\n  createType\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  /** Compiler reference. */\n  compiler: Compiler;\n  /** Prototype being called. */\n  prototype: FunctionPrototype;\n  /** Provided type arguments. */\n  typeArguments: Type[] | null;\n  /** Provided operands. */\n  operands: Expression[];\n  /** Contextual type. */\n  contextualType: Type;\n  /** Respective call expression. */\n  reportNode: CallExpression;\n  /** Whether originating from inline assembly. */\n  contextIsExact: bool;\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.FLOAT) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type == Type.bool ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.SIGNED) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      let stringInstance = compiler.program.stringInstance;\n      if (stringInstance !== null && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.signatureReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classType = type.classReference;\n  if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classType.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classType.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classType.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.is(TypeFlags.REFERENCE)) {\n    let classReference = resultType.classReference;\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.signatureReference;\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        value = \"Anyref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.ANYREF: { value = \"anyref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let signatureReference = type.signatureReference;\n    if (signatureReference) {\n      return module.i32(signatureReference.id);\n    }\n    let classReference = type.classReference;\n    if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      return module.i32(classReference.id);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(0)\n            ], NativeType.I32)\n          : module.i32(0);\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(1)\n            ], NativeType.I32)\n          : module.i32(1);\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (operands.length == 4) {\n    immAlign = evaluateImmediateOffset(operands[3], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[3].range, \"Alignment\"\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType // ^\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // if the assertion can be proven statically, omit it\n  if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n    switch (getExpressionType(arg0)) {\n      case NativeType.I32: {\n        if (getConstValueI32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.I64: {\n        if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        if (getConstValueF32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        if (getConstValueF64(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // return ifTrueish if assertions are disabled\n  if (compiler.options.noAssert) {\n    if (contextualType == Type.void) { // simplify if dropped anyway\n      compiler.currentType = Type.void;\n      return module.nop();\n    }\n    return arg0;\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    ctx.reportNode.typeArgumentsRange\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.classReference;\n  if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI8(getConstValueI32(expr), bytes, i);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI16(getConstValueI32(expr), bytes, i << 1);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI32(getConstValueI32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I64);\n      let off = i << 3;\n      writeI32(getConstValueI64Low(expr), bytes, off);\n      writeI32(getConstValueI64High(expr), bytes, off + 4);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F32);\n      writeF32(getConstValueF32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F64);\n      writeF64(getConstValueF64(expr), bytes, i << 3);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(argN) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(argN) == NativeType.I32);\n          let idx = getConstValueI32(argN);\n          if (idx < 0 || idx > maxIdx) {\n            compiler.error(\n              DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n              operand.range, \"Lane index\", \"0\", maxIdx.toString()\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.is(TypeFlags.INTEGER | TypeFlags.VALUE)) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.Binaryen || (global.Binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonNames,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Static table start offset. */\n  tableBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    module.setFeatures(featureFlags);\n  }\n\n  initializeProgram(): void {\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize(this.options);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // check and perform this program initialization if it hasn't been done\n    this.initializeProgram();\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyLibraryFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    this.setupVirtualLookupTables();\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      ExportNames.memory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  private setupVirtualLookupTables(): void {\n    // TODO: :-)\n    var program = this.program;\n    var virtualCalls = this.virtualCalls;\n\n    // Virtual instance methods in the function table are potentially called virtually\n    var functionTable = this.functionTable;\n    var elementsByName = program.elementsByName;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instanceName = unchecked(functionTable[i]);\n      if (elementsByName.has(instanceName)) { // otherwise ~anonymous\n        let instance = assert(elementsByName.get(instanceName));\n        if (instance.is(CommonFlags.INSTANCE | CommonFlags.VIRTUAL)) {\n          assert(instance.kind == ElementKind.FUNCTION);\n          virtualCalls.add(<Function>instance);\n        }\n      }\n    }\n\n    // Inject a virtual lookup table into each function potentially called virtually\n    // TODO: for (let instance of virtualCalls.values()) {\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.warning(\n        DiagnosticCode.Function_0_is_possibly_called_virtually_which_is_not_yet_supported,\n        instance.identifierNode.range, instance.internalName\n      );\n    }\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionInstances = (<FunctionPrototype>element).instances;\n        if (functionInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classInstances = (<ClassPrototype>element).instances;\n        if (classInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.ensureModuleExport(GETTER_PREFIX + name, getterPrototype, prefix);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.ensureModuleExport(SETTER_PREFIX + name, setterPrototype, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        let signature = functionInstance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          functionInstance = this.ensureTrampoline(functionInstance);\n          this.ensureBuiltinArgumentsLength();\n        }\n        if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getter = propertyInstance.getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = propertyInstance.setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (instance) this.compileClass(instance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          assert(!getterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(getterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) {\n          assert(!setterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          let origInitExpr = initExpr;\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n          if (this.skippedAutoreleases.has(origInitExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n          }\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      let body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        body = module.block(\"vtable\", [ body ], getExpressionType(body));\n      }\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract function\n    } else if (instance.is(CommonFlags.ABSTRACT)) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n      this.virtualCalls.add(instance);\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitializationInConstructor(classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>element;\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              assert(!getterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(getterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              assert(!setterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(setterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType))\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType))\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    if (!instance.is(CommonFlags.TRAMPOLINE) && instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      instance = this.ensureTrampoline(instance);\n    }\n    functionTable.push(instance.internalName);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        labelNode.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(statement.condition, Type.i32),\n          this.currentType\n        )\n      );\n      let condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(condition, Type.bool),\n          this.currentType\n        )\n      );\n      condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          stmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        if (hasSideEffects(condExpr)) {\n          return module.block(null, [\n            module.drop(condExpr),\n            this.compileStatement(ifTrue)\n          ]);\n        }\n        return this.compileStatement(ifTrue);\n      }\n      case ConditionKind.FALSE: {\n        if (hasSideEffects(condExpr)) {\n          return ifFalse\n            ? module.block(null, [\n                module.drop(condExpr),\n                this.compileStatement(ifFalse)\n              ])\n            : module.drop(condExpr);\n        }\n        return ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      if (elseTerminates && !thenTerminates) {\n        flow.inherit(thenFlow);\n      } else {\n        flow.inheritMutual(thenFlow, elseFlow);\n      }\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString()\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        if (initializerNode) {\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = assert(scopedLocals.get(name));\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.is(TypeFlags.POINTER) && !toType.is(TypeFlags.POINTER)) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f32PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f64PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyPrototype.internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        if (\n          fieldInstance.is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode !== null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, fieldInstance.internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert(propertyPrototype.getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        assert(propertyInstance.parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>propertyInstance.parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          module.local_get(localIndex, type.toNativeType()),\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          module.global_get(global.internalName, nativeType),\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.flatten(stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression; // compileCallDirect may reset\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        return this.compileCallDirect(\n          functionInstance,\n          expression.arguments,\n          expression,\n          functionInstance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, fieldType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        let functionTarget = <FunctionTarget>target;\n        signature = functionTarget.signature;\n        indexArg = this.compileExpression(expression.expression, functionTarget.type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = assert(propertyPrototype.getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: asc can't see this yet\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var ctx = new BuiltinContext();\n    ctx.compiler = this;\n    ctx.prototype = prototype;\n    ctx.typeArguments = typeArguments;\n    ctx.operands = expression.arguments;\n    ctx.contextualType = contextualType;\n    ctx.reportNode = expression;\n    ctx.contextIsExact = false;\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureBuiltinArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n      // TODO: Enable this once mutable globals are the default nearly everywhere.\n      // if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n      //   module.addGlobalExport(BuiltinNames.argumentsLength, ExportNames.argumentsLength);\n      // } else {\n        module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n          module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n        );\n        module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n      // }\n    }\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureBuiltinArgumentsLength();\n          return module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.ensureBuiltinArgumentsLength();\n    var expr = module.block(null, [\n      module.global_set(BuiltinNames.argumentsLength, // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitializationInConstructor(classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.flatten(stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.block(null, [\n            module.drop(expr),\n            module.i32(1)\n          ], NativeType.I32);\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype)![0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr: ExpressionRef;\n      if (expression) {\n        expr = module.precomputeExpression(\n          this.compileExpression(expression, elementType,\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          )\n        );\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n        } else {\n          isStatic = false;\n        }\n      } else {\n        expr = this.makeZero(elementType);\n      }\n      values[i] = expr;\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression)\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression)\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        fieldType.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], fieldInstance.type, Constraints.CONV_IMPLICIT),\n        fieldType.toNativeType(),\n        fieldInstance.memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.flatten(exprs, this.options.nativeSizeType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance, // bound\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (classInstance.type.isUnmanaged || ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        this.currentType = fieldType;\n        return module.load(\n          fieldType.byteSize,\n          fieldType.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.is(CommonFlags.STATIC)) {\n          let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n          if (!functionInstance) return module.unreachable();\n          if (!this.compileFunction(functionInstance)) return module.unreachable();\n          this.currentType = functionInstance.type;\n          return module.i32(this.ensureFunctionTableEntry(functionInstance));\n        }\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, functionPrototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = evaluateConditionKind(condExpr);\n    if (condKind == ConditionKind.TRUE) return this.compileExpression(ifThen, ctxType);\n    if (condKind == ConditionKind.FALSE) return this.compileExpression(ifElse, ctxType);\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(codeLocation.range.line),\n          module.i32(codeLocation.range.column)\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Evaluates the kind of a boolean condition from its expression. */\nfunction evaluateConditionKind(expr: ExpressionRef): ConditionKind {\n  assert(getExpressionType(expr) == NativeType.I32 || getExpressionType(expr) == NativeType.Unreachable);\n  if (getExpressionId(expr) == ExpressionId.Const) {\n    return getConstValueI32(expr)\n      ? ConditionKind.TRUE\n      : ConditionKind.FALSE;\n  }\n  return ConditionKind.UNKNOWN;\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Function_0_is_possibly_called_virtually_which_is_not_yet_supported = 104,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Function '{0}' is possibly called virtually, which is not yet supported.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!member) return null;\n      members.push(member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && initializer !== null) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators !== null && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT)) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && ((flags & CommonFlags.STATIC) != 0 || isInterface || initializer !== null)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9 // see: https://github.com/WebAssembly/multi-value\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program, options: Options): void {\n  program.initialize(options);\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\nexport function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    // TODO: for (let v of original) {\n    for (let _values = Set_values(original), i = 0, k = _values.length; i < k; ++i) {\n      let v = unchecked(_values[i]);\n      cloned.add(v);\n    }\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n"],"sourceRoot":""}