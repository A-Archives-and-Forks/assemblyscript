{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","withRange","emitDiagnostic","Token","Range","NodeKind","DecoratorKind","LiteralKind","SourceKind","kind","LITERAL","NULL","TRUE","FALSE","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","Node","typeName","TypeName","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","type","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createNamedType","createSimpleTypeName","extendsType","defaultType","elem","TypeParameterNode","initializer","ParameterNode","parameterKind","args","stmt","DecoratorNode","arguments","decoratorKind","fromNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","elements","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","element","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","flags","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","typeParameters","implementsTypes","members","decorators","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","localName","exportedName","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","declarations","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","alias","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","literalKind","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FUNCTION","INSTANCEOF","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","super","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","createFunctionDeclaration","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","nativeFile","File","set","internalName","resolver","Resolver","buffer","offset","classInstance","payloadSize","writeI32","id","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","has","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","AcyclicState","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","bound","instanceKey","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","memoryOffset","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","isBuiltinArray","lengthField","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenSIMDLoadId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAndNotVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenMinSVecI8x16","_BinaryenMinUVecI8x16","_BinaryenMaxSVecI8x16","_BinaryenMaxUVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenMinSVecI16x8","_BinaryenMinUVecI16x8","_BinaryenMaxSVecI16x8","_BinaryenMaxUVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenMinSVecI32x4","_BinaryenMinUVecI32x4","_BinaryenMaxSVecI32x4","_BinaryenMaxUVecI32x4","_BinaryenDotSVecI16x8ToVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","_BinaryenSwizzleVec8x16","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","SIMDLoadOp","_BinaryenLoadSplatVec8x16","_BinaryenLoadSplatVec16x8","_BinaryenLoadSplatVec32x4","_BinaryenLoadSplatVec64x2","_BinaryenLoadExtSVec8x8ToVecI16x8","_BinaryenLoadExtUVec8x8ToVecI16x8","_BinaryenLoadExtSVec16x4ToVecI32x4","_BinaryenLoadExtUVec16x4ToVecI32x4","_BinaryenLoadExtSVec32x2ToVecI64x2","_BinaryenLoadExtUVec32x2ToVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","_BinaryenHost","_BinaryenLocalGet","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","result","paramTypes","_BinaryenAddFunctionType","_BinaryenGetFunctionTypeBySignature","_BinaryenRemoveFunctionType","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","tempName","typeRef","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","eventType","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","load","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","getExpressionId","UNLIMITED_MEMORY","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","ftype","_BinaryenFunctionTypeGetName","_BinaryenFunctionTypeGetNumParams","_BinaryenFunctionTypeGetParam","_BinaryenFunctionTypeGetResult","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Unreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Host","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","Exnref","types","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","fieldInstance","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","RETURNED","CONDITIONALLY_RETURNED","inheritConditional","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","numThisLocalFlags","numOtherLocalFlags","min","isLocalFlag","WRAPPED","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","Options","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","Compiler","currentInlineFunctions","currentParent","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","events","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","ensureFunctionType","typesToNativeTypes","block","finalize","addFunctionExport","setStart","compileVisitGlobals","compileVisitMembers","removeGlobal","compileRTTI","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","local_get","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeReplace","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileElement","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","makeZero","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","compileFunction","resultType","getFunctionTypeBySignature","addFunctionType","funcType","addEvent","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","isNonnull","temp","local_set","unary","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileClass","staticMembers","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","nop","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condFlow","condExpr","makeIsTrueish","hasScopedLocals","unifyLocalFlags","alwaysFalse","terminates","continues","breaks","fallsThrough","loop","popBreakLabel","unset","alwaysTrue","incrExpr","incrFlow","bodyFlow","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","CONSTANT","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","drop","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","info","Expression_is_never_null","local_tee","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","argc","Optional_parameter_must_have_an_initializer","setargc","ensureArgcVar","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","arrayType","tempDataStart","nativeElementType","ensureStaticArrayBuffer","bufferAddress","arraySegment","ensureStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","thisLocalIndex","fieldPrototype","idTemp","idExpr","conditions","single","Auto","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","call_direct","arg0Type","Type_0_is_not_a_function_index_or_function_reference","operandExprs","nativeParamTypes","operandType","Expression_must_be_a_compile_time_constant","instantiate","User_defined_0","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","isAcyclic","getArrayValueType","Decompiler","functionId","decompiler","decompile","finish","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","unknown","numMembers","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","clear","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","Identifier_expected","readIdentifier","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","precedence","determinePrecedenceStart","createNewExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","createUnaryPrefixExpression","createNullExpression","createTrueExpression","createFalseExpression","again","parseFunctionExpression","createParenthesizedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","createThisExpression","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","parseExpressionStart","nextPrecedence","maybeParseCallExpression","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","isRightAssociative","joinPropertyCall","createBinaryExpression","callee","inner","nodeIsCallable","nodeIsGenericCallable","tryParseTypeArgumentsBeforeArguments","createCallExpression","skipBlock","depth","Precedence","toText","binaryen","wrapModule","emitStackIR","toAsmjs","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","formatDiagnosticMessage","parser","parseFile","nextFile","getDependee","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","cls","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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A,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA1IF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA8I1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,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,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG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8ECxOA,oBAAyBg0H,EAAU/iG,GAEjC,OADA1pB,OAAO0pB,GAAS,GAAKA,EAAQ,IACtBk6F,OACLd,QACE2J,EACAjhE,QACEs2D,QACA3lG,QAAQuN,KAGZuqC,WAKJ,qBAA0Bw4D,EAAU/iG,EAAYgjG,GAE9C,OADA1sH,OAAO0pB,GAAS,GAAKA,EAAQ,IACtBgjG,EACH1J,OACEyJ,EACAjhE,QACEs2D,QACA3lG,QAAQuN,KAGZo5F,QACE2J,EACAjJ,QACEh4D,QACEs2D,QACA3lG,QAAQuN,Q,8EC9BpB,SAAkBijG,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Bt2H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACnB,IAALA,GACK,IAALA,GACAA,EAAI,SAmLqBoK,EAnLYpK,GAoL9B,GAAKoK,EAAO,QACnBmsH,EAAmBnsH,EAAaosH,IAFzC,IAAkCpsH,GA/KlC,8BAAmCpK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACxBA,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBoK,EAzKYpK,GA0K7B,GAAKoK,EAAO,QACnBmsH,EAAmBnsH,EAAaqsH,IAFzC,IAAiCrsH,GArKjC,MAAMosH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBnsH,EAAWgsH,GACrC,GAAIhsH,EAAOgsH,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIM,EACAC,EAHAhL,EAAK,EACLC,EAAKwK,EAAI/qH,OAINsgH,EAAK,EAAIC,GAAI,CAIlB,GAHA8K,EAAM/K,GAAOC,EAAKD,GAAO,IAEzBgL,EAASP,EADTM,GAAc,EAANA,KAEMtsH,GAAQA,GAAQgsH,EAAIM,EAAM,GACtC,OAAO,EAELtsH,EAAOusH,EACT/K,EAAK8K,EAEL/K,EAAK+K,EAAM,EAGf,OAAO,I,8EC9WT,qBAA6B3lG,EAA4B,MACvD,GAAIA,EAAU,CACZ,IAAI6lG,EAAS,IAAI9vH,MAASiqB,EAAS1lB,QACnC,IAAK,IAAI1L,EAAI,EAAGsX,EAAI8Z,EAAS1lB,OAAQ1L,EAAIsX,IAAKtX,EAAGs4B,UAAU2+F,EAAOj3H,GAAKoxB,EAASpxB,IAChF,OAAOi3H,EAET,OAAO,IAAI9vH,OAGb,mBAA2BiqB,EAA0B,MACnD,GAAIA,EAAU,CACZ,IAAI6lG,EAAS,IAAI5vH,IACjB,IAAK,IAAI6vH,KAAK9lG,EAAU6lG,EAAOpxG,IAAIqxG,GACnC,OAAOD,EAET,OAAO,IAAI5vH,KAGb,mBAA6B+pB,EAA4B,KAAM+lG,EAA6B,MAC1F,IAAIF,EAAS,IAAI3vH,IACjB,GAAI8pB,EAAU,CACZ,IAAK,IAAK9Z,EAAG4/G,KAAM9lG,EAAU6lG,EAAO9yG,IAAI7M,EAAG4/G,GAC3C,GAAIC,EAAW,IAAK,IAAK7/G,EAAG4/G,KAAMC,EAAWF,EAAO9yG,IAAI7M,EAAG4/G,QACtD,GAAIC,EACT,IAAK,IAAK7/G,EAAG4/G,KAAMC,EAAWF,EAAO9yG,IAAI7M,EAAG4/G,GAE9C,OAAOD,I,8ECpBT,aAIMG,EAAY,GAMlB,SAAgBnjH,EAAcH,GAK5B,IAJA,IAiBIqmD,EAjBA/+C,EAAM,EACN3P,EAAMqI,EAAKpI,OAGR0P,EAAM,EAAI3P,GACS,IAAxBqI,EAAKhI,WAAWsP,IAChBtH,EAAKhI,WAAWsP,EAAM,IAAMg8G,GAE5Bh8G,GAAO,EAUT,KAPIA,EAAM,GAAK3P,EAAMqI,EAAKpI,UACxBoI,EAAOA,EAAK9H,UAAUoP,EAAK3P,GAC3BA,GAAO2P,EACPA,EAAM,GAIDA,EAAM,EAAI3P,GAAK,CAIpB,GAHA0uD,GAAQ,EAINrmD,EAAKhI,WAAWsP,IAAQg8G,GACI,IAA5BtjH,EAAKhI,WAAWsP,EAAM,GACtB,CAGA,IADA++C,EAAQ/+C,EAAM,GAAK3P,IAEjB2P,EAAM,EAAI3P,GACVqI,EAAKhI,WAAWsP,EAAM,IAAMg8G,EAC5B,CACAtjH,EAAOqmD,EACHrmD,EAAK9H,UAAU,EAAGoP,GAClBtH,EAAK9H,UAAU,EAAGoP,GAAOtH,EAAK9H,UAAUoP,EAAM,GAClD3P,GAAO,EACP,SAKF,IADA0uD,EAAQ/+C,EAAM,GAAK3P,IACsB,IAA5BqI,EAAKhI,WAAWsP,EAAM,IACjCA,EAAM,EAAI3P,GACkB,IAA5BqI,EAAKhI,WAAWsP,EAAM,IACtBtH,EAAKhI,WAAWsP,EAAM,IAAMg8G,EAC5B,CAEA,IAAIC,EAAOj8G,EACX,OAASi8G,GAAQ,GACf,GAAIvjH,EAAKhI,WAAWurH,IAASD,EAAW,CAClCh8G,EAAMi8G,GAAQ,GACa,IAA7BvjH,EAAKhI,WAAWurH,EAAO,IACM,IAA7BvjH,EAAKhI,WAAWurH,EAAO,KAEvBvjH,EAAOqmD,EACHrmD,EAAK9H,UAAU,EAAGqrH,GAClBvjH,EAAK9H,UAAU,EAAGqrH,GAAQvjH,EAAK9H,UAAUoP,EAAM,GACnD3P,GAAO2P,EAAM,EAAIi8G,EACjBj8G,EAAMi8G,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKj8G,EAAM,IACT,GAAPA,GACoB,IAAtBtH,EAAKhI,WAAW,IACM,IAAtBgI,EAAKhI,WAAW,IAChB,CAEAL,GADAqI,EAAOA,EAAK9H,UAAUoP,EAAM,IACjB1P,OACX,WAKR0P,IAEF,OAAO3P,EAAM,EAAIqI,EAAO,IAc1B,SAAgBwjH,EAAQnsH,GACtB,IAAIiQ,EAAMjQ,EAAeO,OACzB,GAAI0P,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAAIjQ,EAAeW,WAAW,IAAMsrH,EAClC,OAAOjsH,EAGX,OAASiQ,EAAM,GACb,GAAIjQ,EAAeW,WAAWsP,IAAQg8G,EACpC,OAAOjsH,EAAea,UAAU,EAAGoP,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BjQ,EAAwBosH,GAClD,OAAIpsH,EAAe+I,WAAW,QACrB/I,EAEF8I,EACLqjH,EAAQC,GAAU,EAAAt1H,eAAiBkJ,IAKvC,a,8EC5GA,MAAMqsH,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB,kBAAuB3rH,EAAcoxC,GACnC,KAAOA,GAAS,GACdpxC,EAAGE,KAAKyrH,GACRv6E,GAAS,EAEPA,GAAS,IACXpxC,EAAGE,KAAKwrH,GACRt6E,GAAS,GAEPA,GACFpxC,EAAGE,KAAKurH,K,6BCQZ,SAAgBG,EAAQpzG,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBG,EAAS1jB,EAAYsjB,EAAoBC,GACvDD,EAAOC,GAAcvjB,EACrBsjB,EAAOC,EAAS,GAAKvjB,IAAU,EAC/BsjB,EAAOC,EAAS,GAAKvjB,IAAU,GAC/BsjB,EAAOC,EAAS,GAAKvjB,IAAU,GAIjC,SAAgB22H,EAAQrzG,EAAoBC,GAC1C,IAAIwnG,EAAK2L,EAAQpzG,EAAQC,GACrBynG,EAAK0L,EAAQpzG,EAAQC,EAAS,GAClC,OAAO2B,QAAQ6lG,EAAIC,G,iDAzCrB,kBAAuB1nG,EAAoBC,GACzC,OAAOD,EAAOC,IAIhB,mBAAwBvjB,EAAYsjB,EAAoBC,GACtDD,EAAOC,GAAUvjB,GAInB,mBAAwBsjB,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/B,oBAAyBvjB,EAAYsjB,EAAoBC,GACvDD,EAAOC,GAAcvjB,EACrBsjB,EAAOC,EAAS,GAAKvjB,IAAU,GAIjC,YAQA,aAQA,YAOA,oBAAyBA,EAAYsjB,EAAoBC,GACvDG,EAAS43B,QAAQt7C,GAAQsjB,EAAQC,GACjCG,EAAS63B,SAASv7C,GAAQsjB,EAAQC,EAAS,IAI7C,mBAAwBD,EAAoBC,GAC1C,OAAOinG,WAAWkM,EAAQpzG,EAAQC,KAIpC,oBAAyBvjB,EAAYsjB,EAAoBC,GACvDG,EAAS6mG,WAAWvqH,GAAQsjB,EAAQC,IAItC,mBAAwBD,EAAoBC,GAC1C,OAAOmnG,WAAWiM,EAAQrzG,EAAQC,KAIpC,oBAAyBvjB,EAAYsjB,EAAoBC,GACvD,IAAIqzG,EAAWnM,WAAWzqH,GAC1B0jB,EAAS43B,QAAQs7E,GAAWtzG,EAAQC,GACpCG,EAAS63B,SAASq7E,GAAWtzG,EAAQC,EAAS","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Anyref = _BinaryenTypeAnyref(),\n  Exnref = _BinaryenTypeExnref(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = _BinaryenFeatureMVP(),\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\n  TailCall = _BinaryenFeatureTailCall(),\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\n  All = _BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  AtomicFence = _BinaryenAtomicFenceId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDTernary = _BinaryenSIMDTernaryId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  SIMDLoad = _BinaryenSIMDLoadId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId(),\n  Try = _BinaryenTryId(),\n  Throw = _BinaryenThrowId(),\n  Rethrow = _BinaryenRethrowId(),\n  BrOnExn = _BinaryenBrOnExnId(),\n  Push = _BinaryenPushId(),\n  Pop = _BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\n  NotV128 = _BinaryenNotVec128(),\n  NegI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\n  NegF32x4 = _BinaryenNegVecF32x4(),\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\n  NegF64x2 = _BinaryenNegVecF64x2(),\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = _BinaryenEqVecI8x16(),\n  NeI8x16 = _BinaryenNeVecI8x16(),\n  LtI8x16 = _BinaryenLtSVecI8x16(),\n  LtU8x16 = _BinaryenLtUVecI8x16(),\n  LeI8x16 = _BinaryenLeSVecI8x16(),\n  LeU8x16 = _BinaryenLeUVecI8x16(),\n  GtI8x16 = _BinaryenGtSVecI8x16(),\n  GtU8x16 = _BinaryenGtUVecI8x16(),\n  GeI8x16 = _BinaryenGeSVecI8x16(),\n  GeU8x16 = _BinaryenGeUVecI8x16(),\n  EqI16x8 = _BinaryenEqVecI16x8(),\n  NeI16x8 = _BinaryenNeVecI16x8(),\n  LtI16x8 = _BinaryenLtSVecI16x8(),\n  LtU16x8 = _BinaryenLtUVecI16x8(),\n  LeI16x8 = _BinaryenLeSVecI16x8(),\n  LeU16x8 = _BinaryenLeUVecI16x8(),\n  GtI16x8 = _BinaryenGtSVecI16x8(),\n  GtU16x8 = _BinaryenGtUVecI16x8(),\n  GeI16x8 = _BinaryenGeSVecI16x8(),\n  GeU16x8 = _BinaryenGeUVecI16x8(),\n  EqI32x4 = _BinaryenEqVecI32x4(),\n  NeI32x4 = _BinaryenNeVecI32x4(),\n  LtI32x4 = _BinaryenLtSVecI32x4(),\n  LtU32x4 = _BinaryenLtUVecI32x4(),\n  LeI32x4 = _BinaryenLeSVecI32x4(),\n  LeU32x4 = _BinaryenLeUVecI32x4(),\n  GtI32x4 = _BinaryenGtSVecI32x4(),\n  GtU32x4 = _BinaryenGtUVecI32x4(),\n  GeI32x4 = _BinaryenGeSVecI32x4(),\n  GeU32x4 = _BinaryenGeUVecI32x4(),\n  EqF32x4 = _BinaryenEqVecF32x4(),\n  NeF32x4 = _BinaryenNeVecF32x4(),\n  LtF32x4 = _BinaryenLtVecF32x4(),\n  LeF32x4 = _BinaryenLeVecF32x4(),\n  GtF32x4 = _BinaryenGtVecF32x4(),\n  GeF32x4 = _BinaryenGeVecF32x4(),\n  EqF64x2 = _BinaryenEqVecF64x2(),\n  NeF64x2 = _BinaryenNeVecF64x2(),\n  LtF64x2 = _BinaryenLtVecF64x2(),\n  LeF64x2 = _BinaryenLeVecF64x2(),\n  GtF64x2 = _BinaryenGtVecF64x2(),\n  GeF64x2 = _BinaryenGeVecF64x2(),\n  AndV128 = _BinaryenAndVec128(),\n  OrV128 = _BinaryenOrVec128(),\n  XorV128 = _BinaryenXorVec128(),\n  AndNotV128 = _BinaryenAndNotVec128(),\n  AddI8x16 = _BinaryenAddVecI8x16(),\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\n  SubI8x16 = _BinaryenSubVecI8x16(),\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\n  MulI8x16 = _BinaryenMulVecI8x16(),\n  MinI8x16 = _BinaryenMinSVecI8x16(),\n  MinU8x16 = _BinaryenMinUVecI8x16(),\n  MaxI8x16 = _BinaryenMaxSVecI8x16(),\n  MaxU8x16 = _BinaryenMaxUVecI8x16(),\n  AddI16x8 = _BinaryenAddVecI16x8(),\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\n  SubI16x8 = _BinaryenSubVecI16x8(),\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\n  MulI16x8 = _BinaryenMulVecI16x8(),\n  MinI16x8 = _BinaryenMinSVecI16x8(),\n  MinU16x8 = _BinaryenMinUVecI16x8(),\n  MaxI16x8 = _BinaryenMaxSVecI16x8(),\n  MaxU16x8 = _BinaryenMaxUVecI16x8(),\n  AddI32x4 = _BinaryenAddVecI32x4(),\n  SubI32x4 = _BinaryenSubVecI32x4(),\n  MulI32x4 = _BinaryenMulVecI32x4(),\n  MinI32x4 = _BinaryenMinSVecI32x4(),\n  MinU32x4 = _BinaryenMinUVecI32x4(),\n  MaxI32x4 = _BinaryenMaxSVecI32x4(),\n  MaxU32x4 = _BinaryenMaxUVecI32x4(),\n  DotI16x8 = _BinaryenDotSVecI16x8ToVecI32x4(),\n  AddI64x2 = _BinaryenAddVecI64x2(),\n  SubI64x2 = _BinaryenSubVecI64x2(),\n  AddF32x4 = _BinaryenAddVecF32x4(),\n  SubF32x4 = _BinaryenSubVecF32x4(),\n  MulF32x4 = _BinaryenMulVecF32x4(),\n  DivF32x4 = _BinaryenDivVecF32x4(),\n  MinF32x4 = _BinaryenMinVecF32x4(),\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\n  AddF64x2 = _BinaryenAddVecF64x2(),\n  SubF64x2 = _BinaryenSubVecF64x2(),\n  MulF64x2 = _BinaryenMulVecF64x2(),\n  DivF64x2 = _BinaryenDivVecF64x2(),\n  MinF64x2 = _BinaryenMinVecF64x2(),\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8(),\n  SwizzleV8x16 = _BinaryenSwizzleVec8x16()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = _BinaryenShlVecI8x16(),\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\n  ShlI16x8 = _BinaryenShlVecI16x8(),\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\n  ShlI32x4 = _BinaryenShlVecI32x4(),\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\n  ShlI64x2 = _BinaryenShlVecI64x2(),\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\n  ShrU64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = _BinaryenBitselectVec128(),\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = _BinaryenLoadSplatVec8x16(),\n  LoadSplatV16x8 = _BinaryenLoadSplatVec16x8(),\n  LoadSplatV32x4 = _BinaryenLoadSplatVec32x4(),\n  LoadSplatV64x2 = _BinaryenLoadSplatVec64x2(),\n  LoadI8ToI16x8 = _BinaryenLoadExtSVec8x8ToVecI16x8(),\n  LoadU8ToU16x8 = _BinaryenLoadExtUVec8x8ToVecI16x8(),\n  LoadI16ToI32x4 = _BinaryenLoadExtSVec16x4ToVecI32x4(),\n  LoadU16ToU32x4 = _BinaryenLoadExtUVec16x4ToVecI32x4(),\n  LoadI32ToI64x2 = _BinaryenLoadExtSVec32x2ToVecI64x2(),\n  LoadU32ToU64x2 = _BinaryenLoadExtUVec32x2ToVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return _BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return _BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // function types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionTypeRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  // table\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    try {\n      _BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  // meta\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// function types\n\nexport function getFunctionTypeName(ftype: FunctionTypeRef): string | null {\n  return readString(_BinaryenFunctionTypeGetName(ftype));\n}\n\nexport function getFunctionTypeParamCount(ftype: FunctionTypeRef): Index {\n  return _BinaryenFunctionTypeGetNumParams(ftype);\n}\n\nexport function getFunctionTypeParam(ftype: FunctionTypeRef, index: Index): NativeType {\n  return _BinaryenFunctionTypeGetParam(ftype, index);\n}\n\nexport function getFunctionTypeResult(ftype: FunctionTypeRef): NativeType {\n  return _BinaryenFunctionTypeGetResult(ftype);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(_BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return _BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return _BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return _BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(_BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return _BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(_BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return _BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return _BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(_BinaryenIfGetCondition(expr))\n          || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(_BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(_BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(_BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(_BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(_BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(_BinaryenTryGetBody(expr), data);\n      visit(_BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(_BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(_BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n  /** An internal exception reference. */\n  EXNREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: assert(false);\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.EXNREF: return \"e\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** An internal exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is a function parameter. */\n  PARAMETER = 1 << 1,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 2,\n  /** Local is non-null. */\n  NONNULL = 1 << 3,\n  /** Local is read from. */\n  READFROM = 1 << 4,\n  /** Local is written to. */\n  WRITTENTO = 1 << 5,\n  /** Local is retained. */\n  RETAINED = 1 << 6,\n  /** Local is returned. */\n  RETURNED = 1 << 7,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 8,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 9,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 10,\n  /** Local is conditionally returned. */\n  CONDITIONALLY_RETURNED = 1 << 11,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | PARAMETER\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED\n                  | RETURNED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED\n                  | CONDITIONALLY_RETURNED,\n\n  /** Any written to flag. */\n  ANY_WRITTENTO = WRITTENTO\n                | CONDITIONALLY_WRITTENTO,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED,\n\n  /** Any returned flag. */\n  ANY_RETURNED = RETURNED\n               | CONDITIONALLY_RETURNED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n      if (flags & LocalFlags.RETURNED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  EventRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Registered event types. */\n  events: Map<string, EventRef> = new Map();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable, module.i32(0));\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeReplace(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = this.makeZero(type);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Either reuses or creates the event type matching the specified name. */\n  ensureEventType(\n    name: string,\n    parameterTypes: Type[] | null\n  ): EventRef {\n    var events = this.events;\n    if (events.has(name)) return events.get(name)!;\n    var module = this.module;\n    var funcType = this.ensureFunctionType(parameterTypes, Type.void);\n    var eventType = module.addEvent(name, 0, funcType);\n    events.set(name, eventType);\n    return eventType;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    // Compile the condition before the body in order to...\n    var condFlow = outerFlow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    assert(!condFlow.hasScopedLocals);\n    // ...unify local states before and after the condition has been executed the first time\n    innerFlow.unifyLocalFlags(condFlow);\n    this.currentFlow = innerFlow;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) {\n      this.performAutoreleases(innerFlow, stmts);\n      if (!alwaysFalse) { // (4)\n        stmts.push(module.br(continueLabel, condExpr));\n      }\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile the incrementor before the body in order to...\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) {\n      let incrFlow = innerFlow.fork();\n      this.currentFlow = incrFlow;\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n      assert(!incrFlow.hasScopedLocals);\n      this.currentFlow = innerFlow;\n      // ...unify local states before and after the incrementor has been executed the first time\n      innerFlow.unifyLocalFlags(incrFlow);\n    }\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var bodyFlow = innerFlow.fork();\n    this.currentFlow = bodyFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\n    bodyFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    bodyFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    // Finalize body flow\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\n    bodyFlow.freeScopedLocals();\n    innerFlow.inherit(bodyFlow);\n    this.currentFlow = innerFlow;\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            let index = getLocalGetIndex(expr);\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(type);\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(temp.index, expr),\n            module.local_get(temp.index, type.toNativeType()),\n            module.unreachable()\n          );\n          flow.freeTempLocal(temp);\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n              module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, parent.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, parent.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let targetType = (<Class>parent).type;\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(targetType);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          module.local_get(localIndex, type.toNativeType()),\n          valueExpr,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          module.global_get(global.internalName, nativeType), // oldRef\n          valueExpr, // newRef\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              module.local_tee(tempValue.index, valueExpr), // newRef\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            valueExpr, // newRef\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(oldExpr: ExpressionRef, newExpr: ExpressionRef, alreadyRetained: bool = false): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.block(null, stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          // TODO: anyref context yields <usize>0\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        if (target.parent != flow.parentFunction) {\n          // Closures are not yet supported\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          this.currentType = type;\n          return module.unreachable();\n        }\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.lookupExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = this.makeZero(fieldType);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          case TypeKind.EXNREF: { value = \"exnref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct:\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\n          operands[0].range, arg0Type.toString()\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinSymbols.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_dot_i16x8_s: return deferASM(BuiltinSymbols.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = compiler.makeZero(stringInstance.type);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.This_expression_is_not_constructable,\n            operand.range\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false,\n  /** Parser reference. */\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}