{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__21__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","withRange","emitDiagnostic","Token","Range","NodeKind","DecoratorKind","LiteralKind","SourceKind","kind","LITERAL","NULL","TRUE","FALSE","Node","typeName","TypeName","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","type","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createNamedType","createSimpleTypeName","extendsType","defaultType","elem","TypeParameterNode","initializer","ParameterNode","parameterKind","args","stmt","DecoratorNode","arguments","decoratorKind","fromNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","elements","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","element","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","flags","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","typeParameters","implementsTypes","members","decorators","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","localName","exportedName","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","declarations","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","alias","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","PROPERTYACCESS","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","literalKind","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","CALL","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","super","SOURCE","parent","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","createFunctionDeclaration","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","nativeFile","File","set","internalName","resolver","Resolver","buffer","offset","classInstance","payloadSize","writeI32","id","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","has","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","AcyclicState","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","bound","instanceKey","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","memoryOffset","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","isBuiltinArray","lengthField","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","ExpressionId","binaryen","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenSIMDLoadId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAndNotVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenMinSVecI8x16","_BinaryenMinUVecI8x16","_BinaryenMaxSVecI8x16","_BinaryenMaxUVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenMinSVecI16x8","_BinaryenMinUVecI16x8","_BinaryenMaxSVecI16x8","_BinaryenMaxUVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenMinSVecI32x4","_BinaryenMinUVecI32x4","_BinaryenMaxSVecI32x4","_BinaryenMaxUVecI32x4","_BinaryenDotSVecI16x8ToVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","_BinaryenSwizzleVec8x16","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","SIMDLoadOp","_BinaryenLoadSplatVec8x16","_BinaryenLoadSplatVec16x8","_BinaryenLoadSplatVec32x4","_BinaryenLoadSplatVec64x2","_BinaryenLoadExtSVec8x8ToVecI16x8","_BinaryenLoadExtUVec8x8ToVecI16x8","_BinaryenLoadExtSVec16x4ToVecI32x4","_BinaryenLoadExtUVec16x4ToVecI32x4","_BinaryenLoadExtSVec32x2ToVecI64x2","_BinaryenLoadExtUVec32x2ToVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","result","paramTypes","_BinaryenAddFunctionType","_BinaryenGetFunctionTypeBySignature","_BinaryenRemoveFunctionType","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","tempName","typeRef","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","eventType","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","getExpressionId","UNLIMITED_MEMORY","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","ftype","_BinaryenFunctionTypeGetName","_BinaryenFunctionTypeGetNumParams","_BinaryenFunctionTypeGetParam","_BinaryenFunctionTypeGetResult","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","__i32_store","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Unreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Host","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","Exnref","types","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","fieldInstance","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","RETURNED","CONDITIONALLY_RETURNED","inheritConditional","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","numThisLocalFlags","numOtherLocalFlags","min","isLocalFlag","WRAPPED","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","Options","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","Compiler","currentInlineFunctions","currentParent","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","events","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","ensureFunctionType","typesToNativeTypes","block","finalize","addFunctionExport","setStart","compileVisitGlobals","compileVisitMembers","removeGlobal","compileRTTI","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","load","local_get","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeReplace","store","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileElement","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","makeZero","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","compileFunction","resultType","getFunctionTypeBySignature","addFunctionType","funcType","addEvent","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","isNonnull","temp","local_set","unary","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileClass","staticMembers","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","nop","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condFlow","condExpr","makeIsTrueish","hasScopedLocals","unifyLocalFlags","alwaysFalse","terminates","continues","breaks","fallsThrough","loop","popBreakLabel","unset","alwaysTrue","incrExpr","incrFlow","bodyFlow","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","CONSTANT","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","drop","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","info","Expression_is_never_null","local_tee","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","argc","Optional_parameter_must_have_an_initializer","setargc","ensureArgcVar","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","arrayType","tempDataStart","nativeElementType","ensureStaticArrayBuffer","bufferAddress","arraySegment","ensureStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","thisLocalIndex","fieldPrototype","idTemp","idExpr","conditions","single","Auto","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","call_direct","arg0Type","Type_0_is_not_a_function_index_or_function_reference","operandExprs","nativeParamTypes","operandType","Expression_must_be_a_compile_time_constant","instantiate","User_defined_0","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","isAcyclic","getArrayValueType","Decompiler","functionId","decompiler","decompile","finish","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","unknown","numMembers","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","clear","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","formatDiagnostic","formatDiagnosticMessage","parser","parseFile","nextFile","getDependee","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","cls","map","isSet","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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GACN,KAAKtU,EAAM8iB,SACX,KAAK9iB,EAAM0iD,GACX,KAAK1iD,EAAMsN,YACX,KAAKtN,EAAM+kB,QACX,KAAK/kB,EAAMijD,OACX,KAAKjjD,EAAMqjD,KACX,KAAKrjD,EAAMkQ,IACX,KAAKlQ,EAAMsiB,IACX,KAAKtiB,EAAMyN,WACX,KAAKzN,EAAMwjD,GACX,KAAKxjD,EAAMyjD,MACX,KAAKzjD,EAAM2jD,OACX,KAAK3jD,EAAMumB,UACX,KAAKvmB,EAAMQ,KACX,KAAKR,EAAM6iB,SACX,KAAK7iB,EAAMuiB,IACX,KAAKviB,EAAMikD,KACX,KAAKjkD,EAAMoR,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYpR,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYwiD,GACV,yBACA,uBACA,uBAH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ACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA1IF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA8I1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,4DACjB,KAAK,IAAK,MAAO,2DACjB,KAAK,IAAK,MAAO,gCAC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AAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MACvnC,IAAI1I,QACT,MAAOw3D,IAcT,SAASm0D,EAAKO,EAAKC,EAAMuC,GAMrBpuH,KAAK4rH,IAAY,EAANA,EAMX5rH,KAAK6rH,KAAc,EAAPA,EAMZ7rH,KAAKouH,WAAaA,EAoCtB,SAASI,EAAOC,GACZ,OAAsC,KAA9BA,GAAOA,EAAgB,YAXnCpD,EAAKppH,UAAUysH,WAEf3tH,OAAOC,eAAeqqH,EAAKppH,UAAW,aAAc,CAAEX,OAAO,IAkB7D+pH,EAAKmD,OAASA,EAOd,IAAIG,EAAY,GAOZC,EAAa,GAQjB,SAASrB,EAAQjsH,EAAO8sH,GACpB,IAAIK,EAAKI,EAAWC,EACpB,OAAIV,GAEIU,EAAS,IADbxtH,KAAW,IACgBA,EAAQ,OAC/ButH,EAAYD,EAAWttH,IAEZutH,GAEfJ,EAAM9C,EAASrqH,GAAgB,EAARA,GAAa,GAAK,EAAI,GAAG,GAC5CwtH,IACAF,EAAWttH,GAASmtH,GACjBA,IAGHK,GAAU,MADdxtH,GAAS,IACqBA,EAAQ,OAClCutH,EAAYF,EAAUrtH,IAEXutH,GAEfJ,EAAM9C,EAASrqH,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtCwtH,IACAH,EAAUrtH,GAASmtH,GAChBA,GAmBf,SAAShB,EAAWnsH,EAAO8sH,GACvB,GAAIxsB,MAAMtgG,GACN,OAAO8sH,EAAWW,EAAQzD,EAC9B,GAAI8C,EAAU,CACV,GAAI9sH,EAAQ,EACR,OAAOytH,EACX,GAAIztH,GAAS0tH,EACT,OAAOC,MACR,CACH,GAAI3tH,IAAU4tH,EACV,OAAOvlD,EACX,GAAIroE,EAAQ,GAAK4tH,EACb,OAAO7uE,EAEf,OAAI/+C,EAAQ,EACDmsH,GAAYnsH,EAAO8sH,GAAUe,MACjCxD,EAAUrqH,EAAQ8tH,EAAkB,EAAI9tH,EAAQ8tH,EAAkB,EAAGhB,GAmBhF,SAASzC,EAAS0D,EAASC,EAAUlB,GACjC,OAAO,IAAI/C,EAAKgE,EAASC,EAAUlB,GA5CvC/C,EAAKkC,QAAUA,EAkCflC,EAAKoC,WAAaA,EAsBlBpC,EAAKM,SAAWA,EAShB,IAAI4D,EAAUznH,KAAKe,IASnB,SAAS2mH,EAAWxvE,EAAKouE,EAAUqB,GAC/B,GAAmB,IAAfzvE,EAAIj0C,OACJ,MAAMpD,MAAM,gBAChB,GAAY,QAARq3C,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAC9D,OAAOsrE,EASX,GARwB,iBAAb8C,GAEPqB,EAAQrB,EACRA,GAAW,GAEXA,IAAcA,GAElBqB,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SAErB,IAAIvtH,EACJ,IAAKA,EAAI69C,EAAIw6D,QAAQ,MAAQ,EACzB,MAAM7xG,MAAM,mBACX,GAAU,IAANxG,EACL,OAAOqtH,EAAWxvE,EAAI3zC,UAAU,GAAI+hH,EAAUqB,GAAON,MAQzD,IAHA,IAAIQ,EAAelC,EAAW8B,EAAQE,EAAO,IAEzC11E,EAASuxE,EACJjrH,EAAI,EAAGA,EAAI2/C,EAAIj0C,OAAQ1L,GAAK,EAAG,CACpC,IAAI83C,EAAOrwC,KAAKg9D,IAAI,EAAG9kB,EAAIj0C,OAAS1L,GAChCiB,EAAQypB,SAASi1B,EAAI3zC,UAAUhM,EAAGA,EAAI83C,GAAOs3E,GACjD,GAAIt3E,EAAO,EAAG,CACV,IAAIy3E,EAAQnC,EAAW8B,EAAQE,EAAOt3E,IACtC4B,EAASA,EAAOgyE,IAAI6D,GAAO3pG,IAAIwnG,EAAWnsH,SAG1Cy4C,GADAA,EAASA,EAAOgyE,IAAI4D,IACJ1pG,IAAIwnG,EAAWnsH,IAIvC,OADAy4C,EAAOq0E,SAAWA,EACXr0E,EAoBX,SAAS81E,EAAUrpE,EAAK4nE,GACpB,MAAmB,iBAAR5nE,EACAinE,EAAWjnE,EAAK4nE,GACR,iBAAR5nE,EACAgpE,EAAWhpE,EAAK4nE,GAEpBzC,EAASnlE,EAAIolE,IAAKplE,EAAIqlE,KAA0B,kBAAbuC,EAAyBA,EAAW5nE,EAAI4nE,UAftF/C,EAAKmE,WAAaA,EAyBlBnE,EAAKwE,UAAYA,EAUjB,IAcIT,EAAiBU,WAOjBd,EAAiBI,EAAiBA,EAOlCF,EAAiBF,EAAiB,EAOlCe,EAAaxC,EA5BI,GAAK,IAkCtBjC,EAAOiC,EAAQ,GAMnBlC,EAAKC,KAAOA,EAMZ,IAAIyD,EAAQxB,EAAQ,GAAG,GAMvBlC,EAAK0D,MAAQA,EAMb,IAAIvD,EAAM+B,EAAQ,GAMlBlC,EAAKG,IAAMA,EAMX,IAAIwE,EAAOzC,EAAQ,GAAG,GAMtBlC,EAAK2E,KAAOA,EAMZ,IAAIC,EAAU1C,GAAS,GAMvBlC,EAAK4E,QAAUA,EAMf,IAAI5vE,EAAYsrE,GAAS,EAAc,YAAc,GAMrDN,EAAKhrE,UAAYA,EAMjB,IAAI4uE,EAAqBtD,GAAS,GAAc,GAAc,GAM9DN,EAAK4D,mBAAqBA,EAM1B,IAAItlD,EAAYgiD,EAAS,GAAG,YAAc,GAM1CN,EAAK1hD,UAAYA,EAMjB,IAAIumD,EAAgB7E,EAAKppH,UAMzBiuH,EAAcC,MAAQ,WAClB,OAAOnwH,KAAKouH,SAAWpuH,KAAK4rH,MAAQ,EAAI5rH,KAAK4rH,KAOjDsE,EAAc/B,SAAW,WACrB,OAAInuH,KAAKouH,UACIpuH,KAAK6rH,OAAS,GAAKuD,GAAmBpvH,KAAK4rH,MAAQ,GACzD5rH,KAAK6rH,KAAOuD,GAAkBpvH,KAAK4rH,MAAQ,IAUtDsE,EAAc5kH,SAAW,SAAkBmkH,GAEvC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SACrB,GAAI1vH,KAAKowH,SACL,MAAO,IACX,GAAIpwH,KAAKqwH,aAAc,CACnB,GAAIrwH,KAAKotH,GAAGzjD,GAAY,CAGpB,IAAI2mD,EAAY7C,EAAWgC,GACvBxD,EAAMjsH,KAAKisH,IAAIqE,GACfC,EAAOtE,EAAIF,IAAIuE,GAAWxE,IAAI9rH,MAClC,OAAOisH,EAAI3gH,SAASmkH,GAASc,EAAKJ,QAAQ7kH,SAASmkH,GAEnD,MAAO,IAAMzvH,KAAKmvH,MAAM7jH,SAASmkH,GAQzC,IAHA,IAAIE,EAAelC,EAAW8B,EAAQE,EAAO,GAAIzvH,KAAKouH,UAClDoC,EAAMxwH,KACN+5C,EAAS,KACA,CACT,IAAI02E,EAASD,EAAIvE,IAAI0D,GAEjBe,GADSF,EAAI1E,IAAI2E,EAAO1E,IAAI4D,IAAeQ,UAAY,GACvC7kH,SAASmkH,GAE7B,IADAe,EAAMC,GACEL,SACJ,OAAOM,EAAS32E,EAEhB,KAAO22E,EAAO3kH,OAAS,GACnB2kH,EAAS,IAAMA,EACnB32E,EAAS,GAAK22E,EAAS32E,IASnCm2E,EAAcS,YAAc,WACxB,OAAO3wH,KAAK6rH,MAOhBqE,EAAcU,oBAAsB,WAChC,OAAO5wH,KAAK6rH,OAAS,GAOzBqE,EAAcW,WAAa,WACvB,OAAO7wH,KAAK4rH,KAOhBsE,EAAcY,mBAAqB,WAC/B,OAAO9wH,KAAK4rH,MAAQ,GAOxBsE,EAAca,cAAgB,WAC1B,GAAI/wH,KAAKqwH,aACL,OAAOrwH,KAAKotH,GAAGzjD,GAAa,GAAK3pE,KAAKmvH,MAAM4B,gBAEhD,IADA,IAAIvqE,EAAmB,GAAbxmD,KAAK6rH,KAAY7rH,KAAK6rH,KAAO7rH,KAAK4rH,IACnCoF,EAAM,GAAIA,EAAM,GACK,IAArBxqE,EAAO,GAAKwqE,GADOA,KAG5B,OAAoB,GAAbhxH,KAAK6rH,KAAYmF,EAAM,GAAKA,EAAM,GAO7Cd,EAAcE,OAAS,WACnB,OAAqB,IAAdpwH,KAAK6rH,MAA2B,IAAb7rH,KAAK4rH,KAOnCsE,EAAce,IAAMf,EAAcE,OAMlCF,EAAcG,WAAa,WACvB,OAAQrwH,KAAKouH,UAAYpuH,KAAK6rH,KAAO,GAOzCqE,EAAcgB,WAAa,WACvB,OAAOlxH,KAAKouH,UAAYpuH,KAAK6rH,MAAQ,GAOzCqE,EAAciB,MAAQ,WAClB,OAA0B,IAAP,EAAXnxH,KAAK4rH,MAOjBsE,EAAckB,OAAS,WACnB,OAA0B,IAAP,EAAXpxH,KAAK4rH,MAQjBsE,EAAc9hE,OAAS,SAAgB10B,GAGnC,OAFK80F,EAAO90F,KACRA,EAAQm2F,EAAUn2F,KAClB15B,KAAKouH,WAAa10F,EAAM00F,UAAapuH,KAAK6rH,OAAS,IAAQ,GAAMnyF,EAAMmyF,OAAS,IAAQ,KAErF7rH,KAAK6rH,OAASnyF,EAAMmyF,MAAQ7rH,KAAK4rH,MAAQlyF,EAAMkyF,MAS1DsE,EAAc9C,GAAK8C,EAAc9hE,OAOjC8hE,EAAcmB,UAAY,SAAmB33F,GACzC,OAAQ15B,KAAKotH,GAAmB1zF,IASpCw2F,EAAcoB,IAAMpB,EAAcmB,UAQlCnB,EAAc5C,GAAK4C,EAAcmB,UAOjCnB,EAAcqB,SAAW,SAAkB73F,GACvC,OAAO15B,KAAKwxH,KAAqB93F,GAAS,GAS9Cw2F,EAAcuB,GAAKvB,EAAcqB,SAOjCrB,EAAcwB,gBAAkB,SAAyBh4F,GACrD,OAAO15B,KAAKwxH,KAAqB93F,IAAU,GAS/Cw2F,EAAcnC,IAAMmC,EAAcwB,gBAQlCxB,EAAcyB,GAAKzB,EAAcwB,gBAOjCxB,EAAc0B,YAAc,SAAqBl4F,GAC7C,OAAO15B,KAAKwxH,KAAqB93F,GAAS,GAS9Cw2F,EAAc2B,GAAK3B,EAAc0B,YAOjC1B,EAAc4B,mBAAqB,SAA4Bp4F,GAC3D,OAAO15B,KAAKwxH,KAAqB93F,IAAU,GAS/Cw2F,EAAcpC,IAAMoC,EAAc4B,mBAQlC5B,EAAc6B,GAAK7B,EAAc4B,mBAQjC5B,EAAc/hE,QAAU,SAAiBz0B,GAGrC,GAFK80F,EAAO90F,KACRA,EAAQm2F,EAAUn2F,IAClB15B,KAAKotH,GAAG1zF,GACR,OAAO,EACX,IAAIs4F,EAAUhyH,KAAKqwH,aACf4B,EAAWv4F,EAAM22F,aACrB,OAAI2B,IAAYC,GACJ,GACPD,GAAWC,EACL,EAENjyH,KAAKouH,SAGF10F,EAAMmyF,OAAS,EAAM7rH,KAAK6rH,OAAS,GAAOnyF,EAAMmyF,OAAS7rH,KAAK6rH,MAASnyF,EAAMkyF,MAAQ,EAAM5rH,KAAK4rH,MAAQ,GAAO,EAAI,EAFhH5rH,KAAK8rH,IAAIpyF,GAAO22F,cAAgB,EAAI,GAYnDH,EAAcsB,KAAOtB,EAAc/hE,QAMnC+hE,EAAcgC,OAAS,WACnB,OAAKlyH,KAAKouH,UAAYpuH,KAAKotH,GAAGzjD,GACnBA,EACJ3pE,KAAKktH,MAAMjnG,IAAIulG,IAQ1B0E,EAAcf,IAAMe,EAAcgC,OAOlChC,EAAcjqG,IAAM,SAAaksG,GACxB3D,EAAO2D,KACRA,EAAStC,EAAUsC,IAIvB,IAAIC,EAAMpyH,KAAK6rH,OAAS,GACpBwG,EAAkB,MAAZryH,KAAK6rH,KACXyG,EAAMtyH,KAAK4rH,MAAQ,GACnB2G,EAAiB,MAAXvyH,KAAK4rH,IAEX4G,EAAML,EAAOtG,OAAS,GACtB4G,EAAoB,MAAdN,EAAOtG,KACb6G,EAAMP,EAAOvG,MAAQ,GAGrB+G,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAYrC,OAVAD,IADAC,GAAOP,GAHgB,MAAbJ,EAAOvG,QAIF,GAGfgH,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAEN7G,GANPkH,GAAO,QAMiB,IATxBC,GAAO,QAQPH,GAAO,QACoC,IAH3CC,GAAO,OAG+C5yH,KAAKouH,WAQ/D8B,EAAc6C,SAAW,SAAkBC,GAGvC,OAFKxE,EAAOwE,KACRA,EAAanD,EAAUmD,IACpBhzH,KAAKimB,IAAI+sG,EAAW7D,QAS/Be,EAAcpE,IAAMoE,EAAc6C,SAOlC7C,EAAc+C,SAAW,SAAkBC,GACvC,GAAIlzH,KAAKowH,SACL,OAAO9E,EAKX,GAJKkD,EAAO0E,KACRA,EAAarD,EAAUqD,IAGvB7E,EAKA,OAAO1C,EAJG0C,EAAKtC,IAAI/rH,KAAK4rH,IACL5rH,KAAK6rH,KACLqH,EAAWtH,IACXsH,EAAWrH,MACTwC,EAAK8E,WAAYnzH,KAAKouH,UAG/C,GAAI8E,EAAW9C,SACX,OAAO9E,EACX,GAAItrH,KAAKotH,GAAGzjD,GACR,OAAOupD,EAAW/B,QAAUxnD,EAAY2hD,EAC5C,GAAI4H,EAAW9F,GAAGzjD,GACd,OAAO3pE,KAAKmxH,QAAUxnD,EAAY2hD,EAEtC,GAAItrH,KAAKqwH,aACL,OAAI6C,EAAW7C,aACJrwH,KAAKmvH,MAAMpD,IAAImH,EAAW/D,OAE1BnvH,KAAKmvH,MAAMpD,IAAImH,GAAY/D,MACnC,GAAI+D,EAAW7C,aAClB,OAAOrwH,KAAK+rH,IAAImH,EAAW/D,OAAOA,MAGtC,GAAInvH,KAAKyxH,GAAG1B,IAAemD,EAAWzB,GAAG1B,GACrC,OAAOtC,EAAWztH,KAAKmuH,WAAa+E,EAAW/E,WAAYnuH,KAAKouH,UAKpE,IAAIgE,EAAMpyH,KAAK6rH,OAAS,GACpBwG,EAAkB,MAAZryH,KAAK6rH,KACXyG,EAAMtyH,KAAK4rH,MAAQ,GACnB2G,EAAiB,MAAXvyH,KAAK4rH,IAEX4G,EAAMU,EAAWrH,OAAS,GAC1B4G,EAAwB,MAAlBS,EAAWrH,KACjB6G,EAAMQ,EAAWtH,MAAQ,GACzBwH,EAAuB,MAAjBF,EAAWtH,IAEjB+G,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAqBrC,OAnBAD,IADAC,GAAOP,EAAMa,KACE,GAGfR,IADAC,GAAOP,EAAMc,KACE,GACfP,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMe,KACE,GACfR,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMgB,EAAMf,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1C7G,GAZPkH,GAAO,QAYiB,IAlBxBC,GAAO,QAiBPH,GAAO,QACoC,IAH3CC,GAAO,OAG+C5yH,KAAKouH,WAS/D8B,EAAcnE,IAAMmE,EAAc+C,SAQlC/C,EAAcmD,OAAS,SAAgBC,GAGnC,GAFK9E,EAAO8E,KACRA,EAAUzD,EAAUyD,IACpBA,EAAQlD,SACR,MAAMznH,MAAM,oBAaZ,IAWA4qH,EAAQ/C,EAAKrG,EArBjB,GAAIkE,EAIA,OAAKruH,KAAKouH,WACS,aAAfpuH,KAAK6rH,OACY,IAAjByH,EAAQ1H,MAAgC,IAAlB0H,EAAQzH,KAU3BF,GANI3rH,KAAKouH,SAAWC,EAAKmF,MAAQnF,EAAKoF,OACzCzzH,KAAK4rH,IACL5rH,KAAK6rH,KACLyH,EAAQ1H,IACR0H,EAAQzH,MAESwC,EAAK8E,WAAYnzH,KAAKouH,UARhCpuH,KAWf,GAAIA,KAAKowH,SACL,OAAOpwH,KAAKouH,SAAWW,EAAQzD,EAEnC,GAAKtrH,KAAKouH,SA6BH,CAKH,GAFKkF,EAAQlF,WACTkF,EAAUA,EAAQnH,cAClBmH,EAAQzB,GAAG7xH,MACX,OAAO+uH,EACX,GAAIuE,EAAQzB,GAAG7xH,KAAKgtH,KAAK,IACrB,OAAOgD,EACX7F,EAAM4E,MAtCU,CAGhB,GAAI/uH,KAAKotH,GAAGzjD,GACR,OAAI2pD,EAAQlG,GAAG5B,IAAQ8H,EAAQlG,GAAG6C,GACvBtmD,EACF2pD,EAAQlG,GAAGzjD,GACT6hD,GAIP+H,EADevzH,KAAK+sH,IAAI,GACNd,IAAIqH,GAASzG,IAAI,IACxBO,GAAG9B,GACHgI,EAAQjD,aAAe7E,EAAMyE,GAEpCO,EAAMxwH,KAAK8rH,IAAIwH,EAAQvH,IAAIwH,IAC3BpJ,EAAMoJ,EAAOttG,IAAIuqG,EAAIvE,IAAIqH,KAI9B,GAAIA,EAAQlG,GAAGzjD,GAClB,OAAO3pE,KAAKouH,SAAWW,EAAQzD,EACnC,GAAItrH,KAAKqwH,aACL,OAAIiD,EAAQjD,aACDrwH,KAAKmvH,MAAMlD,IAAIqH,EAAQnE,OAC3BnvH,KAAKmvH,MAAMlD,IAAIqH,GAASnE,MAC5B,GAAImE,EAAQjD,aACf,OAAOrwH,KAAKisH,IAAIqH,EAAQnE,OAAOA,MACnChF,EAAMmB,EAmBV,IADAkF,EAAMxwH,KACCwwH,EAAI1C,IAAIwF,IAAU,CAGrBC,EAASzrH,KAAK68D,IAAI,EAAG78D,KAAKmnF,MAAMuhC,EAAIrC,WAAamF,EAAQnF,aAWzD,IAPA,IAAIuF,EAAO5rH,KAAK0kD,KAAK1kD,KAAK6rH,IAAIJ,GAAUzrH,KAAK8rH,KACzCC,EAASH,GAAQ,GAAM,EAAInE,EAAQ,EAAGmE,EAAO,IAI7CI,EAAYrG,EAAW8F,GACvBQ,EAAYD,EAAU/H,IAAIuH,GACvBS,EAAU1D,cAAgB0D,EAAUlC,GAAGrB,IAG1CuD,GADAD,EAAYrG,EADZ8F,GAAUM,EACqB7zH,KAAKouH,WACdrC,IAAIuH,GAK1BQ,EAAU1D,WACV0D,EAAYtI,GAEhBrB,EAAMA,EAAIlkG,IAAI6tG,GACdtD,EAAMA,EAAI1E,IAAIiI,GAElB,OAAO5J,GASX+F,EAAcjE,IAAMiE,EAAcmD,OAOlCnD,EAAc8D,OAAS,SAAgBV,GAKnC,OAJK9E,EAAO8E,KACRA,EAAUzD,EAAUyD,IAGpBjF,EAOO1C,GANI3rH,KAAKouH,SAAWC,EAAK4F,MAAQ5F,EAAK6F,OACzCl0H,KAAK4rH,IACL5rH,KAAK6rH,KACLyH,EAAQ1H,IACR0H,EAAQzH,MAESwC,EAAK8E,WAAYnzH,KAAKouH,UAGxCpuH,KAAK8rH,IAAI9rH,KAAKisH,IAAIqH,GAASvH,IAAIuH,KAS1CpD,EAAcpnH,IAAMonH,EAAc8D,OAQlC9D,EAAcM,IAAMN,EAAc8D,OAMlC9D,EAAchD,IAAM,WAChB,OAAOvB,GAAU3rH,KAAK4rH,KAAM5rH,KAAK6rH,KAAM7rH,KAAKouH,WAQhD8B,EAAc1D,IAAM,SAAa9yF,GAG7B,OAFK80F,EAAO90F,KACRA,EAAQm2F,EAAUn2F,IACfiyF,EAAS3rH,KAAK4rH,IAAMlyF,EAAMkyF,IAAK5rH,KAAK6rH,KAAOnyF,EAAMmyF,KAAM7rH,KAAKouH,WAQvE8B,EAAcxD,GAAK,SAAYhzF,GAG3B,OAFK80F,EAAO90F,KACRA,EAAQm2F,EAAUn2F,IACfiyF,EAAS3rH,KAAK4rH,IAAMlyF,EAAMkyF,IAAK5rH,KAAK6rH,KAAOnyF,EAAMmyF,KAAM7rH,KAAKouH,WAQvE8B,EAActD,IAAM,SAAalzF,GAG7B,OAFK80F,EAAO90F,KACRA,EAAQm2F,EAAUn2F,IACfiyF,EAAS3rH,KAAK4rH,IAAMlyF,EAAMkyF,IAAK5rH,KAAK6rH,KAAOnyF,EAAMmyF,KAAM7rH,KAAKouH,WAQvE8B,EAAciE,UAAY,SAAmBC,GAGzC,OAFI5F,EAAO4F,KACPA,EAAUA,EAAQjE,SACE,IAAnBiE,GAAW,IACLp0H,KACFo0H,EAAU,GACRzI,EAAS3rH,KAAK4rH,KAAOwI,EAAUp0H,KAAK6rH,MAAQuI,EAAYp0H,KAAK4rH,MAAS,GAAKwI,EAAWp0H,KAAKouH,UAE3FzC,EAAS,EAAG3rH,KAAK4rH,KAAQwI,EAAU,GAAKp0H,KAAKouH,WAS5D8B,EAAcrD,IAAMqD,EAAciE,UAOlCjE,EAAcmE,WAAa,SAAoBD,GAG3C,OAFI5F,EAAO4F,KACPA,EAAUA,EAAQjE,SACE,IAAnBiE,GAAW,IACLp0H,KACFo0H,EAAU,GACRzI,EAAU3rH,KAAK4rH,MAAQwI,EAAYp0H,KAAK6rH,MAAS,GAAKuI,EAAWp0H,KAAK6rH,MAAQuI,EAASp0H,KAAKouH,UAE5FzC,EAAS3rH,KAAK6rH,MAASuI,EAAU,GAAKp0H,KAAK6rH,MAAQ,EAAI,GAAK,EAAG7rH,KAAKouH,WASnF8B,EAAcnD,IAAMmD,EAAcmE,WAOlCnE,EAAcoE,mBAAqB,SAA4BF,GAI3D,GAHI5F,EAAO4F,KACPA,EAAUA,EAAQjE,SAEN,KADhBiE,GAAW,IAEP,OAAOp0H,KAEP,IAAI6rH,EAAO7rH,KAAK6rH,KAChB,OAAIuI,EAAU,GAEHzI,EADG3rH,KAAK4rH,MACUwI,EAAYvI,GAAS,GAAKuI,EAAWvI,IAASuI,EAASp0H,KAAKouH,UAE9EzC,EADY,KAAZyI,EACSvI,EAEAA,IAAUuI,EAAU,GAFd,EAAGp0H,KAAKouH,WAY1C8B,EAAclD,KAAOkD,EAAcoE,mBAQnCpE,EAAcqE,MAAQrE,EAAcoE,mBAMpCpE,EAAc9D,SAAW,WACrB,OAAKpsH,KAAKouH,SAEHzC,EAAS3rH,KAAK4rH,IAAK5rH,KAAK6rH,MAAM,GAD1B7rH,MAQfkwH,EAAc/D,WAAa,WACvB,OAAInsH,KAAKouH,SACEpuH,KACJ2rH,EAAS3rH,KAAK4rH,IAAK5rH,KAAK6rH,MAAM,IAQzCqE,EAAcsE,QAAU,SAAiB7C,GACrC,OAAOA,EAAK3xH,KAAKy0H,YAAcz0H,KAAK00H,aAOxCxE,EAAcuE,UAAY,WACtB,IAAI/I,EAAK1rH,KAAK6rH,KACVJ,EAAKzrH,KAAK4rH,IACd,MAAO,CACS,IAAZH,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,GACK,IAAZC,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,KAQfwE,EAAcwE,UAAY,WACtB,IAAIhJ,EAAK1rH,KAAK6rH,KACVJ,EAAKzrH,KAAK4rH,IACd,MAAO,CACHF,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,EACAD,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,IAWRJ,EAAKsJ,UAAY,SAAmBhgF,EAAOy5E,EAAUuD,GACjD,OAAOA,EAAKtG,EAAKuJ,YAAYjgF,EAAOy5E,GAAY/C,EAAKwJ,YAAYlgF,EAAOy5E,IAS5E/C,EAAKuJ,YAAc,SAAqBjgF,EAAOy5E,GAC3C,OAAO,IAAI/C,EACP12E,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZy5E,IAUR/C,EAAKwJ,YAAc,SAAqBlgF,EAAOy5E,GAC3C,OAAO,IAAI/C,EACP12E,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNy5E,K,4IClyCR,cACA,QACA,QACA,OAwCoC,EAAA0G,iBAxCY,EAAAC,wBAEhD,cAIA,qBAEElpH,EAEA+H,EAEA2mG,GAAgB,EAEhBya,EAAwB,MAIxB,OAFKA,IAAQA,EAAS,IAAI,EAAAhb,QAC1Bgb,EAAOC,UAAUppH,EAAM+H,EAAM2mG,GACtBya,GAIT,oBAAyBA,GACvB,OAAOA,EAAOE,YAIhB,uBAA4BF,EAAgB5tG,GAC1C,OAAO4tG,EAAOG,YAAY/tG,IAI5B,0BAA+B4tG,GAC7B,IAAInjG,EAAUmjG,EAAOnjG,QACrB,OAAOA,EAAQrO,kBAAoBqO,EAAQplB,YAAYV,OACnD8lB,EAAQplB,YAAYolB,EAAQrO,qBAC5B,MAON,kBAAuBzY,GACrB,OAAOA,EAAQd,UAAY,EAAAF,mBAAmBG,MAIhD,qBAA0Ba,GACxB,OAAOA,EAAQd,UAAY,EAAAF,mBAAmBI,SAIhD,mBAAwBY,GACtB,OAAOA,EAAQd,UAAY,EAAAF,mBAAmBK,OAIhD,2BACE,OAAO,IAAI,EAAAsgE,SAIb,qBAA0B/kD,EAAkB8S,GAC1C9S,EAAQ8S,OAASA,GAInB,uBAA4B9S,EAAkBgB,GAC5ChB,EAAQgB,SAAWA,GAIrB,2BAAgChB,EAAkBglD,GAChDhlD,EAAQglD,aAAeA,GAIzB,2BAAgChlD,EAAkBilD,GAChDjlD,EAAQilD,aAAeA,GAIzB,0BAA+BjlD,EAAkBklD,GAC/CllD,EAAQklD,YAAcA,GAIxB,wBAA6BllD,EAAkB4Q,GAC7C5Q,EAAQ4Q,UAAYA,GAItB,yBAA8B5Q,EAAkBiB,GAC9CjB,EAAQiB,WAAaA,GAIvB,0BAA+BjB,EAAkBjP,EAAe9V,GAC9D,IAAIiqB,EAAgBlF,EAAQkF,cACvBA,IAAelF,EAAQkF,cAAgBA,EAAgB,IAAIljB,KAChEkjB,EAActG,IAAI7N,EAAO9V,IAI3B,4BAAiC+kB,EAAkBmlD,GACjDnlD,EAAQmlD,cAAgBA,GAI1B,uBAA4BnlD,EAAkBqlD,GAC5CrlD,EAAQqlD,SAAWA,GAIR,EAAAoqD,uBAAyB,EAEzB,EAAAC,wBAA0B,EAE1B,EAAAC,wBAA0B,EAE1B,EAAAC,oBAAsB,EAEtB,EAAAC,aAAe,GAEf,EAAAC,gBAAkB,GAElB,EAAAC,2BAA6B,GAE7B,EAAAC,mBAAqB,IAErB,EAAAC,wBAA0B,IAGvC,yBAA8BjwG,EAAkBslD,GAC9CtlD,EAAQolD,UAAYE,GAItB,0BAA+BtlD,EAAkBslD,GAC/CtlD,EAAQolD,WAAaE,GAIvB,iCAAsCtlD,EAAkBkwG,EAAoBC,GAC1EnwG,EAAQkB,kBAAoBgvG,EAC5BlwG,EAAQmB,gBAAkBgvG,GAI5B,yBAA8Bd,GAC5B,OAAOA,EAAOne,UAIhB,qBAA0BhlF,EAAkB3d,GAC1C,OAAO2d,EAAQkkG,UAAU7hH,IAI3B,0BAA+B2d,EAAkBlM,EAA0B,MACzE,OAAO,IAAI,EAAAylD,SAASv5C,EAASlM,GAASknD,WAIxC,2BAAgCltE,GAC9B,IAAIg3G,EAAa,IAAI,EAAAF,WAErB,OADAE,EAAWC,UAAUj3G,GACdg3G,EAAWE,UAIpB,oBAAyBhlF,GACvB,OAAO,EAAAynF,WAAWE,MAAM3nF,IAI1B,oBAAyBA,GACvB,OAAO,EAAA+nF,WAAWJ,MAAM3nF,IAI1B,qBAA0BA,GACxB,IAAIzlB,EAAK,IAAI5E,MACb4E,EAAGE,KAAK,qBACR,IAAK,IAAI0pH,KAAOnkG,EAAQ/N,eAAepS,SACrCtF,EAAGE,KAAK,SACRF,EAAGE,KAAK0pH,EAAIxxG,cACZpY,EAAGE,KAAK,QAEVF,EAAGE,KAAK,uBACR,IAAK,IAAI0pH,KAAOnkG,EAAQ/N,eAAepS,SAAU,CAC/C,IAAIimB,EAAOq+F,EAAIr+F,KACfvrB,EAAGE,KAAK,QACRF,EAAGE,KAAKqrB,EAAOA,EAAK3S,GAAG1Z,WAAa,KACpCc,EAAGE,KAAK,OAEVF,EAAGE,KAAK,wBACR,IAAK,IAAI0pH,KAAOnkG,EAAQ/N,eAAepS,SACrCtF,EAAGE,KAAK,QACRF,EAAGE,KAAK0pH,EAAI99F,UAAU5sB,YACtBc,EAAGE,KAAK,OAGV,OADAF,EAAGE,KAAK,YACDF,EAAGG,KAAK,KAIjB,WAAS,EAAAzJ,eAAA,EAAAA,eAGT,QAEA,QACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,S,8ECxOA,oBAAyBmzH,EAAUniG,GAEjC,OADAzpB,OAAOypB,GAAS,GAAKA,EAAQ,IACtBu5F,OACLd,QACE0J,EACAlgE,QACEw1D,QACAhlG,QAAQuN,KAGZ0qC,WAKJ,qBAA0By3D,EAAUniG,EAAYoiG,GAE9C,OADA7rH,OAAOypB,GAAS,GAAKA,EAAQ,IACtBoiG,EACHzJ,OACEwJ,EACAlgE,QACEw1D,QACAhlG,QAAQuN,KAGZy4F,QACE0J,EACAhJ,QACEl3D,QACEw1D,QACAhlG,QAAQuN,Q,8EC9BpB,SAAkBqiG,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Bz1H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAM01H,EAAS,GAAJ11H,EACX,OAAO01H,GAAM,IAAcA,GAAM,KACrB,IAAL11H,GACK,IAALA,GACAA,EAAI,SAmLqBoK,EAnLYpK,GAoL9B,KAAOoK,EAAO,QACrBurH,EAAmBvrH,EAAawrH,IAFzC,IAAkCxrH,GA/KlC,8BAAmCpK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAM01H,EAAS,GAAJ11H,EACX,OAAO01H,GAAM,IAAcA,GAAM,KAC1B11H,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBoK,EAzKYpK,GA0K7B,KAAOoK,EAAO,QACrBurH,EAAmBvrH,EAAayrH,IAFzC,IAAiCzrH,GArKjC,MAAMwrH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__21__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.typeName = typeName;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  kind = NodeKind.NEW;\n\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = binaryen._BinaryenTypeNone(),\n  I32  = binaryen._BinaryenTypeInt32(),\n  I64  = binaryen._BinaryenTypeInt64(),\n  F32  = binaryen._BinaryenTypeFloat32(),\n  F64  = binaryen._BinaryenTypeFloat64(),\n  V128 = binaryen._BinaryenTypeVec128(),\n  Anyref = binaryen._BinaryenTypeAnyref(),\n  Exnref = binaryen._BinaryenTypeExnref(),\n  Unreachable = binaryen._BinaryenTypeUnreachable(),\n  Auto = binaryen._BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = binaryen._BinaryenFeatureMVP(),\n  Atomics = binaryen._BinaryenFeatureAtomics(),\n  MutableGloabls = binaryen._BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = binaryen._BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = binaryen._BinaryenFeatureSIMD128(),\n  BulkMemory = binaryen._BinaryenFeatureBulkMemory(),\n  SignExt = binaryen._BinaryenFeatureSignExt(),\n  ExceptionHandling = binaryen._BinaryenFeatureExceptionHandling(),\n  TailCall = binaryen._BinaryenFeatureTailCall(),\n  ReferenceTypes = binaryen._BinaryenFeatureReferenceTypes(),\n  All = binaryen._BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = binaryen._BinaryenInvalidId(),\n  Block = binaryen._BinaryenBlockId(),\n  If = binaryen._BinaryenIfId(),\n  Loop = binaryen._BinaryenLoopId(),\n  Break = binaryen._BinaryenBreakId(),\n  Switch = binaryen._BinaryenSwitchId(),\n  Call = binaryen._BinaryenCallId(),\n  CallIndirect = binaryen._BinaryenCallIndirectId(),\n  LocalGet = binaryen._BinaryenLocalGetId(),\n  LocalSet = binaryen._BinaryenLocalSetId(),\n  GlobalGet = binaryen._BinaryenGlobalGetId(),\n  GlobalSet = binaryen._BinaryenGlobalSetId(),\n  Load = binaryen._BinaryenLoadId(),\n  Store = binaryen._BinaryenStoreId(),\n  Const = binaryen._BinaryenConstId(),\n  Unary = binaryen._BinaryenUnaryId(),\n  Binary = binaryen._BinaryenBinaryId(),\n  Select = binaryen._BinaryenSelectId(),\n  Drop = binaryen._BinaryenDropId(),\n  Return = binaryen._BinaryenReturnId(),\n  Host = binaryen._BinaryenHostId(),\n  Nop = binaryen._BinaryenNopId(),\n  Unreachable = binaryen._BinaryenUnreachableId(),\n  AtomicCmpxchg = binaryen._BinaryenAtomicCmpxchgId(),\n  AtomicRMW = binaryen._BinaryenAtomicRMWId(),\n  AtomicWait = binaryen._BinaryenAtomicWaitId(),\n  AtomicNotify = binaryen._BinaryenAtomicNotifyId(),\n  AtomicFence = binaryen._BinaryenAtomicFenceId(),\n  SIMDExtract = binaryen._BinaryenSIMDExtractId(),\n  SIMDReplace = binaryen._BinaryenSIMDReplaceId(),\n  SIMDShuffle = binaryen._BinaryenSIMDShuffleId(),\n  SIMDTernary = binaryen._BinaryenSIMDTernaryId(),\n  SIMDShift = binaryen._BinaryenSIMDShiftId(),\n  SIMDLoad = binaryen._BinaryenSIMDLoadId(),\n  MemoryInit = binaryen._BinaryenMemoryInitId(),\n  DataDrop = binaryen._BinaryenDataDropId(),\n  MemoryCopy = binaryen._BinaryenMemoryCopyId(),\n  MemoryFill = binaryen._BinaryenMemoryFillId(),\n  Try = binaryen._BinaryenTryId(),\n  Throw = binaryen._BinaryenThrowId(),\n  Rethrow = binaryen._BinaryenRethrowId(),\n  BrOnExn = binaryen._BinaryenBrOnExnId(),\n  Push = binaryen._BinaryenPushId(),\n  Pop = binaryen._BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = binaryen._BinaryenClzInt32(),\n  CtzI32 = binaryen._BinaryenCtzInt32(),\n  PopcntI32 = binaryen._BinaryenPopcntInt32(),\n  NegF32 = binaryen._BinaryenNegFloat32(),\n  AbsF32 = binaryen._BinaryenAbsFloat32(),\n  CeilF32 = binaryen._BinaryenCeilFloat32(),\n  FloorF32 = binaryen._BinaryenFloorFloat32(),\n  TruncF32 = binaryen._BinaryenTruncFloat32(),\n  NearestF32 = binaryen._BinaryenNearestFloat32(),\n  SqrtF32 = binaryen._BinaryenSqrtFloat32(),\n  EqzI32 = binaryen._BinaryenEqZInt32(),\n  ClzI64 = binaryen._BinaryenClzInt64(),\n  CtzI64 = binaryen._BinaryenCtzInt64(),\n  PopcntI64 = binaryen._BinaryenPopcntInt64(),\n  NegF64 = binaryen._BinaryenNegFloat64(),\n  AbsF64 = binaryen._BinaryenAbsFloat64(),\n  CeilF64 = binaryen._BinaryenCeilFloat64(),\n  FloorF64 = binaryen._BinaryenFloorFloat64(),\n  TruncF64 = binaryen._BinaryenTruncFloat64(),\n  NearestF64 = binaryen._BinaryenNearestFloat64(),\n  SqrtF64 = binaryen._BinaryenSqrtFloat64(),\n  EqzI64 = binaryen._BinaryenEqZInt64(),\n  ExtendI32 = binaryen._BinaryenExtendSInt32(),\n  ExtendU32 = binaryen._BinaryenExtendUInt32(),\n  WrapI64 = binaryen._BinaryenWrapInt64(),\n  TruncF32ToI32 = binaryen._BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = binaryen._BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = binaryen._BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = binaryen._BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = binaryen._BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = binaryen._BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = binaryen._BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = binaryen._BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = binaryen._BinaryenReinterpretFloat32(),\n  ReinterpretF64 = binaryen._BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = binaryen._BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = binaryen._BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = binaryen._BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = binaryen._BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = binaryen._BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = binaryen._BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = binaryen._BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = binaryen._BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = binaryen._BinaryenPromoteFloat32(),\n  DemoteF64 = binaryen._BinaryenDemoteFloat64(),\n  ReinterpretI32 = binaryen._BinaryenReinterpretInt32(),\n  ReinterpretI64 = binaryen._BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = binaryen._BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = binaryen._BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = binaryen._BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = binaryen._BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = binaryen._BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = binaryen._BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = binaryen._BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = binaryen._BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = binaryen._BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = binaryen._BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = binaryen._BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = binaryen._BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = binaryen._BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = binaryen._BinaryenSplatVecI8x16(),\n  SplatI16x8 = binaryen._BinaryenSplatVecI16x8(),\n  SplatI32x4 = binaryen._BinaryenSplatVecI32x4(),\n  SplatI64x2 = binaryen._BinaryenSplatVecI64x2(),\n  SplatF32x4 = binaryen._BinaryenSplatVecF32x4(),\n  SplatF64x2 = binaryen._BinaryenSplatVecF64x2(),\n  NotV128 = binaryen._BinaryenNotVec128(),\n  NegI8x16 = binaryen._BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = binaryen._BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = binaryen._BinaryenAllTrueVecI8x16(),\n  NegI16x8 = binaryen._BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = binaryen._BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = binaryen._BinaryenAllTrueVecI16x8(),\n  NegI32x4 = binaryen._BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = binaryen._BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = binaryen._BinaryenAllTrueVecI32x4(),\n  NegI64x2 = binaryen._BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = binaryen._BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = binaryen._BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = binaryen._BinaryenAbsVecF32x4(),\n  NegF32x4 = binaryen._BinaryenNegVecF32x4(),\n  SqrtF32x4 = binaryen._BinaryenSqrtVecF32x4(),\n  AbsF64x2 = binaryen._BinaryenAbsVecF64x2(),\n  NegF64x2 = binaryen._BinaryenNegVecF64x2(),\n  SqrtF64x2 = binaryen._BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = binaryen._BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = binaryen._BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = binaryen._BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = binaryen._BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = binaryen._BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = binaryen._BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = binaryen._BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = binaryen._BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = binaryen._BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = binaryen._BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = binaryen._BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = binaryen._BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = binaryen._BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = binaryen._BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = binaryen._BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = binaryen._BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = binaryen._BinaryenAddInt32(),\n  SubI32 = binaryen._BinaryenSubInt32(),\n  MulI32 = binaryen._BinaryenMulInt32(),\n  DivI32 = binaryen._BinaryenDivSInt32(),\n  DivU32 = binaryen._BinaryenDivUInt32(),\n  RemI32 = binaryen._BinaryenRemSInt32(),\n  RemU32 = binaryen._BinaryenRemUInt32(),\n  AndI32 = binaryen._BinaryenAndInt32(),\n  OrI32 = binaryen._BinaryenOrInt32(),\n  XorI32 = binaryen._BinaryenXorInt32(),\n  ShlI32 = binaryen._BinaryenShlInt32(),\n  ShrU32 = binaryen._BinaryenShrUInt32(),\n  ShrI32 = binaryen._BinaryenShrSInt32(),\n  RotlI32 = binaryen._BinaryenRotLInt32(),\n  RotrI32 = binaryen._BinaryenRotRInt32(),\n  EqI32 = binaryen._BinaryenEqInt32(),\n  NeI32 = binaryen._BinaryenNeInt32(),\n  LtI32 = binaryen._BinaryenLtSInt32(),\n  LtU32 = binaryen._BinaryenLtUInt32(),\n  LeI32 = binaryen._BinaryenLeSInt32(),\n  LeU32 = binaryen._BinaryenLeUInt32(),\n  GtI32 = binaryen._BinaryenGtSInt32(),\n  GtU32 = binaryen._BinaryenGtUInt32(),\n  GeI32 = binaryen._BinaryenGeSInt32(),\n  GeU32 = binaryen._BinaryenGeUInt32(),\n  AddI64 = binaryen._BinaryenAddInt64(),\n  SubI64 = binaryen._BinaryenSubInt64(),\n  MulI64 = binaryen._BinaryenMulInt64(),\n  DivI64 = binaryen._BinaryenDivSInt64(),\n  DivU64 = binaryen._BinaryenDivUInt64(),\n  RemI64 = binaryen._BinaryenRemSInt64(),\n  RemU64 = binaryen._BinaryenRemUInt64(),\n  AndI64 = binaryen._BinaryenAndInt64(),\n  OrI64 = binaryen._BinaryenOrInt64(),\n  XorI64 = binaryen._BinaryenXorInt64(),\n  ShlI64 = binaryen._BinaryenShlInt64(),\n  ShrU64 = binaryen._BinaryenShrUInt64(),\n  ShrI64 = binaryen._BinaryenShrSInt64(),\n  RotlI64 = binaryen._BinaryenRotLInt64(),\n  RotrI64 = binaryen._BinaryenRotRInt64(),\n  EqI64 = binaryen._BinaryenEqInt64(),\n  NeI64 = binaryen._BinaryenNeInt64(),\n  LtI64 = binaryen._BinaryenLtSInt64(),\n  LtU64 = binaryen._BinaryenLtUInt64(),\n  LeI64 = binaryen._BinaryenLeSInt64(),\n  LeU64 = binaryen._BinaryenLeUInt64(),\n  GtI64 = binaryen._BinaryenGtSInt64(),\n  GtU64 = binaryen._BinaryenGtUInt64(),\n  GeI64 = binaryen._BinaryenGeSInt64(),\n  GeU64 = binaryen._BinaryenGeUInt64(),\n  AddF32 = binaryen._BinaryenAddFloat32(),\n  SubF32 = binaryen._BinaryenSubFloat32(),\n  MulF32 = binaryen._BinaryenMulFloat32(),\n  DivF32 = binaryen._BinaryenDivFloat32(),\n  CopysignF32 = binaryen._BinaryenCopySignFloat32(),\n  MinF32 = binaryen._BinaryenMinFloat32(),\n  MaxF32 = binaryen._BinaryenMaxFloat32(),\n  EqF32 = binaryen._BinaryenEqFloat32(),\n  NeF32 = binaryen._BinaryenNeFloat32(),\n  LtF32 = binaryen._BinaryenLtFloat32(),\n  LeF32 = binaryen._BinaryenLeFloat32(),\n  GtF32 = binaryen._BinaryenGtFloat32(),\n  GeF32 = binaryen._BinaryenGeFloat32(),\n  AddF64 = binaryen._BinaryenAddFloat64(),\n  SubF64 = binaryen._BinaryenSubFloat64(),\n  MulF64 = binaryen._BinaryenMulFloat64(),\n  DivF64 = binaryen._BinaryenDivFloat64(),\n  CopysignF64 = binaryen._BinaryenCopySignFloat64(),\n  MinF64 = binaryen._BinaryenMinFloat64(),\n  MaxF64 = binaryen._BinaryenMaxFloat64(),\n  EqF64 = binaryen._BinaryenEqFloat64(),\n  NeF64 = binaryen._BinaryenNeFloat64(),\n  LtF64 = binaryen._BinaryenLtFloat64(),\n  LeF64 = binaryen._BinaryenLeFloat64(),\n  GtF64 = binaryen._BinaryenGtFloat64(),\n  GeF64 = binaryen._BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = binaryen._BinaryenEqVecI8x16(),\n  NeI8x16 = binaryen._BinaryenNeVecI8x16(),\n  LtI8x16 = binaryen._BinaryenLtSVecI8x16(),\n  LtU8x16 = binaryen._BinaryenLtUVecI8x16(),\n  LeI8x16 = binaryen._BinaryenLeSVecI8x16(),\n  LeU8x16 = binaryen._BinaryenLeUVecI8x16(),\n  GtI8x16 = binaryen._BinaryenGtSVecI8x16(),\n  GtU8x16 = binaryen._BinaryenGtUVecI8x16(),\n  GeI8x16 = binaryen._BinaryenGeSVecI8x16(),\n  GeU8x16 = binaryen._BinaryenGeUVecI8x16(),\n  EqI16x8 = binaryen._BinaryenEqVecI16x8(),\n  NeI16x8 = binaryen._BinaryenNeVecI16x8(),\n  LtI16x8 = binaryen._BinaryenLtSVecI16x8(),\n  LtU16x8 = binaryen._BinaryenLtUVecI16x8(),\n  LeI16x8 = binaryen._BinaryenLeSVecI16x8(),\n  LeU16x8 = binaryen._BinaryenLeUVecI16x8(),\n  GtI16x8 = binaryen._BinaryenGtSVecI16x8(),\n  GtU16x8 = binaryen._BinaryenGtUVecI16x8(),\n  GeI16x8 = binaryen._BinaryenGeSVecI16x8(),\n  GeU16x8 = binaryen._BinaryenGeUVecI16x8(),\n  EqI32x4 = binaryen._BinaryenEqVecI32x4(),\n  NeI32x4 = binaryen._BinaryenNeVecI32x4(),\n  LtI32x4 = binaryen._BinaryenLtSVecI32x4(),\n  LtU32x4 = binaryen._BinaryenLtUVecI32x4(),\n  LeI32x4 = binaryen._BinaryenLeSVecI32x4(),\n  LeU32x4 = binaryen._BinaryenLeUVecI32x4(),\n  GtI32x4 = binaryen._BinaryenGtSVecI32x4(),\n  GtU32x4 = binaryen._BinaryenGtUVecI32x4(),\n  GeI32x4 = binaryen._BinaryenGeSVecI32x4(),\n  GeU32x4 = binaryen._BinaryenGeUVecI32x4(),\n  EqF32x4 = binaryen._BinaryenEqVecF32x4(),\n  NeF32x4 = binaryen._BinaryenNeVecF32x4(),\n  LtF32x4 = binaryen._BinaryenLtVecF32x4(),\n  LeF32x4 = binaryen._BinaryenLeVecF32x4(),\n  GtF32x4 = binaryen._BinaryenGtVecF32x4(),\n  GeF32x4 = binaryen._BinaryenGeVecF32x4(),\n  EqF64x2 = binaryen._BinaryenEqVecF64x2(),\n  NeF64x2 = binaryen._BinaryenNeVecF64x2(),\n  LtF64x2 = binaryen._BinaryenLtVecF64x2(),\n  LeF64x2 = binaryen._BinaryenLeVecF64x2(),\n  GtF64x2 = binaryen._BinaryenGtVecF64x2(),\n  GeF64x2 = binaryen._BinaryenGeVecF64x2(),\n  AndV128 = binaryen._BinaryenAndVec128(),\n  OrV128 = binaryen._BinaryenOrVec128(),\n  XorV128 = binaryen._BinaryenXorVec128(),\n  AndNotV128 = binaryen._BinaryenAndNotVec128(),\n  AddI8x16 = binaryen._BinaryenAddVecI8x16(),\n  AddSatI8x16 = binaryen._BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = binaryen._BinaryenAddSatUVecI8x16(),\n  SubI8x16 = binaryen._BinaryenSubVecI8x16(),\n  SubSatI8x16 = binaryen._BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = binaryen._BinaryenSubSatUVecI8x16(),\n  MulI8x16 = binaryen._BinaryenMulVecI8x16(),\n  MinI8x16 = binaryen._BinaryenMinSVecI8x16(),\n  MinU8x16 = binaryen._BinaryenMinUVecI8x16(),\n  MaxI8x16 = binaryen._BinaryenMaxSVecI8x16(),\n  MaxU8x16 = binaryen._BinaryenMaxUVecI8x16(),\n  AddI16x8 = binaryen._BinaryenAddVecI16x8(),\n  AddSatI16x8 = binaryen._BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = binaryen._BinaryenAddSatUVecI16x8(),\n  SubI16x8 = binaryen._BinaryenSubVecI16x8(),\n  SubSatI16x8 = binaryen._BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = binaryen._BinaryenSubSatUVecI16x8(),\n  MulI16x8 = binaryen._BinaryenMulVecI16x8(),\n  MinI16x8 = binaryen._BinaryenMinSVecI16x8(),\n  MinU16x8 = binaryen._BinaryenMinUVecI16x8(),\n  MaxI16x8 = binaryen._BinaryenMaxSVecI16x8(),\n  MaxU16x8 = binaryen._BinaryenMaxUVecI16x8(),\n  AddI32x4 = binaryen._BinaryenAddVecI32x4(),\n  SubI32x4 = binaryen._BinaryenSubVecI32x4(),\n  MulI32x4 = binaryen._BinaryenMulVecI32x4(),\n  MinI32x4 = binaryen._BinaryenMinSVecI32x4(),\n  MinU32x4 = binaryen._BinaryenMinUVecI32x4(),\n  MaxI32x4 = binaryen._BinaryenMaxSVecI32x4(),\n  MaxU32x4 = binaryen._BinaryenMaxUVecI32x4(),\n  DotI16x8 = binaryen._BinaryenDotSVecI16x8ToVecI32x4(),\n  AddI64x2 = binaryen._BinaryenAddVecI64x2(),\n  SubI64x2 = binaryen._BinaryenSubVecI64x2(),\n  AddF32x4 = binaryen._BinaryenAddVecF32x4(),\n  SubF32x4 = binaryen._BinaryenSubVecF32x4(),\n  MulF32x4 = binaryen._BinaryenMulVecF32x4(),\n  DivF32x4 = binaryen._BinaryenDivVecF32x4(),\n  MinF32x4 = binaryen._BinaryenMinVecF32x4(),\n  MaxF32x4 = binaryen._BinaryenMaxVecF32x4(),\n  AddF64x2 = binaryen._BinaryenAddVecF64x2(),\n  SubF64x2 = binaryen._BinaryenSubVecF64x2(),\n  MulF64x2 = binaryen._BinaryenMulVecF64x2(),\n  DivF64x2 = binaryen._BinaryenDivVecF64x2(),\n  MinF64x2 = binaryen._BinaryenMinVecF64x2(),\n  MaxF64x2 = binaryen._BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = binaryen._BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = binaryen._BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = binaryen._BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = binaryen._BinaryenNarrowUVecI32x4ToVecI16x8(),\n  SwizzleV8x16 = binaryen._BinaryenSwizzleVec8x16()\n}\n\nexport enum HostOp {\n  MemorySize = binaryen._BinaryenMemorySize(),\n  MemoryGrow = binaryen._BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = binaryen._BinaryenAtomicRMWAdd(),\n  Sub = binaryen._BinaryenAtomicRMWSub(),\n  And = binaryen._BinaryenAtomicRMWAnd(),\n  Or = binaryen._BinaryenAtomicRMWOr(),\n  Xor = binaryen._BinaryenAtomicRMWXor(),\n  Xchg = binaryen._BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = binaryen._BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = binaryen._BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = binaryen._BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = binaryen._BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = binaryen._BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = binaryen._BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = binaryen._BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = binaryen._BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = binaryen._BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = binaryen._BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = binaryen._BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = binaryen._BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = binaryen._BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = binaryen._BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = binaryen._BinaryenShlVecI8x16(),\n  ShrI8x16 = binaryen._BinaryenShrSVecI8x16(),\n  ShrU8x16 = binaryen._BinaryenShrUVecI8x16(),\n  ShlI16x8 = binaryen._BinaryenShlVecI16x8(),\n  ShrI16x8 = binaryen._BinaryenShrSVecI16x8(),\n  ShrU16x8 = binaryen._BinaryenShrUVecI16x8(),\n  ShlI32x4 = binaryen._BinaryenShlVecI32x4(),\n  ShrI32x4 = binaryen._BinaryenShrSVecI32x4(),\n  ShrU32x4 = binaryen._BinaryenShrUVecI32x4(),\n  ShlI64x2 = binaryen._BinaryenShlVecI64x2(),\n  ShrI64x2 = binaryen._BinaryenShrSVecI64x2(),\n  ShrU64x2 = binaryen._BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = binaryen._BinaryenBitselectVec128(),\n  QFMAF32x4 = binaryen._BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = binaryen._BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = binaryen._BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = binaryen._BinaryenQFMSVecF64x2()\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = binaryen._BinaryenLoadSplatVec8x16(),\n  LoadSplatV16x8 = binaryen._BinaryenLoadSplatVec16x8(),\n  LoadSplatV32x4 = binaryen._BinaryenLoadSplatVec32x4(),\n  LoadSplatV64x2 = binaryen._BinaryenLoadSplatVec64x2(),\n  LoadI8ToI16x8 = binaryen._BinaryenLoadExtSVec8x8ToVecI16x8(),\n  LoadU8ToU16x8 = binaryen._BinaryenLoadExtUVec8x8ToVecI16x8(),\n  LoadI16ToI32x4 = binaryen._BinaryenLoadExtSVec16x4ToVecI32x4(),\n  LoadU16ToU32x4 = binaryen._BinaryenLoadExtUVec16x4ToVecI32x4(),\n  LoadI32ToI64x2 = binaryen._BinaryenLoadExtSVec32x2ToVecI64x2(),\n  LoadU32ToU64x2 = binaryen._BinaryenLoadExtUVec32x2ToVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // function types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionTypeRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var typeRef = binaryen._BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n    var ret = binaryen._BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n    binaryen._BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = binaryen.__i32_load(out);\n      let binaryLen = binaryen.__i32_load(out + 4);\n      sourceMapPtr = binaryen.__i32_load(out + 8);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryLen);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) binaryen._free(cStr);\n      if (binaryPtr) binaryen._free(binaryPtr);\n      if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) binaryen._free(ptr);\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// function types\n\nexport function getFunctionTypeName(ftype: FunctionTypeRef): string | null {\n  return readString(binaryen._BinaryenFunctionTypeGetName(ftype));\n}\n\nexport function getFunctionTypeParamCount(ftype: FunctionTypeRef): Index {\n  return binaryen._BinaryenFunctionTypeGetNumParams(ftype);\n}\n\nexport function getFunctionTypeParam(ftype: FunctionTypeRef, index: Index): NativeType {\n  return binaryen._BinaryenFunctionTypeGetParam(ftype, index);\n}\n\nexport function getFunctionTypeResult(ftype: FunctionTypeRef): NativeType {\n  return binaryen._BinaryenFunctionTypeGetResult(ftype);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return binaryen._BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResult(func);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return binaryen._BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return binaryen._BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = binaryen._BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(binaryen._BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(binaryen._BinaryenIfGetCondition(expr))\n          || hasSideEffects(binaryen._BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(binaryen._BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(binaryen._BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(binaryen._BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(binaryen._BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(binaryen._BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(binaryen._BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(binaryen._BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(binaryen._BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n  /** An internal exception reference. */\n  EXNREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: assert(false);\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.EXNREF: return \"e\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** An internal exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is a function parameter. */\n  PARAMETER = 1 << 1,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 2,\n  /** Local is non-null. */\n  NONNULL = 1 << 3,\n  /** Local is read from. */\n  READFROM = 1 << 4,\n  /** Local is written to. */\n  WRITTENTO = 1 << 5,\n  /** Local is retained. */\n  RETAINED = 1 << 6,\n  /** Local is returned. */\n  RETURNED = 1 << 7,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 8,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 9,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 10,\n  /** Local is conditionally returned. */\n  CONDITIONALLY_RETURNED = 1 << 11,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | PARAMETER\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED\n                  | RETURNED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED\n                  | CONDITIONALLY_RETURNED,\n\n  /** Any written to flag. */\n  ANY_WRITTENTO = WRITTENTO\n                | CONDITIONALLY_WRITTENTO,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED,\n\n  /** Any returned flag. */\n  ANY_RETURNED = RETURNED\n               | CONDITIONALLY_RETURNED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && scope.has(name)) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n      if (flags & LocalFlags.RETURNED)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  EventRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Registered event types. */\n  events: Map<string, EventRef> = new Map();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: FeatureFlags = 0;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable, module.i32(0));\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeReplace(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = this.makeZero(type);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Either reuses or creates the event type matching the specified name. */\n  ensureEventType(\n    name: string,\n    parameterTypes: Type[] | null\n  ): EventRef {\n    var events = this.events;\n    if (events.has(name)) return events.get(name)!;\n    var module = this.module;\n    var funcType = this.ensureFunctionType(parameterTypes, Type.void);\n    var eventType = module.addEvent(name, 0, funcType);\n    events.set(name, eventType);\n    return eventType;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    // Compile the condition before the body in order to...\n    var condFlow = outerFlow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    assert(!condFlow.hasScopedLocals);\n    // ...unify local states before and after the condition has been executed the first time\n    innerFlow.unifyLocalFlags(condFlow);\n    this.currentFlow = innerFlow;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) {\n      this.performAutoreleases(innerFlow, stmts);\n      if (!alwaysFalse) { // (4)\n        stmts.push(module.br(continueLabel, condExpr));\n      }\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile the incrementor before the body in order to...\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) {\n      let incrFlow = innerFlow.fork();\n      this.currentFlow = incrFlow;\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n      assert(!incrFlow.hasScopedLocals);\n      this.currentFlow = innerFlow;\n      // ...unify local states before and after the incrementor has been executed the first time\n      innerFlow.unifyLocalFlags(incrFlow);\n    }\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var bodyFlow = innerFlow.fork();\n    this.currentFlow = bodyFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\n    bodyFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    bodyFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    // Finalize body flow\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\n    bodyFlow.freeScopedLocals();\n    innerFlow.inherit(bodyFlow);\n    this.currentFlow = innerFlow;\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            let index = getLocalGetIndex(expr);\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(type);\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(temp.index, expr),\n            module.local_get(temp.index, type.toNativeType()),\n            module.unreachable()\n          );\n          flow.freeTempLocal(temp);\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n              module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, parent.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, parent.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let targetType = (<Class>parent).type;\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(targetType);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          module.local_get(localIndex, type.toNativeType()),\n          valueExpr,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          module.global_get(global.internalName, nativeType), // oldRef\n          valueExpr, // newRef\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              module.local_tee(tempValue.index, valueExpr), // newRef\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            valueExpr, // newRef\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(oldExpr: ExpressionRef, newExpr: ExpressionRef, alreadyRetained: bool = false): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.block(null, stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          // TODO: anyref context yields <usize>0\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        if (target.parent != flow.parentFunction) {\n          // Closures are not yet supported\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          this.currentType = type;\n          return module.unreachable();\n        }\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = this.makeZero(fieldType);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","const binaryen = global.Binaryen || require(\"binaryen\");\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          case TypeKind.EXNREF: { value = \"exnref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct:\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\n          operands[0].range, arg0Type.toString()\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinSymbols.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_dot_i16x8_s: return deferASM(BuiltinSymbols.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = compiler.makeZero(stringInstance.type);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(name, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier()) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__21__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false,\n  /** Parser reference. */\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}