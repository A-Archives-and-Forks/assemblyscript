{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","source","toString","normalizedPath","lineAt","start","columnAt","formatDiagnosticContext","useColors","text","len","length","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","relatedSource","diagnostics","seen","has","seenInSource","seenCodesAtPos","includes","set","withRange","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","node","TypeName","kind","TYPENAME","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","NAMEDTYPE","parameters","returnType","explicitThisType","FunctionTypeNode","FUNCTIONTYPE","createNamedType","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","TYPEPARAMETER","type","initializer","ParameterNode","PARAMETER","parameterKind","args","DecoratorNode","DECORATOR","arguments","decoratorKind","fromNode","CommentNode","COMMENT","commentKind","isQuoted","IdentifierExpression","IDENTIFIER","elements","ArrayLiteralExpression","LITERAL","literalKind","ARRAY","elementExpressions","assertionKind","expression","toType","AssertionExpression","ASSERTION","operator","left","right","BinaryExpression","BINARY","typeArgs","CallExpression","CALL","declaration","ClassExpression","CLASS","expressions","CommaExpression","COMMA","ConstructorExpression","CONSTRUCTOR","element","ElementAccessExpression","ELEMENTACCESS","elementExpression","FalseExpression","FALSE","FloatLiteralExpression","FLOAT","FunctionExpression","FUNCTION","isType","InstanceOfExpression","INSTANCEOF","IntegerLiteralExpression","INTEGER","typeName","NewExpression","NEW","NullExpression","NULL","names","values","ObjectLiteralExpression","OBJECT","ParenthesizedExpression","PARENTHESIZED","PropertyAccessExpression","PROPERTYACCESS","pattern","flags","RegexpLiteralExpression","REGEXP","patternFlags","condition","ifThen","ifElse","TernaryExpression","TERNARY","StringLiteralExpression","STRING","SuperExpression","SUPER","ThisExpression","THIS","TrueExpression","TRUE","operand","UnaryPostfixExpression","UNARYPOSTFIX","UnaryPrefixExpression","UNARYPREFIX","statements","BlockStatement","BLOCK","label","BreakStatement","BREAK","typeParameters","implementsTypes","members","decorators","ClassDeclaration","CLASSDECLARATION","ContinueStatement","CONTINUE","statement","DoStatement","DO","EmptyStatement","EnumDeclaration","ENUMDECLARATION","EnumValueDeclaration","ENUMVALUEDECLARATION","path","isDeclare","ExportStatement","EXPORT","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","EXPORTDEFAULT","externalName","ExportImportStatement","EXPORTIMPORT","ExportMember","EXPORTMEMBER","localName","exportedName","ExpressionStatement","EXPRESSION","ifTrue","ifFalse","IfStatement","IF","decls","ImportStatement","IMPORT","declarations","namespaceName","foreignName","ImportDeclaration","IMPORTDECLARATION","InterfaceDeclaration","INTERFACEDECLARATION","FieldDeclaration","FIELDDECLARATION","incrementor","ForStatement","FOR","variable","iterable","ForOfStatement","FOROF","signature","body","arrowKind","FunctionDeclaration","FUNCTIONDECLARATION","keyType","valueType","IndexSignatureDeclaration","INDEXSIGNATUREDECLARATION","MethodDeclaration","METHODDECLARATION","NamespaceDeclaration","NAMESPACEDECLARATION","ReturnStatement","RETURN","cases","SwitchStatement","SWITCH","SwitchCase","SWITCHCASE","ThrowStatement","THROW","catchVariable","catchStatements","finallyStatements","TryStatement","TRY","alias","TypeDeclaration","TYPEDECLARATION","VariableStatement","VARIABLE","VariableDeclaration","VARIABLEDECLARATION","VoidStatement","VOID","WhileStatement","WHILE","changetype","TypeNode","typeParameterNodes","namedTypeNode","typeArgumentNodes","k","hasGenericComponent","functionTypeNode","parameterNodes","ParameterKind","implicitFieldDeclaration","NONE","flag","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","CommentKind","Expression","LiteralExpression","AssertionKind","numTypeArguments","Range","numArguments","UnaryExpression","Statement","super","debugInfoIndex","exportPaths","lineCache","lineColumn","SOURCE","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","off","unchecked","DeclarationStatement","VariableLikeDeclarationStatement","parameterIndex","ArrowKind","createFunctionDeclaration","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","Token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","initialized","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","lowMemoryLimit","hasFeature","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","firstChar","parseInt","arrayPrototype","staticArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocBufferInstance","allocArrayInstance","_values","Map_values","USER_ENTRY","markModuleExports","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","propertyPrototype","getterPrototype","setterPrototype","PROPERTY","FIELD","staticMembers","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","declaredElements","DeclaredElement","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","inSelf","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","setDebugLocation","debugInfoRef","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extendees","extends","basePtototype","Class","INTERFACE","base","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","isBuiltinArray","lengthField","thisInstanceMembers","baseInstanceMembers","VIRTUAL","nextPrototype","inheritedTypeArguments","baseName","baseType","target","uncheckedOverload","overload","fieldName","field","baseOffset","fieldInstance","writeI8","writeI16","writeF32","writeF64","extendedPrototype","getTypeArgumentsTo","abvInstance","acyclic","hasCycle","cyclesTo","other","except","fieldType","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","NativeType","FeatureFlags","ExpressionId","SideEffects","UnaryOp","BinaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","Auto","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","None","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","Unreachable","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","allocI32Array","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","getSideEffects","features","All","_BinaryenExpressionGetSideEffects","u8s","numValues","i32s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","ch","fromCharCodes","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","auto","isize64","isize32","usize64","usize32","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","indexedGet","resolvedType","baseInstance","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","functionPrototype","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","pendingClasses","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","finishResolveClass","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pendingIndex","indexOf","splice","derivedPendingClasses","pending","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","Exnref","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","functionInstance","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_min","v128_max","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","ensureSmallIntegerWrap","binary","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","currentFlow","temp1","temp2","XorI32","AddI32","local_tee","local_get","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","immAlign","contextualType","outType","numOperands","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","builtin_store","contextIsExact","inType","convertExpression","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","precomputeExpression","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","hasSideEffects","drop","temp","SubF32","SubF64","makeIsTrueish","host","MemorySize","MemoryGrow","compileFunction","compileCallDirect","isChangeableTo","Type_0_cannot_be_changed_to_type_1","makeAbort","if","alreadyUnchecked","unset","compileInstantiate","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","exprs","COMPILED","global_get","addFunction","nativeSizeSize","blocks","outer","addBlockWithSwitch","SubI64","SubI32","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","addMemorySegment","addGlobal","Binaryen","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","importMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","virtualCalls","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","setFeatures","compile","initialize","initializeProgram","startFunctionInstance","startFunctionBody","currentBody","files","compileFile","compileExports","startIsEmpty","unshift","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Set_values","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","setupVirtualLookupTables","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","Function_0_is_possibly_called_virtually_which_is_not_yet_supported","elementName","ensureModuleExport","prefix","functionInstances","fullName","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureTrampoline","ensureBuiltinArgumentsLength","setter","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","checkTypeSupported","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","origInitExpr","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","makeZero","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","local_set","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","makeAllocation","makeFieldInitializationInConstructor","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureConstructor","compileField","compileProperty","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","byteLength","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateConditionKind","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","thenTerminates","elseStmts","elseFlow","elseTerminates","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","compileAssignment","AddF32","AddF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI32","OrI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","tempThis","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","functionTarget","compileCallIndirect","BuiltinContext","fn","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","relatedReportNode","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","Optional_parameter_must_have_an_initializer","newExpr","oldExpr","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","theOperands","isCallImport","allOptionalsAreConstant","compilesToConst","makeCallIndirect","numExpressions","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","nativeArrayType","dataStartMember","bufferSize","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","baseClass","baseCtor","allocExpr","parentEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","supported","v128_zero","ref_is_null","thisLocalIndex","codeLocation","messageArg","filenameArg","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","getStart","getEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","x","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","gt","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","util","readI32","readI64","valueI64","cloned","v","overrides","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal"],"mappings":"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A,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYob,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4Cl9B,GAE1C,OADAkK,OAAOlK,EAAK8L,QACJ9L,EAAKiM,WAAW,IACtB,KAAK,IAAY,MAAe,UAARjM,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsC6hB,GACpC,OAAQA,GACN,KAAKC,EAAM6b,OAAQ,MAAO,SAC1B,KAAK7b,EAAMmc,GAAI,MAAO,KACtB,KAAKnc,EAAMzP,WAAY,MAAO,aAC9B,KAAKyP,EAAMpP,IAAK,MAAO,MACvB,KAAKoP,EAAM8c,OAAQ,MAAO,SAC1B,KAAK9c,EAAM9G,KAAM,MAAO,OACxB,KAAK8G,EAAMid,MAAO,MA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CACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BA/CF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAkDxB,SAAYE,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,sDACA,oDACA,sDACA,oDACA,sDACA,oDACA,uDA3GF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA8GnB,SAAYC,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iDACA,iDACA,iDACA,iDACA,qCA/KF,CAAY,EAAAA,WAAA,EAAAA,SAAQ,KAkLpB,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAYC,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BACA,4BAZF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAevB,SAAYC,GACV,6BACA,6BACA,6BACA,6BACA,6BALF,CAAY,EAAAA,gBAAA,EAAAA,cAA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AzC,WAAWmF,aACtF,EAAAH,gBAAgBvC,IAAS,EAAAvC,aAAamP,MACjC,EAAA8e,iBAAiB1rB,GACpB,EACA,EAEC,I,8EC9lUT,SAAYt9B,GACV,2CACA,mDACA,yCACA,6DACA,iJACA,qGACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,6IACA,uIACA,uIACA,+GACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MArJF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAyJ1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,2EACjB,KAAK,IAAK,MAAO,sDACjB,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,WAAW,CACpE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAA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B,OAAOX,EAGX,OAAS2S,EAAM,GACb,GA7Gc,IA6GV3S,EAAeW,WAAWgS,GAC5B,OAAO3S,EAAea,UAAU,EAAG8R,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4B3S,EAAwB8+G,GAClD,OAAI9+G,EAAeiL,WAAW,QACrBjL,EAEFgL,EACL6zG,EAAQC,GAAU,EAAA1oH,eAAiB4J,IAKvC,a,8EC3GA,SAAkB++G,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4BvqH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAMwqH,EAAS,GAAJxqH,EACX,OAAOwqH,GAAM,IAAcA,GAAM,KACrB,IAALxqH,GACK,IAALA,GACAA,EAAI,SAmLqB8K,EAnLY9K,GAoL9B,KAAO8K,EAAO,QACrB2/G,EAAmB3/G,EAAa4/G,IAFzC,IAAkC5/G,GA/KlC,8BAAmC9K,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMwqH,EAAS,GAAJxqH,EACX,OAAOwqH,GAAM,IAAcA,GAAM,KAC1BxqH,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB8K,EAzKY9K,GA0K7B,KAAO8K,EAAO,QACrB2/G,EAAmB3/G,EAAa6/G,IAFzC,IAAiC7/G,GArKjC,MAAM4/G,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmB3/G,EAAWy9G,GACrC,GAAIz9G,EAAOy9G,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIqC,EACAC,EAHA3L,EAAK,EACLC,EAAKoJ,EAAIv8G,OAINkzG,EAAK,EAAIC,GAAI,CAIlB,GAHAyL,EAAM1L,GAAOC,EAAKD,GAAO,IAEzB2L,EAAStC,EADTqC,GAAc,EAANA,KAEM9/G,GAAQA,GAAQy9G,EAAIqC,EAAM,GACtC,OAAO,EAEL9/G,EAAO+/G,EACT1L,EAAKyL,EAEL1L,EAAK0L,EAAM,EAGf,OAAO,EAkBT,kBAAuBx+G,EAAcilC,GACnC,KAAOA,GAAS,GACdjlC,EAAGE,KALU,YAMb+kC,GAAS,EAEPA,GAAS,IACXjlC,EAAGE,KAVU,QAWb+kC,GAAS,GAEPA,GACFjlC,EAAGE,KAfU","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \":\" +\n        source.lineAt(range.start).toString() +\n        \":\" +\n        source.columnAt().toString()\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,i32[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenCodesAtPos = assert(seenInSource.get(range.start));\n          if (seenCodesAtPos.includes(code)) return;\n          seenCodesAtPos.push(code);\n        } else {\n          seenInSource.set(range.start, [ code ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,i32[]>();\n        seenInSource.set(range.start, [ code ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var node = new TypeName();\n    node.kind = NodeKind.TYPENAME;\n    node.range = range;\n    node.identifier = name;\n    node.next = null;\n    return node;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var node = new NamedTypeNode();\n    node.kind = NodeKind.NAMEDTYPE;\n    node.range = range;\n    node.name = name;\n    node.typeArguments = typeArguments;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var node = new FunctionTypeNode();\n    node.kind = NodeKind.FUNCTIONTYPE;\n    node.range = range;\n    node.parameters = parameters;\n    node.returnType = returnType;\n    node.explicitThisType = explicitThisType;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var node = new TypeParameterNode();\n    node.kind = NodeKind.TYPEPARAMETER;\n    node.range = range;\n    node.name = name;\n    node.extendsType = extendsType;\n    node.defaultType = defaultType;\n    return node;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var node = new ParameterNode();\n    node.kind = NodeKind.PARAMETER;\n    node.range = range;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.parameterKind = kind;\n    return node;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var node = new DecoratorNode();\n    node.kind = NodeKind.DECORATOR;\n    node.range = range;\n    node.name = name;\n    node.arguments = args;\n    node.decoratorKind = DecoratorKind.fromNode(name);\n    return node;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.kind = NodeKind.COMMENT;\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = name;\n    node.isQuoted = isQuoted;\n    return node;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = \"\";\n    return node;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var node = new ArrayLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.range = range;\n    node.literalKind = LiteralKind.ARRAY;\n    node.elementExpressions = elements;\n    return node;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var node = new AssertionExpression();\n    node.kind = NodeKind.ASSERTION;\n    node.range = range;\n    node.assertionKind = assertionKind;\n    node.expression = expression;\n    node.toType = toType;\n    return node;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var node = new BinaryExpression();\n    node.kind = NodeKind.BINARY;\n    node.range = range;\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var node = new CallExpression();\n    node.kind = NodeKind.CALL;\n    node.range = range;\n    node.expression = expression;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var node = new ClassExpression();\n    node.kind = NodeKind.CLASS;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var node = new CommaExpression();\n    node.kind = NodeKind.COMMA;\n    node.range = range;\n    node.expressions = expressions;\n    return node;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var node = new ConstructorExpression();\n    node.kind = NodeKind.CONSTRUCTOR;\n    node.range = range;\n    node.text = \"constructor\";\n    return node;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var node = new ElementAccessExpression();\n    node.kind = NodeKind.ELEMENTACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.elementExpression = element;\n    return node;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var node = new FalseExpression();\n    node.kind = NodeKind.FALSE;\n    node.range = range;\n    node.text = \"false\";\n    return node;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var node = new FloatLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.FLOAT;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var node = new FunctionExpression();\n    node.kind = NodeKind.FUNCTION;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var node = new InstanceOfExpression();\n    node.kind = NodeKind.INSTANCEOF;\n    node.range = range;\n    node.expression = expression;\n    node.isType = isType;\n    return node;\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var node = new IntegerLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.INTEGER;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var node = new NewExpression();\n    node.kind = NodeKind.NEW;\n    node.range = range;\n    node.typeName = typeName;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var node = new NullExpression();\n    node.kind = NodeKind.NULL;\n    node.range = range;\n    node.text = \"null\";\n    return node;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var node = new ObjectLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.OBJECT;\n    node.range = range;\n    node.names = names;\n    node.values = values;\n    return node;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var node = new ParenthesizedExpression();\n    node.kind = NodeKind.PARENTHESIZED;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var node = new PropertyAccessExpression();\n    node.kind = NodeKind.PROPERTYACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.property = property;\n    return node;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var node = new RegexpLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.REGEXP;\n    node.range = range;\n    node.pattern = pattern;\n    node.patternFlags = flags;\n    return node;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var node = new TernaryExpression();\n    node.kind = NodeKind.TERNARY;\n    node.range = range;\n    node.condition = condition;\n    node.ifThen = ifThen;\n    node.ifElse = ifElse;\n    return node;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var node = new StringLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.STRING;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var node = new SuperExpression();\n    node.kind = NodeKind.SUPER;\n    node.range = range;\n    node.text = \"super\";\n    return node;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var node = new ThisExpression();\n    node.kind = NodeKind.THIS;\n    node.range = range;\n    node.text = \"this\";\n    return node;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var node = new TrueExpression();\n    node.kind = NodeKind.TRUE;\n    node.range = range;\n    node.text = \"true\";\n    return node;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var node = new UnaryPostfixExpression();\n    node.kind = NodeKind.UNARYPOSTFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var node = new UnaryPrefixExpression();\n    node.kind = NodeKind.UNARYPREFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var node = new BlockStatement();\n    node.kind = NodeKind.BLOCK;\n    node.range = range;\n    node.statements = statements;\n    return node;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var node = new BreakStatement();\n    node.kind = NodeKind.BREAK;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var node = new ClassDeclaration();\n    node.kind = NodeKind.CLASSDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = identifier;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.implementsTypes = implementsTypes;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var node = new ContinueStatement();\n    node.kind = NodeKind.CONTINUE;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var node = new DoStatement();\n    node.kind = NodeKind.DO;\n    node.range = range;\n    node.statement = statement;\n    node.condition = condition;\n    return node;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var node = new EmptyStatement();\n    node.kind = NodeKind.EMPTY;\n    node.range = range;\n    return node;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var node = new EnumDeclaration();\n    node.kind = NodeKind.ENUMDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.values = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var node = new EnumValueDeclaration();\n    node.kind = NodeKind.ENUMVALUEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.value = value;\n    return node;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var node = new ExportStatement();\n    node.kind = NodeKind.EXPORT;\n    node.range = range;\n    node.members = members;\n    node.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      node.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      node.internalPath = null;\n    }\n    node.isDeclare = isDeclare;\n    return node;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var node = new ExportDefaultStatement();\n    node.kind = NodeKind.EXPORTDEFAULT;\n    node.declaration = declaration;\n    node.range = range;\n    return node;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var node = new ExportImportStatement();\n    node.kind = NodeKind.EXPORTIMPORT;\n    node.range = range;\n    node.name = name;\n    node.externalName = externalName;\n    return node;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var node = new ExportMember();\n    node.kind = NodeKind.EXPORTMEMBER;\n    node.range = range;\n    node.localName = name;\n    if (!externalName) externalName = name;\n    node.exportedName = externalName;\n    return node;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var node = new ExpressionStatement();\n    node.kind = NodeKind.EXPRESSION;\n    node.range = expression.range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var node = new IfStatement();\n    node.kind = NodeKind.IF;\n    node.range = range;\n    node.condition = condition;\n    node.ifTrue = ifTrue;\n    node.ifFalse = ifFalse;\n    return node;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = decls;\n    node.namespaceName = null;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = null;\n    node.namespaceName = identifier;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var node = new ImportDeclaration();\n    node.kind = NodeKind.IMPORTDECLARATION;\n    node.range = range;\n    node.foreignName = foreignName;\n    if (!name) name = foreignName;\n    node.name = name;\n    return node;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var node = new InterfaceDeclaration();\n    node.kind = NodeKind.INTERFACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var node = new FieldDeclaration();\n    node.kind = NodeKind.FIELDDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var node = new ForStatement();\n    node.kind = NodeKind.FOR;\n    node.range = range;\n    node.initializer = initializer;\n    node.condition = condition;\n    node.incrementor = incrementor;\n    node.statement = statement;\n    return node;\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    var node = new ForOfStatement();\n    node.kind = NodeKind.FOROF;\n    node.range = range;\n    node.variable = variable;\n    node.iterable = iterable;\n    node.statement = statement;\n    return node;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var node = new FunctionDeclaration();\n    node.kind = NodeKind.FUNCTIONDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    node.arrowKind = arrowKind;\n    return node;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var node = new IndexSignatureDeclaration();\n    node.kind = NodeKind.INDEXSIGNATUREDECLARATION;\n    node.range = range;\n    node.keyType = keyType;\n    node.valueType = valueType;\n    node.flags = flags;\n    return node;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var node = new MethodDeclaration();\n    node.kind = NodeKind.METHODDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var node = new NamespaceDeclaration();\n    node.kind = NodeKind.NAMESPACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var node = new ReturnStatement();\n    node.kind = NodeKind.RETURN;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var node = new SwitchStatement();\n    node.kind = NodeKind.SWITCH;\n    node.range = range;\n    node.condition = condition;\n    node.cases = cases;\n    return node;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var node = new SwitchCase();\n    node.kind = NodeKind.SWITCHCASE;\n    node.range = range;\n    node.label = label;\n    node.statements = statements;\n    return node;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var node = new ThrowStatement();\n    node.kind = NodeKind.THROW;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var node = new TryStatement();\n    node.kind = NodeKind.TRY;\n    node.range = range;\n    node.statements = statements;\n    node.catchVariable = catchVariable;\n    node.catchStatements = catchStatements;\n    node.finallyStatements = finallyStatements;\n    return node;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var node = new TypeDeclaration();\n    node.kind = NodeKind.TYPEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.type = alias;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var node = new VariableStatement();\n    node.kind = NodeKind.VARIABLE;\n    node.range = range;\n    node.declarations = declarations;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var node = new VariableDeclaration();\n    node.kind = NodeKind.VARIABLEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators; // inherited\n    return node;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var node = new VoidStatement();\n    node.kind = NodeKind.VOID;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var node = new WhileStatement();\n    node.kind = NodeKind.WHILE;\n    node.range = range;\n    node.condition = condition;\n    node.statement = statement;\n    return node;\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        // @operator.binary, @operator.prefix, @operator.postfix\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL,\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  /** Integer value. */\n  value: i64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.kind = NodeKind.SOURCE;\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Rememberd column number. */\n  private lineColumn: i32 = 0;\n\n  /** Determines the line number at the specified position. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n  variable: Statement;\n  /** Iterable expression being iterated. */\n  iterable: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// ├─File                     File, analogous to Source in the AST\n// └─FunctionTarget           Indirectly called function helper (typed)\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Static array prototype reference. */\n  staticArrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` */\n  allocBufferInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, signature, null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    // Initialize only once\n    if (this.initialized) return;\n\n    this.initialized = true;\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, basePrototype.identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) continue; // explicitly disabled\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.staticArrayPrototype = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocBufferInstance = this.requireFunction(CommonNames.allocBuffer);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? assert(filesByName.get(foreignPath))\n         : filesByName.has(foreignPathAlt)\n         ? assert(filesByName.get(foreignPathAlt))\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.arguments;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt()\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n\n    // Remember extendees and mark overloaded methods virtual\n    var basePrototype: ClassPrototype  = base.prototype;\n    var thisPrototype = this.prototype;\n    assert(basePrototype != thisPrototype);\n    basePrototype.extendees.add(thisPrototype);\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _keys = Map_keys(baseInstanceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = _keys[i];\n            let member = assert(baseInstanceMembers.get(memberName));\n            if (thisInstanceMembers.has(memberName)) {\n              member.set(CommonFlags.VIRTUAL);\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      switch (fieldInstance.type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.f32ArrayPrototype) return Type.f32;\n        if (prototype == program.f64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.i8ArrayPrototype) return Type.i8;\n        if (prototype == program.i16ArrayPrototype) return Type.i16;\n        if (prototype == program.i32ArrayPrototype) return Type.i32;\n        if (prototype == program.i64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.u8ArrayPrototype) return Type.u8;\n        if (prototype == program.u8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.u16ArrayPrototype) return Type.u16;\n        if (prototype == program.u32ArrayPrototype) return Type.u32;\n        if (prototype == program.u64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.is(TypeFlags.REFERENCE)) {\n            if ((current = fieldType.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = []\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n  debugInfoRef: usize = 0;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) reusableState = null;\n    else state = new State();\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport enum NativeType {\n  None = 0 /* _BinaryenTypeNone */,\n  Unreachable = 1 /* _BinaryenTypeUnreachable */,\n  I32 = 2 /* _BinaryenTypeInt32 */,\n  I64 = 3 /* _BinaryenTypeInt64 */,\n  F32 = 4 /* _BinaryenTypeFloat32 */,\n  F64 = 5 /* _BinaryenTypeFloat64 */,\n  V128 = 6 /* _BinaryenTypeVec128 */,\n  Funcref = 7 /* _BinaryenTypeFuncref */,\n  Anyref = 8 /* _BinaryenTypeAnyref */,\n  Nullref = 9 /* _BinaryenTypeNullref */,\n  Exnref = 10 /* _BinaryenTypeExnref */,\n  Auto = -1 /* _BinaryenTypeAuto */\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  All = 1023 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  NegI8x16 = 67 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 68 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 69 /* _BinaryenAllTrueVecI8x16 */,\n  NegI16x8 = 70 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 71 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 72 /* _BinaryenAllTrueVecI16x8 */,\n  NegI32x4 = 73 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 74 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 75 /* _BinaryenAllTrueVecI32x4 */,\n  NegI64x2 = 76 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 77 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 78 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 79 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 80 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 81 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 82 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 83 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 84 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 85 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 86 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 87 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 88 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 89 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 90 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 91 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 92 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 93 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 94 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 95 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 96 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 97 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 98 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 99 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 100 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  AddF64x2 = 162 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 163 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 164 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 165 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 166 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 167 /* _BinaryenMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 168 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 169 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 170 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 171 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 172 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: i64;\n\n  static create(buffer: Uint8Array, offset: i64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocPtrArray([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var ret = new BinaryModule();\n    ret.output = readBuffer(binaryPtr, binaryLen);\n    ret.sourceMap = readString(sourceMapPtr);\n    binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return ret;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocI32Array(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  Any = 2047 /* _BinaryenSideEffectAny */,\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var ptr = binaryen._malloc(u32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = u32s.length; i < k; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var ptr = binaryen._malloc(ptrs.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = ptrs.length; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: i32): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n  // return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    var cachedNullableType = this.cachedNullableType;\n    if (!cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      cachedNullableType.nonNullableType = this;\n      cachedNullableType.classReference = this.classReference;       // either a class reference\n      cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames !== null && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) {\n      return (<FunctionTarget>element).type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return assert(wrapperClasses.get(type));\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, variableLikeElement.type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterInstance = this.resolveFunction( // reports\n          assert(propertyPrototype.getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = assert(wrapperClasses.get(returnType));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return assert(members.get(propertyName)); // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      while (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          node.range\n        );\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return assert(wrapperClasses.get(intType));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return assert(wrapperClasses.get(fltType));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return assert(wrapperClasses.get(Type.bool));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Class[] = [];\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.push(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.includes(base)) return instance;\n    }\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var instanceMembers = instance.members;\n    if (!instanceMembers) instance.members = instanceMembers = new Map();\n\n    // Alias base members\n    var pendingClasses = this.resolveClassPending;\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.includes(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let baseMemberName = unchecked(_keys[i]);\n          let baseMember = assert(baseMembers.get(baseMemberName));\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>member;\n            let propertyInstance = new Property(propertyPrototype, instance);\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.nextMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n      if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          assert(instance.contextualTypeArguments),\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    var pendingIndex = pendingClasses.indexOf(instance);\n    assert(~pendingIndex); // must be pending\n    pendingClasses.splice(pendingIndex, 1);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    var derivedPendingClasses = new Array<Class>();\n    for (let i = 0, k = pendingClasses.length; i < k; ++i) {\n      let pending = pendingClasses[i];\n      if (instance == pending.base) derivedPendingClasses.push(pending);\n    }\n    for (let i = 0, k = derivedPendingClasses.length; i < k; ++i) {\n      this.finishResolveClass(derivedPendingClasses[i], reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 13,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ALLOCATES) { // can become conditional\n      if (otherFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (otherFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ALLOCATES) {\n      if (rightFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (rightFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ALLOCATES)) sb.push(\"ALLOCATES\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ALLOCATES)) sb.push(\"CONDITIONALLY_ALLOCATES\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects,\n  createType\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  /** Compiler reference. */\n  compiler: Compiler;\n  /** Prototype being called. */\n  prototype: FunctionPrototype;\n  /** Provided type arguments. */\n  typeArguments: Type[] | null;\n  /** Provided operands. */\n  operands: Expression[];\n  /** Contextual type. */\n  contextualType: Type;\n  /** Respective call expression. */\n  reportNode: CallExpression;\n  /** Whether originating from inline assembly. */\n  contextIsExact: bool;\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.FLOAT) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type == Type.bool ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.SIGNED) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      let stringInstance = compiler.program.stringInstance;\n      if (stringInstance !== null && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.signatureReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classType = type.classReference;\n  if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classType.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classType.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classType.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.is(TypeFlags.REFERENCE)) {\n    let classReference = resultType.classReference;\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.signatureReference;\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        value = \"Anyref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.ANYREF: { value = \"anyref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let signatureReference = type.signatureReference;\n    if (signatureReference) {\n      return module.i32(signatureReference.id);\n    }\n    let classReference = type.classReference;\n    if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      return module.i32(classReference.id);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(0)\n            ], NativeType.I32)\n          : module.i32(0);\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(1)\n            ], NativeType.I32)\n          : module.i32(1);\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (operands.length == 4) {\n    immAlign = evaluateImmediateOffset(operands[3], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[3].range, \"Alignment\"\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType // ^\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // if the assertion can be proven statically, omit it\n  if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n    switch (getExpressionType(arg0)) {\n      case NativeType.I32: {\n        if (getConstValueI32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.I64: {\n        if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        if (getConstValueF32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        if (getConstValueF64(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // return ifTrueish if assertions are disabled\n  if (compiler.options.noAssert) {\n    if (contextualType == Type.void) { // simplify if dropped anyway\n      compiler.currentType = Type.void;\n      return module.nop();\n    }\n    return arg0;\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    ctx.reportNode.typeArgumentsRange\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.classReference;\n  if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI8(getConstValueI32(expr), bytes, i);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI16(getConstValueI32(expr), bytes, i << 1);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI32(getConstValueI32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I64);\n      let off = i << 3;\n      writeI32(getConstValueI64Low(expr), bytes, off);\n      writeI32(getConstValueI64High(expr), bytes, off + 4);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F32);\n      writeF32(getConstValueF32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F64);\n      writeF64(getConstValueF64(expr), bytes, i << 3);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(argN) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(argN) == NativeType.I32);\n          let idx = getConstValueI32(argN);\n          if (idx < 0 || idx > maxIdx) {\n            compiler.error(\n              DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n              operand.range, \"Lane index\", \"0\", maxIdx.toString()\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.is(TypeFlags.INTEGER | TypeFlags.VALUE)) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.Binaryen || (global.Binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonNames,\n  INDEX_SUFFIX,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Static table start offset. */\n  tableBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: i32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    module.setFeatures(featureFlags);\n  }\n\n  initializeProgram(): void {\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize(this.options);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // check and perform this program initialization if it hasn't been done\n    this.initializeProgram();\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyLibraryFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    this.setupVirtualLookupTables();\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      ExportNames.memory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  private setupVirtualLookupTables(): void {\n    // TODO: :-)\n    var program = this.program;\n    var virtualCalls = this.virtualCalls;\n\n    // Virtual instance methods in the function table are potentially called virtually\n    var functionTable = this.functionTable;\n    var elementsByName = program.elementsByName;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instanceName = unchecked(functionTable[i]);\n      if (elementsByName.has(instanceName)) { // otherwise ~anonymous\n        let instance = assert(elementsByName.get(instanceName));\n        if (instance.is(CommonFlags.INSTANCE | CommonFlags.VIRTUAL)) {\n          assert(instance.kind == ElementKind.FUNCTION);\n          virtualCalls.add(<Function>instance);\n        }\n      }\n    }\n\n    // Inject a virtual lookup table into each function potentially called virtually\n    // TODO: for (let instance of virtualCalls.values()) {\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.warning(\n        DiagnosticCode.Function_0_is_possibly_called_virtually_which_is_not_yet_supported,\n        instance.identifierNode.range, instance.internalName\n      );\n    }\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionInstances = (<FunctionPrototype>element).instances;\n        if (functionInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classInstances = (<ClassPrototype>element).instances;\n        if (classInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.ensureModuleExport(GETTER_PREFIX + name, getterPrototype, prefix);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.ensureModuleExport(SETTER_PREFIX + name, setterPrototype, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        let signature = functionInstance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          functionInstance = this.ensureTrampoline(functionInstance);\n          this.ensureBuiltinArgumentsLength();\n        }\n        if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getter = propertyInstance.getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = propertyInstance.setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (instance) this.compileClass(instance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          assert(!getterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(getterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) {\n          assert(!setterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          let origInitExpr = initExpr;\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n          if (this.skippedAutoreleases.has(origInitExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n          }\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      let body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        body = module.block(\"vtable\", [ body ], getExpressionType(body));\n      }\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract function\n    } else if (instance.is(CommonFlags.ABSTRACT)) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n      this.virtualCalls.add(instance);\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitializationInConstructor(classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>element;\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              assert(!getterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(getterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              assert(!setterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(setterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType))\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType))\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    if (!instance.is(CommonFlags.TRAMPOLINE) && instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      instance = this.ensureTrampoline(instance);\n    }\n    functionTable.push(instance.internalName);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        labelNode.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(statement.condition, Type.i32),\n          this.currentType\n        )\n      );\n      let condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(condition, Type.bool),\n          this.currentType\n        )\n      );\n      condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          stmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        if (hasSideEffects(condExpr)) {\n          return module.block(null, [\n            module.drop(condExpr),\n            this.compileStatement(ifTrue)\n          ]);\n        }\n        return this.compileStatement(ifTrue);\n      }\n      case ConditionKind.FALSE: {\n        if (hasSideEffects(condExpr)) {\n          return ifFalse\n            ? module.block(null, [\n                module.drop(condExpr),\n                this.compileStatement(ifFalse)\n              ])\n            : module.drop(condExpr);\n        }\n        return ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      if (elseTerminates && !thenTerminates) {\n        flow.inherit(thenFlow);\n      } else {\n        flow.inheritMutual(thenFlow, elseFlow);\n      }\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString()\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = assert(scopedLocals.get(name));\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.is(TypeFlags.POINTER) && !toType.is(TypeFlags.POINTER)) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f32PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f64PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyPrototype.internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        if (\n          fieldInstance.is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode !== null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, fieldInstance.internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert(propertyPrototype.getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        assert(propertyInstance.parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>propertyInstance.parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          module.local_get(localIndex, type.toNativeType()),\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          module.global_get(global.internalName, nativeType),\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.flatten(stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression; // compileCallDirect may reset\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        return this.compileCallDirect(\n          functionInstance,\n          expression.arguments,\n          expression,\n          functionInstance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, fieldType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        let functionTarget = <FunctionTarget>target;\n        signature = functionTarget.signature;\n        indexArg = this.compileExpression(expression.expression, functionTarget.type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = assert(propertyPrototype.getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: asc can't see this yet\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var ctx = new BuiltinContext();\n    ctx.compiler = this;\n    ctx.prototype = prototype;\n    ctx.typeArguments = typeArguments;\n    ctx.operands = expression.arguments;\n    ctx.contextualType = contextualType;\n    ctx.reportNode = expression;\n    ctx.contextIsExact = false;\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureBuiltinArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n      // TODO: Enable this once mutable globals are the default nearly everywhere.\n      // if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n      //   module.addGlobalExport(BuiltinNames.argumentsLength, ExportNames.argumentsLength);\n      // } else {\n        module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n          module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n        );\n        module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n      // }\n    }\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureBuiltinArgumentsLength();\n          return module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.ensureBuiltinArgumentsLength();\n    var expr = module.block(null, [\n      module.global_set(BuiltinNames.argumentsLength, // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitializationInConstructor(classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.flatten(stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.block(null, [\n            module.drop(expr),\n            module.i32(1)\n          ], NativeType.I32);\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype)![0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr: ExpressionRef;\n      if (expression) {\n        expr = module.precomputeExpression(\n          this.compileExpression(expression, elementType,\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          )\n        );\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n        } else {\n          isStatic = false;\n        }\n      } else {\n        expr = this.makeZero(elementType);\n      }\n      values[i] = expr;\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression)\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression)\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    var isManaged = classReference.type.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classReference.type)\n      : flow.getTempLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        fieldType.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], fieldInstance.type, Constraints.CONV_IMPLICIT),\n        fieldType.toNativeType(),\n        fieldInstance.memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      isManaged\n        ? this.makeRetain(this.makeAllocation(classReference))\n        : this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classReference.type;\n    return module.flatten(exprs, this.options.nativeSizeType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance, // bound\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (classInstance.type.isUnmanaged || ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        return module.load(\n          fieldType.byteSize,\n          fieldType.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.is(CommonFlags.STATIC)) {\n          let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n          if (!functionInstance) return module.unreachable();\n          if (!this.compileFunction(functionInstance)) return module.unreachable();\n          this.currentType = functionInstance.type;\n          return module.i32(this.ensureFunctionTableEntry(functionInstance));\n        }\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, functionPrototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = evaluateConditionKind(condExpr);\n    if (condKind == ConditionKind.TRUE) return this.compileExpression(ifThen, ctxType);\n    if (condKind == ConditionKind.FALSE) return this.compileExpression(ifElse, ctxType);\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.ANYREF: return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n    }\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      while (classReference) {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (!this.checkTypeSupported(parameterTypes[i], reportNode.parameters[i])) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Evaluates the kind of a boolean condition from its expression. */\nfunction evaluateConditionKind(expr: ExpressionRef): ConditionKind {\n  assert(getExpressionType(expr) == NativeType.I32 || getExpressionType(expr) == NativeType.Unreachable);\n  if (getExpressionId(expr) == ExpressionId.Const) {\n    return getConstValueI32(expr)\n      ? ConditionKind.TRUE\n      : ConditionKind.FALSE;\n  }\n  return ConditionKind.UNKNOWN;\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Function_0_is_possibly_called_virtually_which_is_not_yet_supported = 104,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 105,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Function '{0}' is possibly called virtually, which is not yet supported.\";\n    case 105: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!member) return null;\n      members.push(member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && initializer !== null) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators !== null && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n      if (!startPos) startPos = accessStart;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n      if (!startPos) startPos = accessStart;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n      if (!startPos) startPos = accessStart;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n      if (!startPos) startPos = staticStart;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n        if (!startPos) startPos = abstractStart;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT)) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && ((flags & CommonFlags.STATIC) != 0 || isInterface || initializer !== null)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9 // see: https://github.com/WebAssembly/multi-value\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program, options: Options): void {\n  program.initialize(options);\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\nexport function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    // TODO: for (let v of original) {\n    for (let _values = Set_values(original), i = 0, k = _values.length; i < k; ++i) {\n      let v = unchecked(_values[i]);\n      cloned.add(v);\n    }\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n"],"sourceRoot":""}