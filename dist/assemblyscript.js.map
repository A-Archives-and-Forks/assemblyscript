{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","seen","has","codes","add","set","withRange","emitDiagnostic","Token","Range","NodeKind","DecoratorKind","LiteralKind","SourceKind","kind","LITERAL","NULL","TRUE","FALSE","Node","typeName","TypeName","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","type","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createNamedType","createSimpleTypeName","extendsType","defaultType","elem","TypeParameterNode","initializer","ParameterNode","parameterKind","args","stmt","DecoratorNode","arguments","decoratorKind","fromNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","elements","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","element","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","flags","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","typeParameters","implementsTypes","members","decorators","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","localName","exportedName","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","declarations","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","alias","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","PROPERTYACCESS","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","literalKind","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","CALL","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","super","SOURCE","parent","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","createFunctionDeclaration","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","classInstance","payloadSize","writeI32","id","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","INTERFACE","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","isBuiltinArray","lengthField","base","inheritedTypeArguments","baseName","baseType","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","ExpressionId","FeatureFlags","UnaryOp","BinaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","Auto","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","Unreachable","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","result","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","__i32_store","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Host","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinNames","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","pendingClasses","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","finishResolveClass","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","pendingIndex","indexOf","splice","derivedPendingClasses","pending","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","Exnref","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","importMemory","sharedMemory","importTable","exportTable","explicitStart","features","noUnsafe","pedantic","feature","Constraints","RuntimeFeatures","argumentsLength","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","runtimeFeatures","skippedAutoreleases","inlineStack","lazyLibraryFunctions","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","nativeParams","nativeResults","flatten","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","info","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileFunction","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureBuiltinArgumentsLength","COMPILED","makeExportedFieldGetter","makeExportedFieldSetter","isUnmanaged","subPrefix","nativeThisType","nativeSizeType","nativeValueType","returnExpr","load","local_get","isManaged","makeRetain","valueExpr","makeReplace","store","compileMembers","compileGlobal","compileEnum","compileClass","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","compileExpression","nativeType","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","origInitExpr","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","makeZero","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","An_implementation_cannot_be_declared_in_ambient_contexts","local_set","compileFunctionBody","performAutoreleases","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","temp","unary","makeAllocation","makeFieldInitializationInConstructor","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","staticMembers","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","makeIsTrueish","evaluateConditionKind","drop","tcond","hasIncompatibleLocalStates","popBreakLabel","doCompileWhileStatement","hasScopedLocals","loop","doCompileForStatement","loopLabel","condKind","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","unset","newArgs","makeAbort","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","local_tee","retainLeftInElse","delayAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","nativeFieldType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","Optional_parameter_must_have_an_initializer","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","tempDataStart","arrayType","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseClass","baseCtor","allocExpr","theEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","ref_is_null","thisLocalIndex","fieldPrototype","codeLocation","messageArg","filenameArg","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","resultType","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_avgr","AvgrU8x16","AvgrU16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","i64_to_string","walk","TSDBuilder","unknown","numMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","map","isSet","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","ipos","dirname","origin","readI32","readI64","valueI64"],"mappings":"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ACAkM,GACA,KA2HN,wB,8EC5tHA,aACA,QAmBA,IAAYssB,EA6BAC,GA7BZ,SAAYD,GACV,mBACA,iCACA,iBACA,iBACA,iBACA,iBACA,mBACA,yBACA,uBACA,yBACA,wBACA,oBAZF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAetB,SAAYE,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,mBAXF,CAAY,EAAAA,eAAA,EAAAA,aAAY,KAcxB,SAAYD,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BA/CF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAkDxB,SAAYE,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,sDACA,oDACA,sDACA,oDACA,sDACA,oDACA,uDA3GF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA8GnB,SAAYC,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iDACA,iDACA,iDACA,iDACA,qCA/KF,CAAY,EAAAA,WAAA,EAAAA,SAAQ,KAkLpB,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,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AO9sC,EAAMmR,KAE5B,MAEF,KAAK,IACH,OAAQvS,GACN,IAAK,QAAS,OAAOoB,EAAMoR,MAC3B,IAAK,OAAQ,OAAOpR,EAAM+sC,KAE5B,MAEF,KAAK,IACH,OAAQnuC,GACN,IAAK,QAAS,OAAOoB,EAAMgtC,OAKjC,OAAOhtC,EAAMmU,QAGf,SAAgB84B,EAAsB54B,GACpC,OAAQA,GACN,KAAKrU,EAAM4iB,SACX,KAAK5iB,EAAMqrC,GACX,KAAKrrC,EAAMqN,YACX,KAAKrN,EAAM6kB,QACX,KAAK7kB,EAAM4rC,OACX,KAAK5rC,EAAMgsC,KACX,KAAKhsC,EAAMiQ,IACX,KAAKjQ,EAAMoiB,IACX,KAAKpiB,EAAMwN,WACX,KAAKxN,EAAMmsC,GACX,KAAKnsC,EAAMosC,MACX,KAAKpsC,EAAMssC,OACX,KAAKtsC,EAAMumB,UACX,KAAKvmB,EAAMQ,KACX,KAAKR,EAAM2iB,SACX,KAAK3iB,EAAMqiB,IACX,KAAKriB,EAAM4sC,KACX,KAAK5sC,EAAMmR,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYnR,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBAC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ACA,uIACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA9IF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAkJ1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAA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A,SACA,QACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,S,8EC7OA,oBAAyB+6G,EAAU1pF,GAEjC,OADA9pB,OAAO8pB,GAAS,GAAKA,EAAQ,IACtB8gF,OACLd,QACE0J,EACA9+D,QACEo0D,QACAzsF,QAAQyN,KAGZszB,WAKJ,qBAA0Bo2D,EAAU1pF,EAAY2pF,GAE9C,OADAzzG,OAAO8pB,GAAS,GAAKA,EAAQ,IACtB2pF,EACHzJ,OACEwJ,EACA9+D,QACEo0D,QACAzsF,QAAQyN,KAGZggF,QACE0J,EACAhJ,QACE91D,QACEo0D,QACAzsF,QAAQyN,Q,8EC9BpB,SAAkB4pF,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Br9G,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAMs9G,EAAS,GAAJt9G,EACX,OAAOs9G,GAAM,IAAcA,GAAM,KACrB,IAALt9G,GACK,IAALA,GACAA,EAAI,SAmLqBoK,EAnLYpK,GAoL9B,KAAOoK,EAAO,QACrBmzG,EAAmBnzG,EAAaozG,IAFzC,IAAkCpzG,GA/KlC,8BAAmCpK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMs9G,EAAS,GAAJt9G,EACX,OAAOs9G,GAAM,IAAcA,GAAM,KAC1Bt9G,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBoK,EAzKYpK,GA0K7B,KAAOoK,EAAO,QACrBmzG,EAAmBnzG,EAAaqzG,IAFzC,IAAiCrzG,GArKjC,MAAMozG,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Range,Set<DiagnosticCode>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range)) {\n        let codes = seen.get(range)!;\n        if (codes.has(code)) return;\n        codes.add(code);\n      } else {\n        let codes = new Set<DiagnosticCode>();\n        codes.add(code);\n        seen.set(range, codes);\n      }\n    }\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.typeName = typeName;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  kind = NodeKind.NEW;\n\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonNames.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonNames.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var managedClasses = this.managedClasses;\n    var cyclics = new Set<Class>();\n    for (let instance of managedClasses.values()) {\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      for (let [baseName, baseType] of inheritedTypeArguments) {\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field !== null && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = []\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport enum NativeType {\n  None = 0 /* _BinaryenTypeNone */,\n  Unreachable = 1 /* _BinaryenTypeUnreachable */,\n  I32 = 2 /* _BinaryenTypeInt32 */,\n  I64 = 3 /* _BinaryenTypeInt64 */,\n  F32 = 4 /* _BinaryenTypeFloat32 */,\n  F64 = 5 /* _BinaryenTypeFloat64 */,\n  V128 = 6 /* _BinaryenTypeVec128 */,\n  Funcref = 7 /* _BinaryenTypeFuncref */,\n  Anyref = 8 /* _BinaryenTypeAnyref */,\n  Nullref = 9 /* _BinaryenTypeNullref */,\n  Exnref = 10 /* _BinaryenTypeExnref */,\n  Auto = -1 /* _BinaryenTypeAuto */\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  All = 511 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  NegI8x16 = 67 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 68 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 69 /* _BinaryenAllTrueVecI8x16 */,\n  NegI16x8 = 70 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 71 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 72 /* _BinaryenAllTrueVecI16x8 */,\n  NegI32x4 = 73 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 74 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 75 /* _BinaryenAllTrueVecI32x4 */,\n  NegI64x2 = 76 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 77 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 78 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 79 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 80 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 81 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 82 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 83 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 84 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 85 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 86 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 87 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 88 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 89 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 90 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 91 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 92 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 93 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 94 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 95 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 96 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 97 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 98 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 99 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 100 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  AddF64x2 = 162 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 163 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 164 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 165 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 166 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 167 /* _BinaryenMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 168 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 169 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 170 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 171 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 172 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = binaryen.__i32_load(out);\n      let binaryLen = binaryen.__i32_load(out + 4);\n      sourceMapPtr = binaryen.__i32_load(out + 8);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryLen);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) binaryen._free(cStr);\n      if (binaryPtr) binaryen._free(binaryPtr);\n      if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) binaryen._free(ptr);\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocI32Array(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array(arity);\n  for (let i = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return binaryen._BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return binaryen._BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = binaryen._BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(binaryen._BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(binaryen._BinaryenIfGetCondition(expr))\n          || hasSideEffects(binaryen._BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(binaryen._BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(binaryen._BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(binaryen._BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(binaryen._BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(binaryen._BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(binaryen._BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(binaryen._BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(binaryen._BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.text) {\n          case CommonNames.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonNames.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonNames.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonNames.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Class[] = [];\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.push(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n      } while (current = current.basePrototype);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.includes(base)) return instance;\n    }\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var instanceMembers = instance.members;\n    if (!instanceMembers) instance.members = instanceMembers = new Map();\n\n    // Alias base members\n    var pendingClasses = this.resolveClassPending;\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.includes(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let field = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            field.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, field); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.nextMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          assert(instance.contextualTypeArguments),\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    var pendingIndex = pendingClasses.indexOf(instance);\n    assert(~pendingIndex); // must be pending\n    pendingClasses.splice(pendingIndex, 1);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    var derivedPendingClasses = new Array<Class>();\n    for (let i = 0, k = pendingClasses.length; i < k; ++i) {\n      let pending = pendingClasses[i];\n      if (instance == pending.base) derivedPendingClasses.push(pending);\n    }\n    for (let i = 0, k = derivedPendingClasses.length; i < k; ++i) {\n      this.finishResolveClass(derivedPendingClasses[i], reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 13,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && scope.has(name)) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ALLOCATES) { // can become conditional\n      if (otherFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (otherFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ALLOCATES) {\n      if (rightFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (rightFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n    var combinedFlags = new Array<LocalFlags>(maxLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n      let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n      let newFlags = leftFlags & rightFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (leftFlags & LocalFlags.RETAINED) {\n        if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (rightFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      combinedFlags[i] = newFlags;\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ALLOCATES)) sb.push(\"ALLOCATES\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ALLOCATES)) sb.push(\"CONDITIONALLY_ALLOCATES\");\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","const binaryen = global.Binaryen || (global.Binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinNames,\n  compileCall as compileBuiltinCall,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonNames,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    var module = Module.create();\n    this.module = module;\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        for (let classInstance of cyclicClasses) {\n          this.info(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      for (let instance of lazyLibraryFunctions) {\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      ExportNames.memory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    module.setFunctionTable(1 + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(1));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.warning(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.warning(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureBuiltinArgumentsLength();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.makeExportedFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.makeExportedFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes an exported function to get the value of an instance field. */\n  private makeExportedFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var returnExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, field.memoryOffset\n    );\n    // functions retain the return value for the caller\n    if (type.isManaged) returnExpr = this.makeRetain(returnExpr);\n    module.addFunction(name, nativeThisType, nativeValueType, null, returnExpr);\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes an exported function to set the value of an instance field. */\n  private makeExportedFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.local_get(1, nativeValueType);\n    if (type.isManaged) {\n      valueExpr = this.makeReplace(\n        module.load(type.byteSize, false,\n          module.local_get(0, nativeThisType),\n          nativeValueType, field.memoryOffset\n        ),\n        valueExpr\n      );\n    }\n    module.addFunction(name, createType([ nativeThisType, nativeValueType ]), NativeType.None, null,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (instance) this.compileClass(instance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          assert(!getterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(getterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          assert(!setterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) for (let element of members.values()) this.compileElement(element);\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          let origInitExpr = initExpr;\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n          if (this.skippedAutoreleases.has(origInitExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = this.makeZero(type);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        module.flatten(stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n            if (getterPrototype) {\n              assert(!getterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(getterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n            if (setterPrototype) {\n              assert(!setterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(setterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getterInstance = (<Property>element).getterInstance;\n            if (getterInstance) this.compileFunction(getterInstance);\n            let setterInstance = (<Property>element).setterInstance;\n            if (setterInstance) this.compileFunction(setterInstance);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  private addStaticBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED));\n    var index = instance.functionTableIndex;\n    if (index >= 0) {\n      assert(index != 0); // first elem must be blank\n      return index;\n    }\n    var functionTable = this.functionTable;\n    index = 1 + functionTable.length; // first elem is blank\n    if (!instance.is(CommonFlags.TRAMPOLINE) && instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      instance = this.ensureTrampoline(instance);\n    }\n    functionTable.push(instance.internalName);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(statement.condition, Type.i32),\n          this.currentType\n        )\n      );\n      let condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileWhileStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(condition, Type.bool),\n          this.currentType\n        )\n      );\n      condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          stmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        if (hasSideEffects(condExpr)) {\n          return module.block(null, [\n            module.drop(condExpr),\n            this.compileStatement(ifTrue)\n          ]);\n        }\n        return this.compileStatement(ifTrue);\n      }\n      case ConditionKind.FALSE: {\n        if (hasSideEffects(condExpr)) {\n          return ifFalse\n            ? module.block(null, [\n                module.drop(condExpr),\n                this.compileStatement(ifFalse)\n              ])\n            : module.drop(condExpr);\n        }\n        return ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    if (thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    return this.makeAssignment(\n      target,\n      valueExpr,\n      this.currentType,\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let instance = <Class>(<Property>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let instance = <Class>(<IndexSignature>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = instance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, instance.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = instance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, instance.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2);\n        let valueType = indexedSet.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(instance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          module.local_get(localIndex, type.toNativeType()),\n          valueExpr,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          module.global_get(global.internalName, nativeType), // oldRef\n          valueExpr, // newRef\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              module.local_tee(tempValue.index, valueExpr), // newRef\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            valueExpr, // newRef\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.flatten(stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonNames.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureBuiltinArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n      module.addGlobalExport(BuiltinNames.argumentsLength, ExportNames.argumentsLength);\n    }\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(oldExpr: ExpressionRef, newExpr: ExpressionRef, alreadyRetained: bool = false): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        for (let local of scopedLocals.values()) {\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureBuiltinArgumentsLength();\n          return module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.ensureBuiltinArgumentsLength();\n    var expr = module.block(null, [\n      module.global_set(BuiltinNames.argumentsLength, // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.flatten(stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(instance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let elementExpressions = (<ArrayLiteralExpression>expression).elementExpressions;\n\n        // Infer from first element in auto contexts\n        if (contextualType == Type.auto) {\n          return this.compileArrayLiteral(\n            Type.auto,\n            elementExpressions,\n            constraints,\n            expression\n          );\n        }\n\n        // Use contextual type if an array\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classType = contextualType.classReference;\n          if (classType) {\n            if (classType.prototype == this.program.arrayPrototype) {\n              return this.compileArrayLiteral(\n                assert(classType.typeArguments)[0],\n                elementExpressions,\n                constraints,\n                expression\n              );\n            }\n          }\n        }\n\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // infer common element type in auto contexts\n    var length = expressions.length;\n    if (elementType == Type.auto) {\n      for (let i = 0; i < length; ++i) {\n        let expression = expressions[i];\n        if (expression) {\n          let currentType = this.resolver.resolveExpression(expression, this.currentFlow, elementType);\n          if (!currentType) return module.unreachable();\n          if (elementType == Type.auto) elementType = currentType;\n          else if (currentType != elementType) {\n            let commonType = Type.commonDenominator(elementType, currentType, false);\n            if (commonType) elementType = commonType;\n            // otherwise triggers error further down\n          }\n        }\n      }\n      if (elementType /* still */ == Type.auto) {\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          reportNode.range, \"T\"\n        );\n        return module.unreachable();\n      }\n    }\n\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayType = arrayInstance.type;\n\n    // compile value expressions and find out whether all are constant\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], reportNode)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (!(constraints & Constraints.WILL_RETAIN)) {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      } else {\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.flatten(exprs, this.options.nativeSizeType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n        // FIXME\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.unreachable();\n          if (!this.compileFunction(instance)) return module.unreachable();\n          this.currentType = instance.type;\n          return module.i32(this.ensureFunctionTableEntry(instance));\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonNames.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(codeLocation.range.line),\n          module.i32(codeLocation.range.column)\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(assert(toType.classReference).id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Evaluates the kind of a boolean condition from its expression. */\nfunction evaluateConditionKind(expr: ExpressionRef): ConditionKind {\n  assert(getExpressionType(expr) == NativeType.I32 || getExpressionType(expr) == NativeType.Unreachable);\n  if (getExpressionId(expr) == ExpressionId.Const) {\n    return getConstValueI32(expr)\n      ? ConditionKind.TRUE\n      : ConditionKind.FALSE;\n  }\n  return ConditionKind.UNKNOWN;\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects,\n  createType\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  Class\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinNames.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinNames.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinNames.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinNames.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinNames.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinNames.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinNames.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinNames.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinNames.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinNames.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinNames.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinNames.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinNames.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.nextMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinNames.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinNames.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinNames.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinNames.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinNames.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinNames.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinNames.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinNames.atomic_sub:\n    case BuiltinNames.atomic_and:\n    case BuiltinNames.atomic_or:\n    case BuiltinNames.atomic_xor:\n    case BuiltinNames.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinNames.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinNames.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinNames.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinNames.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinNames.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinNames.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinNames.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinNames.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinNames.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinNames.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinNames.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinNames.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinNames.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinNames.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinNames.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinNames.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinNames.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinNames.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinNames.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinNames.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        // use stdlib alternative if not supported\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinNames.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        // use stdlib alternative if not supported\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinNames.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinNames.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinNames.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinNames.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinNames.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinNames.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinNames.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinNames.v128: // alias for now\n    case BuiltinNames.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinNames.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_avgr: { // avgr<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinNames.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinNames.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinNames.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinNames.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinNames.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinNames.i32_clz: return deferASM(BuiltinNames.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_clz: return deferASM(BuiltinNames.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_ctz: return deferASM(BuiltinNames.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_ctz: return deferASM(BuiltinNames.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_popcnt: return deferASM(BuiltinNames.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_popcnt: return deferASM(BuiltinNames.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_rotl: return deferASM(BuiltinNames.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_rotl: return deferASM(BuiltinNames.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_rotr: return deferASM(BuiltinNames.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_rotr: return deferASM(BuiltinNames.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_abs: return deferASM(BuiltinNames.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_abs: return deferASM(BuiltinNames.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_max: return deferASM(BuiltinNames.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_max: return deferASM(BuiltinNames.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_min: return deferASM(BuiltinNames.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_min: return deferASM(BuiltinNames.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_ceil: return deferASM(BuiltinNames.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_ceil: return deferASM(BuiltinNames.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_floor: return deferASM(BuiltinNames.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_floor: return deferASM(BuiltinNames.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_copysign: return deferASM(BuiltinNames.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_copysign: return deferASM(BuiltinNames.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_nearest: return deferASM(BuiltinNames.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_nearest: return deferASM(BuiltinNames.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.i32_reinterpret_f32: return deferASM(BuiltinNames.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinNames.i64_reinterpret_f64: return deferASM(BuiltinNames.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_reinterpret_i32: return deferASM(BuiltinNames.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinNames.f64_reinterpret_i64: return deferASM(BuiltinNames.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_sqrt: return deferASM(BuiltinNames.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_sqrt: return deferASM(BuiltinNames.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_trunc: return deferASM(BuiltinNames.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_trunc: return deferASM(BuiltinNames.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.i32_load8_s: return deferASM(BuiltinNames.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load8_u: return deferASM(BuiltinNames.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load16_s: return deferASM(BuiltinNames.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load16_u: return deferASM(BuiltinNames.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load: return deferASM(BuiltinNames.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_load8_s: return deferASM(BuiltinNames.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load8_u: return deferASM(BuiltinNames.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load16_s: return deferASM(BuiltinNames.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load16_u: return deferASM(BuiltinNames.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load32_s: return deferASM(BuiltinNames.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load32_u: return deferASM(BuiltinNames.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load: return deferASM(BuiltinNames.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_load: return deferASM(BuiltinNames.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_load: return deferASM(BuiltinNames.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.i32_store8: return deferASM(BuiltinNames.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_store16: return deferASM(BuiltinNames.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_store: return deferASM(BuiltinNames.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_store8: return deferASM(BuiltinNames.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_store16: return deferASM(BuiltinNames.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_store32: return deferASM(BuiltinNames.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_store: return deferASM(BuiltinNames.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_store: return deferASM(BuiltinNames.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_store: return deferASM(BuiltinNames.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinNames.i32_atomic_load8_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_load16_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_load: return deferASM(BuiltinNames.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_load8_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_load16_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_load32_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_load: return deferASM(BuiltinNames.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_store8: return deferASM(BuiltinNames.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_store16: return deferASM(BuiltinNames.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_store: return deferASM(BuiltinNames.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_store8: return deferASM(BuiltinNames.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_store16: return deferASM(BuiltinNames.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_store32: return deferASM(BuiltinNames.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_store: return deferASM(BuiltinNames.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_add: return deferASM(BuiltinNames.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_add: return deferASM(BuiltinNames.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_sub: return deferASM(BuiltinNames.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_sub: return deferASM(BuiltinNames.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_and: return deferASM(BuiltinNames.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_and: return deferASM(BuiltinNames.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_or: return deferASM(BuiltinNames.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_or: return deferASM(BuiltinNames.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_xor: return deferASM(BuiltinNames.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_xor: return deferASM(BuiltinNames.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_xchg: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_xchg: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_wait: return deferASM(BuiltinNames.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_wait: return deferASM(BuiltinNames.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinNames.v128_load: return deferASM(BuiltinNames.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinNames.v128_store: return deferASM(BuiltinNames.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i8x16_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_extract_lane_s: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinNames.i8x16_extract_lane_u: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinNames.i8x16_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_min_s: return deferASM(BuiltinNames.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_min_u: return deferASM(BuiltinNames.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_max_s: return deferASM(BuiltinNames.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_max_u: return deferASM(BuiltinNames.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_avgr_u: return deferASM(BuiltinNames.v128_avgr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_add_saturate_s: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_add_saturate_u: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_sub_saturate_s: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_sub_saturate_u: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i8x16_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i8x16_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_lt_s: return deferASM(BuiltinNames.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_lt_u: return deferASM(BuiltinNames.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_le_s: return deferASM(BuiltinNames.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_le_u: return deferASM(BuiltinNames.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_gt_s: return deferASM(BuiltinNames.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_gt_u: return deferASM(BuiltinNames.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_ge_s: return deferASM(BuiltinNames.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_ge_u: return deferASM(BuiltinNames.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_narrow_i16x8_s: return deferASM(BuiltinNames.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_narrow_i16x8_u: return deferASM(BuiltinNames.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i16x8_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_extract_lane_s: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinNames.i16x8_extract_lane_u: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinNames.i16x8_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_min_s: return deferASM(BuiltinNames.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_min_u: return deferASM(BuiltinNames.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_max_s: return deferASM(BuiltinNames.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_max_u: return deferASM(BuiltinNames.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_avgr_u: return deferASM(BuiltinNames.v128_avgr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_add_saturate_s: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_add_saturate_u: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_sub_saturate_s: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_sub_saturate_u: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i16x8_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i16x8_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_lt_s: return deferASM(BuiltinNames.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_lt_u: return deferASM(BuiltinNames.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_le_s: return deferASM(BuiltinNames.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_le_u: return deferASM(BuiltinNames.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_gt_s: return deferASM(BuiltinNames.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_gt_u: return deferASM(BuiltinNames.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_ge_s: return deferASM(BuiltinNames.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_ge_u: return deferASM(BuiltinNames.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_narrow_i32x4_s: return deferASM(BuiltinNames.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_narrow_i32x4_u: return deferASM(BuiltinNames.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_low_i8x16_s: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_low_i8x16_u: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_high_i8x16_s: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_high_i8x16_u: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_load8x8_s: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_load8x8_u: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i32x4_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i32x4_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_min_s: return deferASM(BuiltinNames.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_min_u: return deferASM(BuiltinNames.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_max_s: return deferASM(BuiltinNames.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_max_u: return deferASM(BuiltinNames.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_dot_i16x8_s: return deferASM(BuiltinNames.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i32x4_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i32x4_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_lt_s: return deferASM(BuiltinNames.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_lt_u: return deferASM(BuiltinNames.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_le_s: return deferASM(BuiltinNames.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_le_u: return deferASM(BuiltinNames.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_gt_s: return deferASM(BuiltinNames.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_gt_u: return deferASM(BuiltinNames.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_ge_s: return deferASM(BuiltinNames.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_ge_u: return deferASM(BuiltinNames.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_low_i16x8_s: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_low_i16x8_u: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_high_i16x8_s: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_high_i16x8_u: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_load16x4_s: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_load16x4_u: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i64x2_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i64x2_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinNames.i64x2_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinNames.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_load32x2_s: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_load32x2_u: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinNames.f32x4_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f32x4_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_add: return deferASM(BuiltinNames.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_div: return deferASM(BuiltinNames.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_min: return deferASM(BuiltinNames.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_max: return deferASM(BuiltinNames.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_abs: return deferASM(BuiltinNames.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_sqrt: return deferASM(BuiltinNames.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_lt: return deferASM(BuiltinNames.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_le: return deferASM(BuiltinNames.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_gt: return deferASM(BuiltinNames.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_ge: return deferASM(BuiltinNames.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_convert_i32x4_s: return deferASM(BuiltinNames.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_convert_i32x4_u: return deferASM(BuiltinNames.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_qfma: return deferASM(BuiltinNames.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_qfms: return deferASM(BuiltinNames.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinNames.f64x2_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f64x2_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_add: return deferASM(BuiltinNames.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_div: return deferASM(BuiltinNames.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_min: return deferASM(BuiltinNames.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_max: return deferASM(BuiltinNames.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_abs: return deferASM(BuiltinNames.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_sqrt: return deferASM(BuiltinNames.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_lt: return deferASM(BuiltinNames.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_le: return deferASM(BuiltinNames.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_gt: return deferASM(BuiltinNames.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_ge: return deferASM(BuiltinNames.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_convert_i64x2_s: return deferASM(BuiltinNames.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_convert_i64x2_u: return deferASM(BuiltinNames.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_qfma: return deferASM(BuiltinNames.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_qfms: return deferASM(BuiltinNames.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinNames.v8x16_shuffle: return deferASM(BuiltinNames.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.v8x16_swizzle: return deferASM(BuiltinNames.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinNames.v8x16_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.v16x8_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.v32x4_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.v64x2_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(name, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier()) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}